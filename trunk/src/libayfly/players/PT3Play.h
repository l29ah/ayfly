//Pro tracker 3.x player was written by S.V. Bulba.

const unsigned char PT3Play_data[] =
{ 0x21, 0x6e, 0xc8, 0x18, 0x3a, 0xc3, 0xb9, 0xc4, 0x18, 0x29, 0x00, 0x00, 0x00, 0x3d, 0x56, 0x54, 0x49, 0x49, 0x20, 0x50, 0x54, 0x33, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x72, 0x2e, 0x37, 0x3d, 0x21, 0x0a, 0xc0, 0xcb, 0xfe, 0xcb, 0x46, 0xc8, 0xe1, 0x21, 0xa8, 0xc6, 0x34, 0x21, 0x6c, 0xc6, 0x34, 0xaf, 0x67, 0x6f, 0x32, 0xb6, 0xc6, 0x22, 0xb7, 0xc6, 0xc3, 0xab, 0xc5, 0x22, 0xa8, 0xc1, 0x22, 0x3e, 0xc3, 0xe5, 0x11, 0x64, 0x00, 0x19, 0x7e, 0x32, 0x45, 0xc5, 0xe5, 0xdd, 0xe1, 0x19, 0x22,
        0x0b, 0xc0, 0xdd, 0x5e, 0x02, 0x19, 0x23, 0x22, 0xe7, 0xc4, 0xd1, 0xdd, 0x6e, 0x03, 0xdd, 0x66, 0x04, 0x19, 0x22, 0xf4, 0xc4, 0x21, 0xa9, 0x00, 0x19, 0x22, 0x37, 0xc3, 0x21, 0x69, 0x00, 0x19, 0x22, 0xa1, 0xc1, 0x21, 0x0a, 0xc0, 0xcb, 0xbe, 0x11, 0x1c, 0xc6, 0x01, 0x1f, 0xc7, 0x1a, 0x13, 0xfe, 0x1e, 0x30, 0x06, 0x67, 0x1a, 0x6f, 0x13, 0x18, 0x07, 0xd5, 0x16, 0x00, 0x5f, 0x19, 0x19, 0xd1, 0x7c, 0x02, 0x0b, 0x7d, 0x02, 0x0b, 0xd6, 0xf0, 0x20, 0xe3, 0x21, 0x51, 0xc6, 0x77, 0x11, 0x52, 0xc6,
        0x01, 0x6c, 0x00, 0xed, 0xb0, 0x3c, 0x32, 0xa8, 0xc6, 0x21, 0x01, 0xf0, 0x22, 0x6c, 0xc6, 0x22, 0x89, 0xc6, 0x22, 0xa6, 0xc6, 0x21, 0x18, 0xc6, 0x22, 0xd1, 0xc4, 0x22, 0x5e, 0xc6, 0x22, 0x7b, 0xc6, 0x22, 0x98, 0xc6, 0x22, 0x60, 0xc6, 0x22, 0x7d, 0xc6, 0x22, 0x9a, 0xc6, 0xdd, 0x7e, 0xa9, 0xd6, 0x30, 0x38, 0x04, 0xfe, 0x0a, 0x38, 0x02, 0x3e, 0x06, 0x32, 0x8d, 0xc2, 0xf5, 0xfe, 0x04, 0xdd, 0x7e, 0xff, 0x17, 0xe6, 0x07, 0x21, 0xc8, 0xc5, 0xd5, 0x50, 0x87, 0x5f, 0x19, 0x5e, 0x23, 0xcb, 0x3b,
        0x9f, 0xe6, 0xa7, 0x32, 0x20, 0xc1, 0xeb, 0xc1, 0x09, 0x1a, 0xc6, 0xd8, 0x4f, 0xce, 0xc5, 0x91, 0x47, 0xc5, 0x11, 0xae, 0xc7, 0xd5, 0x06, 0x0c, 0xc5, 0x4e, 0x23, 0xe5, 0x46, 0xd5, 0xeb, 0x11, 0x17, 0x00, 0xdd, 0x26, 0x08, 0xcb, 0x38, 0xcb, 0x19, 0x19, 0x79, 0x8a, 0x77, 0x23, 0x78, 0x8a, 0x77, 0x19, 0xdd, 0x25, 0x20, 0xef, 0xd1, 0x13, 0x13, 0xe1, 0x23, 0xc1, 0x10, 0xda, 0xe1, 0xd1, 0x7b, 0xfe, 0xe4, 0x20, 0x05, 0x3e, 0xfd, 0x32, 0xdc, 0xc7, 0x1a, 0xa7, 0x28, 0x11, 0x1f, 0xf5, 0x87, 0x4f,
        0x09, 0xf1, 0x30, 0x02, 0x35, 0x35, 0x34, 0xa7, 0xed, 0x42, 0x13, 0x18, 0xeb, 0xf1, 0xfe, 0x05, 0x21, 0x11, 0x00, 0x54, 0x5c, 0x3e, 0x17, 0x30, 0x03, 0x2d, 0x5d, 0xaf, 0x32, 0x74, 0xc1, 0xdd, 0x21, 0xbe, 0xc6, 0x0e, 0x10, 0xe5, 0x19, 0xeb, 0xed, 0x62, 0x7d, 0x7d, 0x7c, 0xce, 0x00, 0xdd, 0x77, 0x00, 0xdd, 0x23, 0x19, 0x0c, 0x79, 0xe6, 0x0f, 0x20, 0xef, 0xe1, 0x7b, 0xfe, 0x77, 0x20, 0x01, 0x1c, 0x79, 0xa7, 0x20, 0xdf, 0xc3, 0xab, 0xc5, 0xdd, 0x36, 0x08, 0x00, 0xcd, 0x2f, 0xc3, 0x0a, 0x03,
        0x0f, 0x87, 0x5f, 0x16, 0x00, 0x21, 0x21, 0x21, 0x19, 0x5e, 0x23, 0x56, 0x21, 0x21, 0x21, 0x19, 0xdd, 0x75, 0x03, 0xdd, 0x74, 0x04, 0x18, 0x41, 0x07, 0x07, 0x07, 0x07, 0xdd, 0x77, 0x10, 0x18, 0x3b, 0xdd, 0x77, 0x08, 0xdd, 0x77, 0xf4, 0x18, 0x33, 0x3d, 0x20, 0x07, 0x0a, 0x03, 0xdd, 0x77, 0x05, 0x18, 0x29, 0xcd, 0x13, 0xc3, 0x18, 0x24, 0xcd, 0x2f, 0xc3, 0x18, 0x1c, 0xdd, 0x77, 0x08, 0xdd, 0x77, 0xf4, 0xc4, 0x13, 0xc3, 0x0a, 0x03, 0x18, 0xb8, 0xdd, 0x7e, 0x06, 0x32, 0x71, 0xc2, 0xdd, 0x6e,
        0xfa, 0xdd, 0x66, 0xfb, 0x22, 0x93, 0xc2, 0x11, 0x10, 0x20, 0x0a, 0x03, 0x83, 0x38, 0x96, 0x82, 0x28, 0x49, 0x38, 0x9b, 0x83, 0x28, 0x25, 0x38, 0xad, 0x83, 0x28, 0xb3, 0x38, 0xb9, 0xc6, 0x60, 0x38, 0x20, 0x83, 0x38, 0xc1, 0x82, 0x38, 0x0f, 0x83, 0x38, 0xc0, 0x87, 0x5f, 0x21, 0x68, 0xa2, 0x19, 0x5e, 0x23, 0x56, 0xd5, 0x18, 0xd0, 0x32, 0xac, 0xc6, 0x18, 0xce, 0xdd, 0xcb, 0x09, 0x86, 0x18, 0x08, 0xdd, 0x77, 0x06, 0xdd, 0xcb, 0x09, 0xc6, 0xaf, 0xed, 0x73, 0x46, 0xc2, 0xdd, 0xf9, 0x67, 0x6f,
        0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0xe5, 0x31, 0x31, 0x31, 0xdd, 0x7e, 0x05, 0xdd, 0x77, 0x0f, 0xc9, 0xdd, 0xcb, 0x09, 0x96, 0x0a, 0x03, 0x03, 0x03, 0xdd, 0x77, 0x0a, 0xdd, 0x77, 0xf9, 0x11, 0xae, 0xc7, 0xdd, 0x7e, 0x06, 0xdd, 0x77, 0x07, 0x87, 0x6f, 0x26, 0x00, 0x19, 0x7e, 0x23, 0x66, 0x6f, 0xe5, 0x3e, 0x3e, 0xdd, 0x77, 0x06, 0x87, 0x6f, 0x26, 0x00, 0x19, 0x5e, 0x23, 0x56, 0xe1, 0xed, 0x52, 0xdd, 0x75, 0x0d, 0xdd, 0x74, 0x0e, 0xdd, 0x5e, 0xfa, 0xdd, 0x56, 0xfb, 0x3e, 0x3e, 0xfe, 0x06, 0x38,
        0x09, 0x11, 0x11, 0x11, 0xdd, 0x73, 0xfa, 0xdd, 0x72, 0xfb, 0x0a, 0x03, 0x08, 0x0a, 0x03, 0xa7, 0x28, 0x01, 0xeb, 0xed, 0x52, 0xf2, 0xae, 0xc2, 0x2f, 0x08, 0xed, 0x44, 0x08, 0xdd, 0x77, 0x0c, 0x08, 0xdd, 0x77, 0x0b, 0xdd, 0x36, 0xfe, 0x00, 0xc9, 0xdd, 0xcb, 0x09, 0xd6, 0x0a, 0x03, 0xdd, 0x77, 0x0a, 0xa7, 0x20, 0x07, 0x3a, 0x8d, 0xc2, 0xfe, 0x07, 0x9f, 0x3c, 0xdd, 0x77, 0xf9, 0x0a, 0x03, 0x08, 0x0a, 0x03, 0x18, 0xd7, 0x0a, 0x03, 0xdd, 0x77, 0xf5, 0xc9, 0x0a, 0x03, 0xdd, 0x77, 0xf4, 0xc9,
        0x0a, 0x03, 0xdd, 0x77, 0xff, 0xdd, 0x77, 0xfe, 0x0a, 0x03, 0xdd, 0x77, 0x00, 0xaf, 0xdd, 0x77, 0xf9, 0xdd, 0x77, 0xfa, 0xdd, 0x77, 0xfb, 0xc9, 0x0a, 0x03, 0x32, 0xa1, 0xc5, 0x32, 0xab, 0xc6, 0x0a, 0x03, 0x6f, 0x0a, 0x03, 0x67, 0x22, 0xa4, 0xc5, 0xc9, 0x0a, 0x03, 0x32, 0x45, 0xc5, 0xc9, 0xdd, 0x73, 0x08, 0x32, 0xbb, 0xc6, 0x0a, 0x03, 0x67, 0x0a, 0x03, 0x6f, 0x22, 0xbc, 0xc6, 0xaf, 0xdd, 0x77, 0xf4, 0x32, 0xab, 0xc6, 0x67, 0x6f, 0x22, 0xa9, 0xc6, 0xc9, 0x87, 0x5f, 0x16, 0x00, 0xdd, 0x72,
        0xf4, 0x21, 0x21, 0x21, 0x19, 0x5e, 0x23, 0x56, 0x21, 0x21, 0x21, 0x19, 0xdd, 0x75, 0x01, 0xdd, 0x74, 0x02, 0xc9, 0x2e, 0xc3, 0xba, 0xc2, 0x4f, 0xc2, 0xd7, 0xc2, 0xdd, 0xc2, 0xe3, 0xc2, 0x2e, 0xc3, 0x2e, 0xc3, 0xfb, 0xc2, 0x0d, 0xc3, 0x2e, 0xc3, 0x2e, 0xc3, 0x2e, 0xc3, 0x2e, 0xc3, 0x2e, 0xc3, 0x2e, 0xc3, 0xaf, 0x32, 0xb8, 0xc6, 0xdd, 0xcb, 0x15, 0x46, 0xe5, 0xca, 0x96, 0xc4, 0xed, 0x73, 0xe1, 0xc3, 0xdd, 0x6e, 0x0d, 0xdd, 0x66, 0x0e, 0xf9, 0xd1, 0x67, 0xdd, 0x7e, 0x00, 0x6f, 0x39, 0x3c,
        0xba, 0x38, 0x01, 0x7b, 0xdd, 0x77, 0x00, 0xdd, 0x7e, 0x12, 0x86, 0xf2, 0x96, 0xc3, 0xaf, 0xfe, 0x60, 0x38, 0x02, 0x3e, 0x5f, 0x87, 0x08, 0xdd, 0x6e, 0x0f, 0xdd, 0x66, 0x10, 0xf9, 0xd1, 0x26, 0x00, 0xdd, 0x7e, 0x01, 0x47, 0x87, 0x87, 0x6f, 0x39, 0xf9, 0x78, 0x3c, 0xba, 0x38, 0x01, 0x7b, 0xdd, 0x77, 0x01, 0xc1, 0xe1, 0xdd, 0x5e, 0x08, 0xdd, 0x56, 0x09, 0x19, 0xcb, 0x70, 0x28, 0x06, 0xdd, 0x75, 0x08, 0xdd, 0x74, 0x09, 0xeb, 0x08, 0x6f, 0x26, 0x00, 0x31, 0xae, 0xc7, 0x39, 0xf9, 0xe1, 0x19,
        0xdd, 0x5e, 0x06, 0xdd, 0x56, 0x07, 0x19, 0x31, 0x31, 0x31, 0xe3, 0xaf, 0xdd, 0xb6, 0x05, 0x28, 0x3e, 0xdd, 0x35, 0x05, 0x20, 0x39, 0xdd, 0x7e, 0x16, 0xdd, 0x77, 0x05, 0xdd, 0x6e, 0x17, 0xdd, 0x66, 0x18, 0x7c, 0x19, 0xdd, 0x75, 0x06, 0xdd, 0x74, 0x07, 0xdd, 0xcb, 0x15, 0x56, 0x20, 0x1f, 0xdd, 0x5e, 0x19, 0xdd, 0x56, 0x1a, 0xa7, 0x28, 0x01, 0xeb, 0xed, 0x52, 0xfa, 0x28, 0xc4, 0xdd, 0x7e, 0x13, 0xdd, 0x77, 0x12, 0xaf, 0xdd, 0x77, 0x05, 0xdd, 0x77, 0x06, 0xdd, 0x77, 0x07, 0xdd, 0x7e, 0x02,
        0xcb, 0x79, 0x28, 0x13, 0xcb, 0x71, 0x28, 0x07, 0xfe, 0x0f, 0x28, 0x0b, 0x3c, 0x18, 0x05, 0xfe, 0xf1, 0x28, 0x04, 0x3d, 0xdd, 0x77, 0x02, 0x6f, 0x78, 0xe6, 0x0f, 0x85, 0xf2, 0x4b, 0xc4, 0xaf, 0xfe, 0x10, 0x38, 0x02, 0x3e, 0x0f, 0xdd, 0xb6, 0x1c, 0x6f, 0x26, 0x00, 0x11, 0xae, 0xc6, 0x19, 0x7e, 0xcb, 0x41, 0x20, 0x03, 0xdd, 0xb6, 0x14, 0x32, 0xb8, 0xc6, 0xcb, 0x78, 0x79, 0x28, 0x19, 0x17, 0x17, 0xcb, 0x2f, 0xcb, 0x2f, 0xcb, 0x2f, 0xdd, 0x86, 0x04, 0xcb, 0x68, 0x28, 0x03, 0xdd, 0x77, 0x04,
        0x21, 0x85, 0xc5, 0x86, 0x77, 0x18, 0x0e, 0x1f, 0xdd, 0x86, 0x03, 0x32, 0xad, 0xc6, 0xcb, 0x68, 0x28, 0x03, 0xdd, 0x77, 0x03, 0x78, 0x1f, 0xe6, 0x48, 0x21, 0xb5, 0xc6, 0xb6, 0x0f, 0x77, 0xe1, 0xaf, 0xdd, 0xb6, 0x0a, 0xc8, 0xdd, 0x35, 0x0a, 0xc0, 0xdd, 0xae, 0x15, 0xdd, 0x77, 0x15, 0x1f, 0xdd, 0x7e, 0x0b, 0x38, 0x03, 0xdd, 0x7e, 0x0c, 0xdd, 0x77, 0x0a, 0xc9, 0xaf, 0x32, 0x85, 0xc5, 0x32, 0xb5, 0xc6, 0x3d, 0x32, 0xbb, 0xc6, 0x21, 0xa8, 0xc6, 0x35, 0x20, 0x7f, 0x21, 0x6c, 0xc6, 0x35, 0x20,
        0x4c, 0x01, 0x01, 0x01, 0x0a, 0xa7, 0x20, 0x3a, 0x57, 0x32, 0xac, 0xc6, 0x2a, 0x0b, 0xc0, 0x23, 0x7e, 0x3c, 0x20, 0x08, 0xcd, 0x22, 0xc0, 0x21, 0x21, 0x21, 0x7e, 0x3c, 0x22, 0x0b, 0xc0, 0x3d, 0x87, 0x5f, 0xcb, 0x12, 0x21, 0x21, 0x21, 0x19, 0xed, 0x5b, 0xa8, 0xc1, 0xed, 0x73, 0x0f, 0xc5, 0xf9, 0xe1, 0x19, 0x44, 0x4d, 0xe1, 0x19, 0x22, 0x27, 0xc5, 0xe1, 0x19, 0x22, 0x3b, 0xc5, 0x31, 0x31, 0x31, 0xdd, 0x21, 0x5d, 0xc6, 0xcd, 0xe5, 0xc1, 0xed, 0x43, 0xd1, 0xc4, 0x21, 0x89, 0xc6, 0x35, 0x20,
        0x0e, 0xdd, 0x21, 0x7a, 0xc6, 0x01, 0x01, 0x01, 0xcd, 0xe5, 0xc1, 0xed, 0x43, 0x27, 0xc5, 0x21, 0xa6, 0xc6, 0x35, 0x20, 0x0e, 0xdd, 0x21, 0x97, 0xc6, 0x01, 0x01, 0x01, 0xcd, 0xe5, 0xc1, 0xed, 0x43, 0x3b, 0xc5, 0x3e, 0x3e, 0x32, 0xa8, 0xc6, 0xdd, 0x21, 0x51, 0xc6, 0x2a, 0xae, 0xc6, 0xcd, 0x68, 0xc3, 0x22, 0xae, 0xc6, 0x3a, 0xb8, 0xc6, 0x32, 0xb6, 0xc6, 0xdd, 0x21, 0x6e, 0xc6, 0x2a, 0xb0, 0xc6, 0xcd, 0x68, 0xc3, 0x22, 0xb0, 0xc6, 0x3a, 0xb8, 0xc6, 0x32, 0xb7, 0xc6, 0xdd, 0x21, 0x8b, 0xc6,
        0x2a, 0xb2, 0xc6, 0xcd, 0x68, 0xc3, 0x22, 0xb2, 0xc6, 0x2a, 0xac, 0xc6, 0x7c, 0x85, 0x32, 0xb4, 0xc6, 0x3e, 0x3e, 0x5f, 0x87, 0x9f, 0x57, 0x2a, 0xbc, 0xc6, 0x19, 0xed, 0x5b, 0xa9, 0xc6, 0x19, 0x22, 0xb9, 0xc6, 0xaf, 0x21, 0xab, 0xc6, 0xb6, 0x28, 0x0e, 0x35, 0x20, 0x0a, 0x3e, 0x3e, 0x77, 0x21, 0x21, 0x21, 0x19, 0x22, 0xa9, 0xc6, 0xaf, 0x11, 0xbf, 0xff, 0x01, 0xfd, 0xff, 0x21, 0xae, 0xc6, 0xed, 0x79, 0x43, 0xed, 0xa3, 0x42, 0x3c, 0xfe, 0x0d, 0x20, 0xf5, 0xed, 0x79, 0x7e, 0xa7, 0xf8, 0x43,
        0xed, 0x79, 0xc9, 0x64, 0x2a, 0x65, 0x00, 0x01, 0x0c, 0x01, 0x0c, 0x94, 0x35, 0x30, 0x0e, 0x60, 0x20, 0x60, 0x21, 0x01, 0x05, 0x09, 0x0b, 0x0d, 0x0f, 0x13, 0x15, 0x19, 0x25, 0x3d, 0x00, 0x5d, 0x00, 0x31, 0x37, 0x4d, 0x53, 0x5f, 0x71, 0x82, 0x8c, 0x9c, 0x9e, 0xa0, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xae, 0x00, 0x57, 0x1f, 0x23, 0x25, 0x29, 0x2d, 0x2f, 0x33, 0xbf, 0x00, 0x1d, 0x21, 0x23, 0x27, 0x2b, 0x2d, 0x31, 0x55, 0xbd, 0xbf, 0x00, 0x1b, 0x21, 0x25, 0x29, 0x2b, 0x3b, 0x4d, 0x5f, 0xbb, 0xbd,
        0xbf, 0x00, 0x01, 0x00, 0x90, 0x0d, 0xd8, 0x69, 0x70, 0x76, 0x7d, 0x85, 0x8d, 0x95, 0x9d, 0xa8, 0xb1, 0xbb, 0x0c, 0xda, 0x62, 0x68, 0x6d, 0x75, 0x7b, 0x83, 0x8a, 0x92, 0x9c, 0xa4, 0xaf, 0xb8, 0x0e, 0x08, 0x6a, 0x72, 0x78, 0x7e, 0x86, 0x90, 0x96, 0xa0, 0xaa, 0xb4, 0xbe, 0x0f, 0xc0, 0x78, 0x88, 0x80, 0x90, 0x98, 0xa0, 0xb0, 0xa8, 0xe0, 0xb0, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

//Table #0 of Pro Tracker 3.3x - 3.4r
unsigned short PT3NoteTable_PT_33_34r [] =
{
  0x0C21,0x0B73,0x0ACE,0x0A33,0x09A0,0x0916,0x0893,0x0818,0x07A4,0x0736,0x06CE,0x066D,
  0x0610,0x05B9,0x0567,0x0519,0x04D0,0x048B,0x0449,0x040C,0x03D2,0x039B,0x0367,0x0336,
  0x0308,0x02DC,0x02B3,0x028C,0x0268,0x0245,0x0224,0x0206,0x01E9,0x01CD,0x01B3,0x019B,
  0x0184,0x016E,0x0159,0x0146,0x0134,0x0122,0x0112,0x0103,0x00F4,0x00E6,0x00D9,0x00CD,
  0x00C2,0x00B7,0x00AC,0x00A3,0x009A,0x0091,0x0089,0x0081,0x007A,0x0073,0x006C,0x0066,
  0x0061,0x005B,0x0056,0x0051,0x004D,0x0048,0x0044,0x0040,0x003D,0x0039,0x0036,0x0033,
  0x0030,0x002D,0x002B,0x0028,0x0026,0x0024,0x0022,0x0020,0x001E,0x001C,0x001B,0x0019,
  0x0018,0x0016,0x0015,0x0014,0x0013,0x0012,0x0011,0x0010,0x000F,0x000E,0x000D,0x000C
};

//{Table #0 of Pro Tracker 3.4x - 3.5x}
unsigned short PT3NoteTable_PT_34_35 [] =
{
  0x0C22,0x0B73,0x0ACF,0x0A33,0x09A1,0x0917,0x0894,0x0819,0x07A4,0x0737,0x06CF,0x066D,
  0x0611,0x05BA,0x0567,0x051A,0x04D0,0x048B,0x044A,0x040C,0x03D2,0x039B,0x0367,0x0337,
  0x0308,0x02DD,0x02B4,0x028D,0x0268,0x0246,0x0225,0x0206,0x01E9,0x01CE,0x01B4,0x019B,
  0x0184,0x016E,0x015A,0x0146,0x0134,0x0123,0x0112,0x0103,0x00F5,0x00E7,0x00DA,0x00CE,
  0x00C2,0x00B7,0x00AD,0x00A3,0x009A,0x0091,0x0089,0x0082,0x007A,0x0073,0x006D,0x0067,
  0x0061,0x005C,0x0056,0x0052,0x004D,0x0049,0x0045,0x0041,0x003D,0x003A,0x0036,0x0033,
  0x0031,0x002E,0x002B,0x0029,0x0027,0x0024,0x0022,0x0020,0x001F,0x001D,0x001B,0x001A,
  0x0018,0x0017,0x0016,0x0014,0x0013,0x0012,0x0011,0x0010,0x000F,0x000E,0x000D,0x000C
};

//{Table #1 of Pro Tracker 3.3x - 3.5x)}
unsigned short PT3NoteTable_ST [] =
{
  0x0EF8,0x0E10,0x0D60,0x0C80,0x0BD8,0x0B28,0x0A88,0x09F0,0x0960,0x08E0,0x0858,0x07E0,
  0x077C,0x0708,0x06B0,0x0640,0x05EC,0x0594,0x0544,0x04F8,0x04B0,0x0470,0x042C,0x03FD,
  0x03BE,0x0384,0x0358,0x0320,0x02F6,0x02CA,0x02A2,0x027C,0x0258,0x0238,0x0216,0x01F8,
  0x01DF,0x01C2,0x01AC,0x0190,0x017B,0x0165,0x0151,0x013E,0x012C,0x011C,0x010A,0x00FC,
  0x00EF,0x00E1,0x00D6,0x00C8,0x00BD,0x00B2,0x00A8,0x009F,0x0096,0x008E,0x0085,0x007E,
  0x0077,0x0070,0x006B,0x0064,0x005E,0x0059,0x0054,0x004F,0x004B,0x0047,0x0042,0x003F,
  0x003B,0x0038,0x0035,0x0032,0x002F,0x002C,0x002A,0x0027,0x0025,0x0023,0x0021,0x001F,
  0x001D,0x001C,0x001A,0x0019,0x0017,0x0016,0x0015,0x0013,0x0012,0x0011,0x0010,0x000F
};

//{Table #2 of Pro Tracker 3.4r}
unsigned short PT3NoteTable_ASM_34r [] =
{
  0x0D3E,0x0C80,0x0BCC,0x0B22,0x0A82,0x09EC,0x095C,0x08D6,0x0858,0x07E0,0x076E,0x0704,
  0x069F,0x0640,0x05E6,0x0591,0x0541,0x04F6,0x04AE,0x046B,0x042C,0x03F0,0x03B7,0x0382,
  0x034F,0x0320,0x02F3,0x02C8,0x02A1,0x027B,0x0257,0x0236,0x0216,0x01F8,0x01DC,0x01C1,
  0x01A8,0x0190,0x0179,0x0164,0x0150,0x013D,0x012C,0x011B,0x010B,0x00FC,0x00EE,0x00E0,
  0x00D4,0x00C8,0x00BD,0x00B2,0x00A8,0x009F,0x0096,0x008D,0x0085,0x007E,0x0077,0x0070,
  0x006A,0x0064,0x005E,0x0059,0x0054,0x0050,0x004B,0x0047,0x0043,0x003F,0x003C,0x0038,
  0x0035,0x0032,0x002F,0x002D,0x002A,0x0028,0x0026,0x0024,0x0022,0x0020,0x001E,0x001D,
  0x001B,0x001A,0x0019,0x0018,0x0015,0x0014,0x0013,0x0012,0x0011,0x0010,0x000F,0x000E
};

//{Table #2 of Pro Tracker 3.4x - 3.5x}
unsigned short PT3NoteTable_ASM_34_35 [] =
{
  0x0D10,0x0C55,0x0BA4,0x0AFC,0x0A5F,0x09CA,0x093D,0x08B8,0x083B,0x07C5,0x0755,0x06EC,
  0x0688,0x062A,0x05D2,0x057E,0x052F,0x04E5,0x049E,0x045C,0x041D,0x03E2,0x03AB,0x0376,
  0x0344,0x0315,0x02E9,0x02BF,0x0298,0x0272,0x024F,0x022E,0x020F,0x01F1,0x01D5,0x01BB,
  0x01A2,0x018B,0x0174,0x0160,0x014C,0x0139,0x0128,0x0117,0x0107,0x00F9,0x00EB,0x00DD,
  0x00D1,0x00C5,0x00BA,0x00B0,0x00A6,0x009D,0x0094,0x008C,0x0084,0x007C,0x0075,0x006F,
  0x0069,0x0063,0x005D,0x0058,0x0053,0x004E,0x004A,0x0046,0x0042,0x003E,0x003B,0x0037,
  0x0034,0x0031,0x002F,0x002C,0x0029,0x0027,0x0025,0x0023,0x0021,0x001F,0x001D,0x001C,
  0x001A,0x0019,0x0017,0x0016,0x0015,0x0014,0x0012,0x0011,0x0010,0x000F,0x000E,0x000D
};

//{Table #3 of Pro Tracker 3.4r}
unsigned short PT3NoteTable_REAL_34r [] =
{
  0x0CDA,0x0C22,0x0B73,0x0ACF,0x0A33,0x09A1,0x0917,0x0894,0x0819,0x07A4,0x0737,0x06CF,
  0x066D,0x0611,0x05BA,0x0567,0x051A,0x04D0,0x048B,0x044A,0x040C,0x03D2,0x039B,0x0367,
  0x0337,0x0308,0x02DD,0x02B4,0x028D,0x0268,0x0246,0x0225,0x0206,0x01E9,0x01CE,0x01B4,
  0x019B,0x0184,0x016E,0x015A,0x0146,0x0134,0x0123,0x0113,0x0103,0x00F5,0x00E7,0x00DA,
  0x00CE,0x00C2,0x00B7,0x00AD,0x00A3,0x009A,0x0091,0x0089,0x0082,0x007A,0x0073,0x006D,
  0x0067,0x0061,0x005C,0x0056,0x0052,0x004D,0x0049,0x0045,0x0041,0x003D,0x003A,0x0036,
  0x0033,0x0031,0x002E,0x002B,0x0029,0x0027,0x0024,0x0022,0x0020,0x001F,0x001D,0x001B,
  0x001A,0x0018,0x0017,0x0016,0x0014,0x0013,0x0012,0x0011,0x0010,0x000F,0x000E,0x000D
};

//{Table #3 of Pro Tracker 3.4x - 3.5x}
unsigned short PT3NoteTable_REAL_34_35 [] =
{
  0x0CDA,0x0C22,0x0B73,0x0ACF,0x0A33,0x09A1,0x0917,0x0894,0x0819,0x07A4,0x0737,0x06CF,
  0x066D,0x0611,0x05BA,0x0567,0x051A,0x04D0,0x048B,0x044A,0x040C,0x03D2,0x039B,0x0367,
  0x0337,0x0308,0x02DD,0x02B4,0x028D,0x0268,0x0246,0x0225,0x0206,0x01E9,0x01CE,0x01B4,
  0x019B,0x0184,0x016E,0x015A,0x0146,0x0134,0x0123,0x0112,0x0103,0x00F5,0x00E7,0x00DA,
  0x00CE,0x00C2,0x00B7,0x00AD,0x00A3,0x009A,0x0091,0x0089,0x0082,0x007A,0x0073,0x006D,
  0x0067,0x0061,0x005C,0x0056,0x0052,0x004D,0x0049,0x0045,0x0041,0x003D,0x003A,0x0036,
  0x0033,0x0031,0x002E,0x002B,0x0029,0x0027,0x0024,0x0022,0x0020,0x001F,0x001D,0x001B,
  0x001A,0x0018,0x0017,0x0016,0x0014,0x0013,0x0012,0x0011,0x0010,0x000F,0x000E,0x000D
};

//{Volume table of Pro Tracker 3.3x - 3.4x}
unsigned short PT3VolumeTable_33_34 [16] [16] =
{
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x02},
  {0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03},
  {0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x02,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04},
  {0x00,0x00,0x00,0x01,0x01,0x01,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,0x05,0x05},
  {0x00,0x00,0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x06},
  {0x00,0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x06,0x07,0x07},
  {0x00,0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x05,0x05,0x06,0x06,0x07,0x07,0x08},
  {0x00,0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x05,0x06,0x06,0x07,0x08,0x08,0x09},
  {0x00,0x00,0x01,0x02,0x02,0x03,0x04,0x04,0x05,0x06,0x06,0x07,0x08,0x08,0x09,0x0A},
  {0x00,0x00,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x06,0x07,0x08,0x09,0x09,0x0A,0x0B},
  {0x00,0x00,0x01,0x02,0x03,0x04,0x04,0x05,0x06,0x07,0x08,0x08,0x09,0x0A,0x0B,0x0C},
  {0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D},
  {0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E},
  {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F}
};


struct PT3_File
{
    signed char PT3_MusicName[0x63];
    signed char PT3_TonTableId;
    signed char PT3_Delay;
    signed char PT3_NumberOfPositions;
    signed char PT3_LoopPosition;
    unsigned char PT3_PatternsPointer0, PT3_PatternsPointer1;
    unsigned char PT3_SamplesPointers0[64];
    unsigned char PT3_OrnamentsPointers0[32];
    unsigned char PT3_PositionList[65335];
};

#define PT3_PatternsPointer (header->PT3_PatternsPointer0 | (header->PT3_PatternsPointer1 << 8))
#define PT3_SamplesPointers(x) (header->PT3_SamplesPointers0 [x * 2] | (header->PT3_SamplesPointers0 [x * 2 + 1] << 8))
#define PT3_OrnamentsPointers(x) (header->PT3_OrnamentsPointers0 [x * 2] | (header->PT3_OrnamentsPointers0 [x * 2 + 1] << 8))

struct PT3_Channel_Parameters
{
    unsigned short Address_In_Pattern, OrnamentPointer, SamplePointer, Ton;
    unsigned char Loop_Ornament_Position, Ornament_Length, Position_In_Ornament, Loop_Sample_Position, Sample_Length, Position_In_Sample, Volume, Number_Of_Notes_To_Skip, Note, Slide_To_Note, Amplitude;
    bool Envelope_Enabled, Enabled, SimpleGliss;
    short Current_Amplitude_Sliding, Current_Noise_Sliding, Current_Envelope_Sliding, Ton_Slide_Count, Current_OnOff, OnOff_Delay, OffOn_Delay, Ton_Slide_Delay, Current_Ton_Sliding, Ton_Accumulator, Ton_Slide_Step, Ton_Delta;
    signed char Note_Skip_Counter;
};

struct PT3_Parameters
{
    unsigned char Env_Base_lo;
    unsigned char Env_Base_hi;
    short Cur_Env_Slide, Env_Slide_Add;
    signed char Cur_Env_Delay, Env_Delay;
    unsigned char Noise_Base, Delay, AddToNoise, DelayCounter, CurrentPosition;
    int Version;
};

struct PT3_SongInfo
{
    PT3_Parameters PT3;
    PT3_Channel_Parameters PT3_A, PT3_B, PT3_C;
};

#define PT3_A ((PT3_SongInfo *)info.data)->PT3_A
#define PT3_B ((PT3_SongInfo *)info.data)->PT3_B
#define PT3_C ((PT3_SongInfo *)info.data)->PT3_C
#define PT3 ((PT3_SongInfo *)info.data)->PT3

void PT3_Init(AYSongInfo &info)
{
    int i;
    unsigned char b;
    unsigned char *module = info.module;
    PT3_File *header = (PT3_File *) module;
    AbstractAudio *player = info.player;
    if(info.data)
    {
        delete (PT3_SongInfo *) info.data;
        info.data = 0;
    }
    info.data = (void *) new ASC_SongInfo;
    if(!info.data)
        return;
    memset(&PT3_A, 0, sizeof(PT3_Channel_Parameters));
    memset(&PT3_B, 0, sizeof(PT3_Channel_Parameters));
    memset(&PT3_C, 0, sizeof(PT3_Channel_Parameters));
    PT3.DelayCounter = 1;
    PT3.Delay = header->PT3_Delay;
    i = header->PT3_PositionList[0];
    b = 0x20;
    if(b != 0x20)
    {
        i = b * 3 - 3 - i;
    }
    PT3_A.Address_In_Pattern = ay_sys_getword(&module[PT3_PatternsPointer + i * 2]);
    PT3_A.Address_In_Pattern = ay_sys_getword(&module[PT3_PatternsPointer + i * 2 + 2]);
    PT3_A.Address_In_Pattern = ay_sys_getword(&module[PT3_PatternsPointer + i * 2 + 4]);

    PT3_A.OrnamentPointer = PT3_OrnamentsPointers(0);
    PT3_A.Loop_Ornament_Position = module[PT3_A.OrnamentPointer];
    PT3_A.OrnamentPointer++;
    PT3_A.Ornament_Length = module[PT3_A.OrnamentPointer];
    PT3_A.OrnamentPointer++;
    PT3_A.SamplePointer = PT3_SamplesPointers(1);
    PT3_A.Loop_Sample_Position = module[PT3_A.SamplePointer];
    PT3_A.SamplePointer++;
    PT3_A.Sample_Length = module[PT3_A.SamplePointer];
    PT3_A.SamplePointer++;
    PT3_A.Volume = 15;
    PT3_A.Note_Skip_Counter = 1;

    PT3_B.OrnamentPointer = PT3_A.OrnamentPointer;
    PT3_B.Loop_Ornament_Position = PT3_A.Loop_Ornament_Position;
    PT3_B.Ornament_Length = PT3_A.Ornament_Length;
    PT3_B.SamplePointer = PT3_A.SamplePointer;
    PT3_B.Loop_Sample_Position = PT3_A.Loop_Sample_Position;
    PT3_B.Sample_Length = PT3_A.Sample_Length;
    PT3_B.Volume = 15;
    PT3_B.Note_Skip_Counter = 1;

    PT3_C.OrnamentPointer = PT3_A.OrnamentPointer;
    PT3_C.Loop_Ornament_Position = PT3_A.Loop_Ornament_Position;
    PT3_C.Ornament_Length = PT3_A.Ornament_Length;
    PT3_C.SamplePointer = PT3_A.SamplePointer;
    PT3_C.Loop_Sample_Position = PT3_A.Loop_Sample_Position;
    PT3_C.Sample_Length = PT3_A.Sample_Length;
    PT3_C.Volume = 15;
    PT3_C.Note_Skip_Counter = 1;

    PT3.Version = 6;
    if(header->PT3_MusicName [13] >= '0' && header->PT3_MusicName [13] <= '9')
    {
        PT3.Version = header->PT3_MusicName [13] - 0x30;
    }

    player->ResetAy();
}

unsigned short PT3_GetNoteFreq(AYSongInfo &info, unsigned short j)
{
    unsigned char *module = info.module;
    PT3_File *header = (PT3_File *) module;
    switch(header->PT3_TonTableId)
    {
        case 0:
            if(PT3.Version <= 3)
                return PT3NoteTable_PT_33_34r [j];
            else
                return PT3NoteTable_PT_34_35 [j];
        case 1:
            return PT3NoteTable_ST [j];
        case 2:
            if(PT3.Version <= 3)
                return PT3NoteTable_ASM_34r [j];
            else
                return PT3NoteTable_ASM_34_35 [j];
        default:
            if(PT3.Version <= 3)
                return PT3NoteTable_REAL_34r [j];
            else
                return PT3NoteTable_REAL_34_35 [j];
    }
}

PT3_PatternIntterpreter(AYSongInfo &info, PT3_Channel_Parameters &chan)
{
    unsigned char *module = info.module;
    PT3_File *header = (PT3_File *) module;
    AbstractAudio *player = info.player;
}

void PT3_Play(AYSongInfo &info)
{
    unsigned char *module = info.module;
    PT3_File *header = (PT3_File *) module;
    AbstractAudio *player = info.player;

}

void PT3_GetInfo(AYSongInfo &info)
{
    unsigned char *module = info.file_data;
    unsigned short a1, a2, a3, a11, a22, a33;
    unsigned long j1, j2, j3;
    long c1, c2, c3, c4, c5, c8;
    long i, j, tm = 0;
    unsigned char b;
    unsigned char ptDelay = module[100];
    unsigned char ptNumPos = module[101];
    unsigned short ptLoopPos = module[102];
    unsigned short ptPatPt = ay_sys_getword(&module[103]);
    const unsigned char *ptPosList = (unsigned char *) &module[201];

    b = ptDelay;
    a11 = a22 = a33 = 1;
    for(i = 0; i < ptNumPos; i++)
    {
        if(i == ptLoopPos)
        {
            info.Loop = tm;
        }
        j1 = ay_sys_getword(&module[ptPatPt + ptPosList[i] * 2]);
        j2 = ay_sys_getword(&module[ptPatPt + ptPosList[i] * 2 + 2]);
        j3 = ay_sys_getword(&module[ptPatPt + ptPosList[i] * 2 + 4]);
        a1 = a2 = a3 = 1;
        do
        {
            a1--;
            if(a1 == 0)
            {
                if(module[j1] == 0)
                    break;
                j = c1 = c2 = c3 = c4 = c5 = c8 = 0;
                do
                {
                    unsigned char val = module[j1];
                    if(val == 0xd0 || val == 0xc0 || (val >= 0x50 && val <= 0xaf))
                    {
                        a1 = a11;
                        j1++;
                        break;
                    }
                    else if(val == 0x10 || val >= 0xf0)
                    {
                        j1++;
                    }
                    else if(val >= 0xb2 && val <= 0xbf)
                    {
                        j1 += 2;
                    }
                    else if(val == 0xb1)
                    {
                        j1++;
                        a11 = module[j1];
                    }
                    else if(val >= 0x11 && val <= 0x1f)
                    {
                        j1 += 3;
                    }
                    else
                    {
                        switch(val)
                        {
                            case 1:
                                j++;
                                c1 = j;
                                break;
                            case 2:
                                j++;
                                c2 = j;
                                break;
                            case 3:
                                j++;
                                c3 = j;
                                break;
                            case 4:
                                j++;
                                c4 = j;
                                break;
                            case 5:
                                j++;
                                c5 = j;
                                break;
                            case 8:
                                j++;
                                c8 = j;
                                break;
                            case 9:
                                j++;
                                break;
                            default:
                                break;
                        }
                    }
                    j1++;
                } while(true);

                while(j > 0)
                {
                    if(j == c1 || j == c8)
                    {
                        j1 += 3;
                    }
                    else if(j == c2)
                    {
                        j1 += 5;
                    }
                    else if(j == c3 || j == c4)
                    {
                        j1++;
                    }
                    else if(j == c5)
                    {
                        j1 += 2;
                    }
                    else
                    {
                        b = module[j1];
                        j1++;
                    }
                    j--;
                }
                a2--;
                if(a2 == 0)
                {
                    j = c1 = c2 = c3 = c4 = c5 = c8 = 0;
                    do
                    {
                        unsigned char val = module[j2];
                        if(val == 0xd0 || val == 0xc0 || (val >= 0x50 && val <= 0xaf))
                        {
                            a2 = a22;
                            j2++;
                            break;
                        }
                        else if(val == 0x10 || val >= 0xf0)
                        {
                            j2++;
                        }
                        else if(val >= 0xb2 && val <= 0xbf)
                        {
                            j2 += 2;
                        }
                        else if(val == 0xb1)
                        {
                            j2++;
                            a22 = module[j2];
                        }
                        else if(val >= 0x11 && val <= 0x1f)
                        {
                            j2 += 3;
                        }
                        else
                        {
                            switch(val)
                            {
                                case 1:
                                    j++;
                                    c1 = j;
                                    break;
                                case 2:
                                    j++;
                                    c2 = j;
                                    break;
                                case 3:
                                    j++;
                                    c3 = j;
                                    break;
                                case 4:
                                    j++;
                                    c4 = j;
                                    break;
                                case 5:
                                    j++;
                                    c5 = j;
                                    break;
                                case 8:
                                    j++;
                                    c8 = j;
                                    break;
                                case 9:
                                    j++;
                                    break;
                                default:
                                    break;
                            }
                        }
                        j2++;
                    } while(true);
                    while(j > 0)
                    {
                        if(j == c1 || j == c8)
                        {
                            j2 += 3;
                        }
                        else if(j == c2)
                        {
                            j2 += 5;
                        }
                        else if(j == c3 || j == c4)
                        {
                            j2++;
                        }
                        else if(j == c5)
                        {
                            j2 += 2;
                        }
                        else
                        {
                            b = module[j2];
                            j2++;
                        }
                        j--;
                    }
                }
                a3--;
                if(a3 == 0)
                {
                    j = c1 = c2 = c3 = c4 = c5 = c8 = 0;
                    do
                    {
                        unsigned char val = module[j3];
                        if(val == 0xd0 || val == 0xc0 || (val >= 0x50 && val <= 0xaf))
                        {
                            a3 = a33;
                            j3++;
                            break;
                        }
                        else if(val == 0x10 || val >= 0xf0)
                        {
                            j3++;
                        }
                        else if(val >= 0xb2 && val <= 0xbf)
                        {
                            j3 += 2;
                        }
                        else if(val == 0xb1)
                        {
                            j3++;
                            a33 = module[j3];
                        }
                        else if(val >= 0x11 && val <= 0x1f)
                        {
                            j3 += 3;
                        }
                        else
                        {
                            switch(val)
                            {
                                case 1:
                                    j++;
                                    c1 = j;
                                    break;
                                case 2:
                                    j++;
                                    c2 = j;
                                    break;
                                case 3:
                                    j++;
                                    c3 = j;
                                    break;
                                case 4:
                                    j++;
                                    c4 = j;
                                    break;
                                case 5:
                                    j++;
                                    c5 = j;
                                    break;
                                case 8:
                                    j++;
                                    c8 = j;
                                    break;
                                case 9:
                                    j++;
                                    break;
                                default:
                                    break;
                            }
                        }
                        j3++;
                    } while(true);
                    while(j > 0)
                    {
                        if(j == c1 || j == c8)
                        {
                            j3 += 3;
                        }
                        else if(j == c2)
                        {
                            j3 += 5;
                        }
                        else if(j == c3 || j == c4)
                        {
                            j3++;
                        }
                        else if(j == c5)
                        {
                            j3 += 2;
                        }
                        else
                        {
                            b = module[j3];
                            j3++;
                        }
                        j--;
                    }
                }
            }
            tm += b;
        } while(true);

    }
    info.Length = tm;
}

void PT3_Cleanup(AYSongInfo &info)
{
    if(info.data)
    {
        delete (PT3_SongInfo *) info.data;
        info.data = 0;
    }
}
