# 1 "../../libayfly/z80ex/z80ex.cpp"
 








# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/stdlib.h" 1
 




 




 






extern "C" {



# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/_ansi.h" 1
 




 




 







 











 










 




















# 22 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/stdlib.h" 2




# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/stddef.h" 1
 




 







 





typedef unsigned short int wchar_t;



typedef long		ptrdiff_t;
typedef unsigned int	size_t;

 





# 26 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/stdlib.h" 2


# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/sys/reent.h" 1
 




 




 






extern "C" {





# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/sys/stdio_t.h" 1
 







extern "C" {




 




struct __sbuf {
	unsigned char *	_base;
	int				_size;
};

 






typedef long _fpos_t;		 
							 

 

























struct __sFILE {
  unsigned char *_p;			 
  int			 _r;			 
  int			 _w;			 
  short			 _flags;		 
  short			 _file;			 
  struct __sbuf	 _bf;			 
  int			 _lbfsize;		 

   
  void *		 _cookie;		 

  int		(*_read) (void * _cookie, char *_buf, int _n);
  int		(*_write)(void * _cookie, const char *_buf, int _n);
  _fpos_t	(*_seek) (void * _cookie, _fpos_t _offset, int _whence);
  int		(*_close)(void * _cookie);

   
  struct __sbuf		_ub;		 
  unsigned char *	_up;		 
  int				_ur;		 

   
  unsigned char		_ubuf[3];	 
  unsigned char		_nbuf[1];	 

   
  struct __sbuf		_lb;		 

   
  int				_blksize;	 
  int				_offset;	 

  struct _reent *	_data;		 
};



}


# 24 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/sys/reent.h" 2

# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/time.h" 1
 




 




 







extern "C" {








# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/machine/types.h" 1
 




 
















# 28 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/time.h" 2






typedef signed int  clock_t;




typedef signed int  time_t;



struct tm
{
  int	tm_sec;		 
  int	tm_min;		 
  int	tm_hour;	 
  int	tm_mday;	 
  int	tm_mon;		 
  int	tm_year;	 
  int	tm_wday;	 
  int	tm_yday;	 
  int	tm_isdst;	 
};

  clock_t	clock		(void);
  double		difftime	(time_t _time2, time_t _time1);
  time_t		mktime		(struct tm *_timeptr);
  time_t		time		(time_t *_timer);
  size_t		strftime	(char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t);

  char*		asctime		(const struct tm *_tblock);
  char*		ctime		(const time_t *_time);
  struct tm*	gmtime		(const time_t *_timer);
  struct tm*	localtime	(const time_t *_timer);


 




  char*		asctime_r	(const struct tm *, char *);
  char*		ctime_r		(const time_t *, char *);
  struct tm*	gmtime_r	(const time_t *, struct tm *);
  struct tm*	localtime_r	(const time_t *, struct tm *);


}


# 25 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/sys/reent.h" 2


struct _glue 
{
  struct _glue *_next;
  int _niobs;
  struct __sFILE *_iobs;
};

 




struct _atexit {
	struct	_atexit *_next;			 
	int	_ind;				 
	void	(*_fns[32 ])(void);	 
};


 










struct _reent
{
   
  int _errno;
  struct __sFILE _sf[3];		 

  char *_scanpoint;		 
  char _asctime[(26+8) ];	 
  struct tm _struct_tm;		 
  long _next[2];		 
  int  _inc;			 
  char _tmpnam[37];		 
  wchar_t _wtmpnam[37];		 
  void *_netdb;			 
 
  int _current_category;	 
  const char *_current_locale;

  int __sdidinit;		 

  void (*__cleanup)(struct _reent *);

   
  struct _atexit *_atexit;	 
  struct _atexit _atexit0;	 

   
  void (**(_sig_func))();

  struct _glue __sglue;		 

  char **environ;
  int environ_slots;

  char* _pNarrowEnvBuffer;
  int _NEBSize;

  void *_system;		 
};

 



  void		_reclaim_reent	(struct _reent*);
  void		_REENT_INIT	(struct _reent*);
  struct _reent*	ImpurePtr	(void);
  void		_init_reent	(struct _reent*,void*);

 


  void CloseSTDLIB();





}



# 28 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/stdlib.h" 2


typedef struct 
{
  int quot;  
  int rem;  
} div_t;














 



  int	_epoc32_atexit	(void (*_func)(void));




  void	abort	(void);


  int	abs		(int);
  double	atof	(const char *_nptr);
  int	atoi	(const char *_nptr);


  void*	bsearch	(const void * _key,
		       const void * _base,
		       size_t _nmemb,
		       size_t _size,
		       int (*_compar)(const void *, const void *));
  void*	calloc	(size_t _nmemb, size_t _size);
  div_t	div	(int _numer, int _denom);
  void	exit	(int _status)  ;
  void	free	(void *);
  char*  getenv	(const char *_string);
  wchar_t*  wgetenv	(const wchar_t *_string);
  void*	malloc	(size_t _size);

  int	mbtowc	 (wchar_t *pwc, const char *s, size_t n);
  int	wctomb	 (char *s, wchar_t wc);
  int	mbstowcs (wchar_t *pwc, const char *s, size_t n);
  int	wcstombs (char *s, const wchar_t *pwc, size_t n);
  int    mblen    (const char * string, size_t size);

  void	qsort	(void * _base, size_t _nmemb, size_t _size, int(*_compar)(const void *, const void *));
  int	rand	(void);
  void*	realloc	(void * _r, size_t _size);
  void	srand	(unsigned _seed);
  double	strtod	(const char *_n, char **_end_PTR);
  long	strtol	(const char *_n, char **_end_PTR, int _base);
  unsigned long strtoul		(const char *_n_PTR, char **_end_PTR, int _base);
  int	system	(const char *_string);
  int	wsystem	(const wchar_t *_string);

 


  int	setenv	(const char *_string, const char *_value, int _overwrite);
  void	unsetenv (const char *_name);
  int	wsetenv	(const wchar_t *_string, const wchar_t *_value, int _overwrite);
  void	wunsetenv (const wchar_t *_name);

# 119 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/stdlib.h"


 


}


# 10 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/string.h" 1
 




 




 







extern "C" {















  void*	memchr		(const void*, int, size_t);
  int 	memcmp		(const void*, const void*, size_t);
  void*	memcpy		(void* dst, const void* src, size_t);
  void*	memmove		(void*, const void*, size_t);
  void*	memset		(void*, int, size_t);
  char*	strcat		(char *, const char *);
  wchar_t* wcscat	(wchar_t *, const wchar_t *);
  char*	strchr		(const char *, int);
  int	strcmp		(const char *, const char *);
  int	wcscmp		(const wchar_t *, const wchar_t *);
  int	strcoll		(const char *, const char *);
  char*	strcpy		(char *, const char *);
  wchar_t* wcscpy	(wchar_t *, const wchar_t *);
  size_t	strcspn		(const char *, const char *);
  char*	strerror	(int);
  size_t	strlen		(const char *);
  size_t	wcslen		(const wchar_t *);
  char*	strncat		(char *, const char *, size_t);
  int	strncmp		(const char *, const char *, size_t);
  char*	strncpy		(char *, const char *, size_t);
  char*	strpbrk		(const char *, const char *);
  char*	strrchr		(const char *, int);
  size_t	strspn		(const char *, const char *);
  char*	strstr		(const char *, const char *);
  size_t	strxfrm		(char *, const char *, size_t);


  char*	strtok		(char *, const char *);


  char*	strtok_r	(char *, const char *, char **);

 


  int	strcasecmp	(const char *, const char *);
  char*	strdup		(const char *);
  wchar_t*	wcsdup		(const wchar_t *);
  int	strncasecmp	(const char *, const char *, size_t);
  char 	*rindex		(const char *, int);
  char 	*index		(const char *, int);

# 85 "/home/andrew/symbian-sdks/s60_26_cw/epoc32/include/libc/string.h"



}


# 11 "../../libayfly/z80ex/z80ex.cpp" 2




# 1 "../../libayfly/z80ex/typedefs.h" 1
 











struct _z80_cpu_context;
typedef struct _z80_cpu_context Z80EX_CONTEXT;


# 1 "../../libayfly/z80ex/include/z80ex.h" 1
 











# 1 "../../libayfly/z80ex/include/z80ex_common.h" 1
 











 
 









# 44 "../../libayfly/z80ex/include/z80ex_common.h"

typedef unsigned char Z80EX_BYTE;
typedef signed char Z80EX_SIGNED_BYTE;
typedef unsigned short Z80EX_WORD;
typedef unsigned int Z80EX_DWORD;



# 13 "../../libayfly/z80ex/include/z80ex.h" 2


typedef
enum {regAF,regBC,regDE,regHL,regAF_,regBC_,regDE_,regHL_,regIX,regIY,regPC,regSP,regI,regR,regR7,regIM ,regIFF1,regIFF2}
Z80_REG_T;








 

 
typedef void (*z80ex_tstate_cb)(Z80EX_CONTEXT *cpu, void *user_data);

 

typedef Z80EX_BYTE (*z80ex_mread_cb)(Z80EX_CONTEXT *cpu, Z80EX_WORD addr, int m1_state, void *user_data);

 
typedef void (*z80ex_mwrite_cb)(Z80EX_CONTEXT *cpu, Z80EX_WORD addr, Z80EX_BYTE value, void *user_data);

 
typedef Z80EX_BYTE (*z80ex_pread_cb)(Z80EX_CONTEXT *cpu, Z80EX_WORD port, void *user_data);

 
typedef void (*z80ex_pwrite_cb)(Z80EX_CONTEXT *cpu, Z80EX_WORD port, Z80EX_BYTE value, void *user_data);

 
typedef Z80EX_BYTE (*z80ex_intread_cb)(Z80EX_CONTEXT *cpu, void *user_data);


# 105 "../../libayfly/z80ex/include/z80ex.h"



# 17 "../../libayfly/z80ex/typedefs.h" 2


 
typedef union {



  struct { Z80EX_BYTE l,h; } b;

  Z80EX_WORD w;
} regpair;

typedef
enum {IM0=0,IM1=1,IM2=2} IM_MODE;

struct _z80_cpu_context {
	regpair af,bc,de,hl;
	regpair af_,bc_,de_,hl_;
	regpair ix,iy;
	Z80EX_BYTE i;
	Z80EX_WORD r;
	Z80EX_BYTE r7;  
	regpair sp,pc;
	Z80EX_BYTE iff1, iff2;  
	regpair memptr;  
	IM_MODE im;
	int halted;

	unsigned long tstate;  
	unsigned char op_tstate;  

	int noint_once;  
	int doing_opcode;  
	char int_vector_req;  
	Z80EX_BYTE prefix;

	 
	z80ex_tstate_cb tstate_cb;
	void *tstate_cb_user_data;
	z80ex_pread_cb pread_cb;
	void *pread_cb_user_data;
	z80ex_pwrite_cb pwrite_cb;
	void *pwrite_cb_user_data;
	z80ex_mread_cb mread_cb;
	void *mread_cb_user_data;
	z80ex_mwrite_cb	mwrite_cb;
	void *mwrite_cb_user_data;
	z80ex_intread_cb intread_cb;
	void *intread_cb_user_data;

	 
	regpair tmpword;
	regpair tmpaddr;
	Z80EX_BYTE tmpbyte;
	Z80EX_SIGNED_BYTE tmpbyte_s;
};

typedef void (*z80ex_opcode_fn) (Z80EX_CONTEXT *cpu);


# 15 "../../libayfly/z80ex/z80ex.cpp" 2


# 1 "../../libayfly/z80ex/macros.h" 1
 











 





























































 











 


 


 






 






 






 






 

 
	 

 


 




 








# 153 "../../libayfly/z80ex/macros.h"


# 168 "../../libayfly/z80ex/macros.h"


# 180 "../../libayfly/z80ex/macros.h"


# 194 "../../libayfly/z80ex/macros.h"






 













# 225 "../../libayfly/z80ex/macros.h"






























 







 











 






 



































 














 






















 

















































# 416 "../../libayfly/z80ex/macros.h"


# 431 "../../libayfly/z80ex/macros.h"






























# 471 "../../libayfly/z80ex/macros.h"








# 487 "../../libayfly/z80ex/macros.h"


# 497 "../../libayfly/z80ex/macros.h"





































 







# 552 "../../libayfly/z80ex/macros.h"


# 569 "../../libayfly/z80ex/macros.h"

 








 









# 598 "../../libayfly/z80ex/macros.h"


# 610 "../../libayfly/z80ex/macros.h"


# 622 "../../libayfly/z80ex/macros.h"


# 639 "../../libayfly/z80ex/macros.h"


# 650 "../../libayfly/z80ex/macros.h"


# 662 "../../libayfly/z80ex/macros.h"


# 682 "../../libayfly/z80ex/macros.h"


# 708 "../../libayfly/z80ex/macros.h"


# 727 "../../libayfly/z80ex/macros.h"


# 747 "../../libayfly/z80ex/macros.h"


# 767 "../../libayfly/z80ex/macros.h"


# 793 "../../libayfly/z80ex/macros.h"


# 812 "../../libayfly/z80ex/macros.h"


# 832 "../../libayfly/z80ex/macros.h"
















# 860 "../../libayfly/z80ex/macros.h"























 




















































































# 17 "../../libayfly/z80ex/z80ex.cpp" 2







 

 





static const Z80EX_BYTE halfcarry_add_table[] =
  { 0, 0x10 , 0x10 , 0x10 , 0, 0, 0, 0x10  };
static const Z80EX_BYTE halfcarry_sub_table[] =
  { 0, 0, 0x10 , 0, 0x10 , 0, 0x10 , 0x10  };

 

static const Z80EX_BYTE overflow_add_table[] = { 0, 0, 0, 0x04  , 0x04  , 0, 0, 0 };
static const Z80EX_BYTE overflow_sub_table[] = { 0, 0x04  , 0, 0, 0, 0, 0x04  , 0 };

 
static Z80EX_BYTE sz53_table[0x100];  
static Z80EX_BYTE parity_table[0x100];  
static Z80EX_BYTE sz53p_table[0x100];  

# 1 "../../libayfly/z80ex/daa_table.cpp" 1
 
static const Z80EX_BYTE daatab[0x1000] =
{
        0x44,0x00,0x00,0x01,0x00,0x02,0x04,0x03
       ,0x00,0x04,0x04,0x05,0x04,0x06,0x00,0x07
       ,0x08,0x08,0x0c,0x09,0x10,0x10,0x14,0x11
       ,0x14,0x12,0x10,0x13,0x14,0x14,0x10,0x15
       ,0x00,0x10,0x04,0x11,0x04,0x12,0x00,0x13
       ,0x04,0x14,0x00,0x15,0x00,0x16,0x04,0x17
       ,0x0c,0x18,0x08,0x19,0x30,0x20,0x34,0x21
       ,0x34,0x22,0x30,0x23,0x34,0x24,0x30,0x25
       ,0x20,0x20,0x24,0x21,0x24,0x22,0x20,0x23
       ,0x24,0x24,0x20,0x25,0x20,0x26,0x24,0x27
       ,0x2c,0x28,0x28,0x29,0x34,0x30,0x30,0x31
       ,0x30,0x32,0x34,0x33,0x30,0x34,0x34,0x35
       ,0x24,0x30,0x20,0x31,0x20,0x32,0x24,0x33
       ,0x20,0x34,0x24,0x35,0x24,0x36,0x20,0x37
       ,0x28,0x38,0x2c,0x39,0x10,0x40,0x14,0x41
       ,0x14,0x42,0x10,0x43,0x14,0x44,0x10,0x45
       ,0x00,0x40,0x04,0x41,0x04,0x42,0x00,0x43
       ,0x04,0x44,0x00,0x45,0x00,0x46,0x04,0x47
       ,0x0c,0x48,0x08,0x49,0x14,0x50,0x10,0x51
       ,0x10,0x52,0x14,0x53,0x10,0x54,0x14,0x55
       ,0x04,0x50,0x00,0x51,0x00,0x52,0x04,0x53
       ,0x00,0x54,0x04,0x55,0x04,0x56,0x00,0x57
       ,0x08,0x58,0x0c,0x59,0x34,0x60,0x30,0x61
       ,0x30,0x62,0x34,0x63,0x30,0x64,0x34,0x65
       ,0x24,0x60,0x20,0x61,0x20,0x62,0x24,0x63
       ,0x20,0x64,0x24,0x65,0x24,0x66,0x20,0x67
       ,0x28,0x68,0x2c,0x69,0x30,0x70,0x34,0x71
       ,0x34,0x72,0x30,0x73,0x34,0x74,0x30,0x75
       ,0x20,0x70,0x24,0x71,0x24,0x72,0x20,0x73
       ,0x24,0x74,0x20,0x75,0x20,0x76,0x24,0x77
       ,0x2c,0x78,0x28,0x79,0x90,0x80,0x94,0x81
       ,0x94,0x82,0x90,0x83,0x94,0x84,0x90,0x85
       ,0x80,0x80,0x84,0x81,0x84,0x82,0x80,0x83
       ,0x84,0x84,0x80,0x85,0x80,0x86,0x84,0x87
       ,0x8c,0x88,0x88,0x89,0x94,0x90,0x90,0x91
       ,0x90,0x92,0x94,0x93,0x90,0x94,0x94,0x95
       ,0x84,0x90,0x80,0x91,0x80,0x92,0x84,0x93
       ,0x80,0x94,0x84,0x95,0x84,0x96,0x80,0x97
       ,0x88,0x98,0x8c,0x99,0x55,0x00,0x11,0x01
       ,0x11,0x02,0x15,0x03,0x11,0x04,0x15,0x05
       ,0x45,0x00,0x01,0x01,0x01,0x02,0x05,0x03
       ,0x01,0x04,0x05,0x05,0x05,0x06,0x01,0x07
       ,0x09,0x08,0x0d,0x09,0x11,0x10,0x15,0x11
       ,0x15,0x12,0x11,0x13,0x15,0x14,0x11,0x15
       ,0x01,0x10,0x05,0x11,0x05,0x12,0x01,0x13
       ,0x05,0x14,0x01,0x15,0x01,0x16,0x05,0x17
       ,0x0d,0x18,0x09,0x19,0x31,0x20,0x35,0x21
       ,0x35,0x22,0x31,0x23,0x35,0x24,0x31,0x25
       ,0x21,0x20,0x25,0x21,0x25,0x22,0x21,0x23
       ,0x25,0x24,0x21,0x25,0x21,0x26,0x25,0x27
       ,0x2d,0x28,0x29,0x29,0x35,0x30,0x31,0x31
       ,0x31,0x32,0x35,0x33,0x31,0x34,0x35,0x35
       ,0x25,0x30,0x21,0x31,0x21,0x32,0x25,0x33
       ,0x21,0x34,0x25,0x35,0x25,0x36,0x21,0x37
       ,0x29,0x38,0x2d,0x39,0x11,0x40,0x15,0x41
       ,0x15,0x42,0x11,0x43,0x15,0x44,0x11,0x45
       ,0x01,0x40,0x05,0x41,0x05,0x42,0x01,0x43
       ,0x05,0x44,0x01,0x45,0x01,0x46,0x05,0x47
       ,0x0d,0x48,0x09,0x49,0x15,0x50,0x11,0x51
       ,0x11,0x52,0x15,0x53,0x11,0x54,0x15,0x55
       ,0x05,0x50,0x01,0x51,0x01,0x52,0x05,0x53
       ,0x01,0x54,0x05,0x55,0x05,0x56,0x01,0x57
       ,0x09,0x58,0x0d,0x59,0x35,0x60,0x31,0x61
       ,0x31,0x62,0x35,0x63,0x31,0x64,0x35,0x65
       ,0x25,0x60,0x21,0x61,0x21,0x62,0x25,0x63
       ,0x21,0x64,0x25,0x65,0x25,0x66,0x21,0x67
       ,0x29,0x68,0x2d,0x69,0x31,0x70,0x35,0x71
       ,0x35,0x72,0x31,0x73,0x35,0x74,0x31,0x75
       ,0x21,0x70,0x25,0x71,0x25,0x72,0x21,0x73
       ,0x25,0x74,0x21,0x75,0x21,0x76,0x25,0x77
       ,0x2d,0x78,0x29,0x79,0x91,0x80,0x95,0x81
       ,0x95,0x82,0x91,0x83,0x95,0x84,0x91,0x85
       ,0x81,0x80,0x85,0x81,0x85,0x82,0x81,0x83
       ,0x85,0x84,0x81,0x85,0x81,0x86,0x85,0x87
       ,0x8d,0x88,0x89,0x89,0x95,0x90,0x91,0x91
       ,0x91,0x92,0x95,0x93,0x91,0x94,0x95,0x95
       ,0x85,0x90,0x81,0x91,0x81,0x92,0x85,0x93
       ,0x81,0x94,0x85,0x95,0x85,0x96,0x81,0x97
       ,0x89,0x98,0x8d,0x99,0xb5,0xa0,0xb1,0xa1
       ,0xb1,0xa2,0xb5,0xa3,0xb1,0xa4,0xb5,0xa5
       ,0xa5,0xa0,0xa1,0xa1,0xa1,0xa2,0xa5,0xa3
       ,0xa1,0xa4,0xa5,0xa5,0xa5,0xa6,0xa1,0xa7
       ,0xa9,0xa8,0xad,0xa9,0xb1,0xb0,0xb5,0xb1
       ,0xb5,0xb2,0xb1,0xb3,0xb5,0xb4,0xb1,0xb5
       ,0xa1,0xb0,0xa5,0xb1,0xa5,0xb2,0xa1,0xb3
       ,0xa5,0xb4,0xa1,0xb5,0xa1,0xb6,0xa5,0xb7
       ,0xad,0xb8,0xa9,0xb9,0x95,0xc0,0x91,0xc1
       ,0x91,0xc2,0x95,0xc3,0x91,0xc4,0x95,0xc5
       ,0x85,0xc0,0x81,0xc1,0x81,0xc2,0x85,0xc3
       ,0x81,0xc4,0x85,0xc5,0x85,0xc6,0x81,0xc7
       ,0x89,0xc8,0x8d,0xc9,0x91,0xd0,0x95,0xd1
       ,0x95,0xd2,0x91,0xd3,0x95,0xd4,0x91,0xd5
       ,0x81,0xd0,0x85,0xd1,0x85,0xd2,0x81,0xd3
       ,0x85,0xd4,0x81,0xd5,0x81,0xd6,0x85,0xd7
       ,0x8d,0xd8,0x89,0xd9,0xb1,0xe0,0xb5,0xe1
       ,0xb5,0xe2,0xb1,0xe3,0xb5,0xe4,0xb1,0xe5
       ,0xa1,0xe0,0xa5,0xe1,0xa5,0xe2,0xa1,0xe3
       ,0xa5,0xe4,0xa1,0xe5,0xa1,0xe6,0xa5,0xe7
       ,0xad,0xe8,0xa9,0xe9,0xb5,0xf0,0xb1,0xf1
       ,0xb1,0xf2,0xb5,0xf3,0xb1,0xf4,0xb5,0xf5
       ,0xa5,0xf0,0xa1,0xf1,0xa1,0xf2,0xa5,0xf3
       ,0xa1,0xf4,0xa5,0xf5,0xa5,0xf6,0xa1,0xf7
       ,0xa9,0xf8,0xad,0xf9,0x55,0x00,0x11,0x01
       ,0x11,0x02,0x15,0x03,0x11,0x04,0x15,0x05
       ,0x45,0x00,0x01,0x01,0x01,0x02,0x05,0x03
       ,0x01,0x04,0x05,0x05,0x05,0x06,0x01,0x07
       ,0x09,0x08,0x0d,0x09,0x11,0x10,0x15,0x11
       ,0x15,0x12,0x11,0x13,0x15,0x14,0x11,0x15
       ,0x01,0x10,0x05,0x11,0x05,0x12,0x01,0x13
       ,0x05,0x14,0x01,0x15,0x01,0x16,0x05,0x17
       ,0x0d,0x18,0x09,0x19,0x31,0x20,0x35,0x21
       ,0x35,0x22,0x31,0x23,0x35,0x24,0x31,0x25
       ,0x21,0x20,0x25,0x21,0x25,0x22,0x21,0x23
       ,0x25,0x24,0x21,0x25,0x21,0x26,0x25,0x27
       ,0x2d,0x28,0x29,0x29,0x35,0x30,0x31,0x31
       ,0x31,0x32,0x35,0x33,0x31,0x34,0x35,0x35
       ,0x25,0x30,0x21,0x31,0x21,0x32,0x25,0x33
       ,0x21,0x34,0x25,0x35,0x25,0x36,0x21,0x37
       ,0x29,0x38,0x2d,0x39,0x11,0x40,0x15,0x41
       ,0x15,0x42,0x11,0x43,0x15,0x44,0x11,0x45
       ,0x01,0x40,0x05,0x41,0x05,0x42,0x01,0x43
       ,0x05,0x44,0x01,0x45,0x01,0x46,0x05,0x47
       ,0x0d,0x48,0x09,0x49,0x15,0x50,0x11,0x51
       ,0x11,0x52,0x15,0x53,0x11,0x54,0x15,0x55
       ,0x05,0x50,0x01,0x51,0x01,0x52,0x05,0x53
       ,0x01,0x54,0x05,0x55,0x05,0x56,0x01,0x57
       ,0x09,0x58,0x0d,0x59,0x35,0x60,0x31,0x61
       ,0x31,0x62,0x35,0x63,0x31,0x64,0x35,0x65
       ,0x46,0x00,0x02,0x01,0x02,0x02,0x06,0x03
       ,0x02,0x04,0x06,0x05,0x06,0x06,0x02,0x07
       ,0x0a,0x08,0x0e,0x09,0x02,0x04,0x06,0x05
       ,0x06,0x06,0x02,0x07,0x0a,0x08,0x0e,0x09
       ,0x02,0x10,0x06,0x11,0x06,0x12,0x02,0x13
       ,0x06,0x14,0x02,0x15,0x02,0x16,0x06,0x17
       ,0x0e,0x18,0x0a,0x19,0x06,0x14,0x02,0x15
       ,0x02,0x16,0x06,0x17,0x0e,0x18,0x0a,0x19
       ,0x22,0x20,0x26,0x21,0x26,0x22,0x22,0x23
       ,0x26,0x24,0x22,0x25,0x22,0x26,0x26,0x27
       ,0x2e,0x28,0x2a,0x29,0x26,0x24,0x22,0x25
       ,0x22,0x26,0x26,0x27,0x2e,0x28,0x2a,0x29
       ,0x26,0x30,0x22,0x31,0x22,0x32,0x26,0x33
       ,0x22,0x34,0x26,0x35,0x26,0x36,0x22,0x37
       ,0x2a,0x38,0x2e,0x39,0x22,0x34,0x26,0x35
       ,0x26,0x36,0x22,0x37,0x2a,0x38,0x2e,0x39
       ,0x02,0x40,0x06,0x41,0x06,0x42,0x02,0x43
       ,0x06,0x44,0x02,0x45,0x02,0x46,0x06,0x47
       ,0x0e,0x48,0x0a,0x49,0x06,0x44,0x02,0x45
       ,0x02,0x46,0x06,0x47,0x0e,0x48,0x0a,0x49
       ,0x06,0x50,0x02,0x51,0x02,0x52,0x06,0x53
       ,0x02,0x54,0x06,0x55,0x06,0x56,0x02,0x57
       ,0x0a,0x58,0x0e,0x59,0x02,0x54,0x06,0x55
       ,0x06,0x56,0x02,0x57,0x0a,0x58,0x0e,0x59
       ,0x26,0x60,0x22,0x61,0x22,0x62,0x26,0x63
       ,0x22,0x64,0x26,0x65,0x26,0x66,0x22,0x67
       ,0x2a,0x68,0x2e,0x69,0x22,0x64,0x26,0x65
       ,0x26,0x66,0x22,0x67,0x2a,0x68,0x2e,0x69
       ,0x22,0x70,0x26,0x71,0x26,0x72,0x22,0x73
       ,0x26,0x74,0x22,0x75,0x22,0x76,0x26,0x77
       ,0x2e,0x78,0x2a,0x79,0x26,0x74,0x22,0x75
       ,0x22,0x76,0x26,0x77,0x2e,0x78,0x2a,0x79
       ,0x82,0x80,0x86,0x81,0x86,0x82,0x82,0x83
       ,0x86,0x84,0x82,0x85,0x82,0x86,0x86,0x87
       ,0x8e,0x88,0x8a,0x89,0x86,0x84,0x82,0x85
       ,0x82,0x86,0x86,0x87,0x8e,0x88,0x8a,0x89
       ,0x86,0x90,0x82,0x91,0x82,0x92,0x86,0x93
       ,0x82,0x94,0x86,0x95,0x86,0x96,0x82,0x97
       ,0x8a,0x98,0x8e,0x99,0x23,0x34,0x27,0x35
       ,0x27,0x36,0x23,0x37,0x2b,0x38,0x2f,0x39
       ,0x03,0x40,0x07,0x41,0x07,0x42,0x03,0x43
       ,0x07,0x44,0x03,0x45,0x03,0x46,0x07,0x47
       ,0x0f,0x48,0x0b,0x49,0x07,0x44,0x03,0x45
       ,0x03,0x46,0x07,0x47,0x0f,0x48,0x0b,0x49
       ,0x07,0x50,0x03,0x51,0x03,0x52,0x07,0x53
       ,0x03,0x54,0x07,0x55,0x07,0x56,0x03,0x57
       ,0x0b,0x58,0x0f,0x59,0x03,0x54,0x07,0x55
       ,0x07,0x56,0x03,0x57,0x0b,0x58,0x0f,0x59
       ,0x27,0x60,0x23,0x61,0x23,0x62,0x27,0x63
       ,0x23,0x64,0x27,0x65,0x27,0x66,0x23,0x67
       ,0x2b,0x68,0x2f,0x69,0x23,0x64,0x27,0x65
       ,0x27,0x66,0x23,0x67,0x2b,0x68,0x2f,0x69
       ,0x23,0x70,0x27,0x71,0x27,0x72,0x23,0x73
       ,0x27,0x74,0x23,0x75,0x23,0x76,0x27,0x77
       ,0x2f,0x78,0x2b,0x79,0x27,0x74,0x23,0x75
       ,0x23,0x76,0x27,0x77,0x2f,0x78,0x2b,0x79
       ,0x83,0x80,0x87,0x81,0x87,0x82,0x83,0x83
       ,0x87,0x84,0x83,0x85,0x83,0x86,0x87,0x87
       ,0x8f,0x88,0x8b,0x89,0x87,0x84,0x83,0x85
       ,0x83,0x86,0x87,0x87,0x8f,0x88,0x8b,0x89
       ,0x87,0x90,0x83,0x91,0x83,0x92,0x87,0x93
       ,0x83,0x94,0x87,0x95,0x87,0x96,0x83,0x97
       ,0x8b,0x98,0x8f,0x99,0x83,0x94,0x87,0x95
       ,0x87,0x96,0x83,0x97,0x8b,0x98,0x8f,0x99
       ,0xa7,0xa0,0xa3,0xa1,0xa3,0xa2,0xa7,0xa3
       ,0xa3,0xa4,0xa7,0xa5,0xa7,0xa6,0xa3,0xa7
       ,0xab,0xa8,0xaf,0xa9,0xa3,0xa4,0xa7,0xa5
       ,0xa7,0xa6,0xa3,0xa7,0xab,0xa8,0xaf,0xa9
       ,0xa3,0xb0,0xa7,0xb1,0xa7,0xb2,0xa3,0xb3
       ,0xa7,0xb4,0xa3,0xb5,0xa3,0xb6,0xa7,0xb7
       ,0xaf,0xb8,0xab,0xb9,0xa7,0xb4,0xa3,0xb5
       ,0xa3,0xb6,0xa7,0xb7,0xaf,0xb8,0xab,0xb9
       ,0x87,0xc0,0x83,0xc1,0x83,0xc2,0x87,0xc3
       ,0x83,0xc4,0x87,0xc5,0x87,0xc6,0x83,0xc7
       ,0x8b,0xc8,0x8f,0xc9,0x83,0xc4,0x87,0xc5
       ,0x87,0xc6,0x83,0xc7,0x8b,0xc8,0x8f,0xc9
       ,0x83,0xd0,0x87,0xd1,0x87,0xd2,0x83,0xd3
       ,0x87,0xd4,0x83,0xd5,0x83,0xd6,0x87,0xd7
       ,0x8f,0xd8,0x8b,0xd9,0x87,0xd4,0x83,0xd5
       ,0x83,0xd6,0x87,0xd7,0x8f,0xd8,0x8b,0xd9
       ,0xa3,0xe0,0xa7,0xe1,0xa7,0xe2,0xa3,0xe3
       ,0xa7,0xe4,0xa3,0xe5,0xa3,0xe6,0xa7,0xe7
       ,0xaf,0xe8,0xab,0xe9,0xa7,0xe4,0xa3,0xe5
       ,0xa3,0xe6,0xa7,0xe7,0xaf,0xe8,0xab,0xe9
       ,0xa7,0xf0,0xa3,0xf1,0xa3,0xf2,0xa7,0xf3
       ,0xa3,0xf4,0xa7,0xf5,0xa7,0xf6,0xa3,0xf7
       ,0xab,0xf8,0xaf,0xf9,0xa3,0xf4,0xa7,0xf5
       ,0xa7,0xf6,0xa3,0xf7,0xab,0xf8,0xaf,0xf9
       ,0x47,0x00,0x03,0x01,0x03,0x02,0x07,0x03
       ,0x03,0x04,0x07,0x05,0x07,0x06,0x03,0x07
       ,0x0b,0x08,0x0f,0x09,0x03,0x04,0x07,0x05
       ,0x07,0x06,0x03,0x07,0x0b,0x08,0x0f,0x09
       ,0x03,0x10,0x07,0x11,0x07,0x12,0x03,0x13
       ,0x07,0x14,0x03,0x15,0x03,0x16,0x07,0x17
       ,0x0f,0x18,0x0b,0x19,0x07,0x14,0x03,0x15
       ,0x03,0x16,0x07,0x17,0x0f,0x18,0x0b,0x19
       ,0x23,0x20,0x27,0x21,0x27,0x22,0x23,0x23
       ,0x27,0x24,0x23,0x25,0x23,0x26,0x27,0x27
       ,0x2f,0x28,0x2b,0x29,0x27,0x24,0x23,0x25
       ,0x23,0x26,0x27,0x27,0x2f,0x28,0x2b,0x29
       ,0x27,0x30,0x23,0x31,0x23,0x32,0x27,0x33
       ,0x23,0x34,0x27,0x35,0x27,0x36,0x23,0x37
       ,0x2b,0x38,0x2f,0x39,0x23,0x34,0x27,0x35
       ,0x27,0x36,0x23,0x37,0x2b,0x38,0x2f,0x39
       ,0x03,0x40,0x07,0x41,0x07,0x42,0x03,0x43
       ,0x07,0x44,0x03,0x45,0x03,0x46,0x07,0x47
       ,0x0f,0x48,0x0b,0x49,0x07,0x44,0x03,0x45
       ,0x03,0x46,0x07,0x47,0x0f,0x48,0x0b,0x49
       ,0x07,0x50,0x03,0x51,0x03,0x52,0x07,0x53
       ,0x03,0x54,0x07,0x55,0x07,0x56,0x03,0x57
       ,0x0b,0x58,0x0f,0x59,0x03,0x54,0x07,0x55
       ,0x07,0x56,0x03,0x57,0x0b,0x58,0x0f,0x59
       ,0x27,0x60,0x23,0x61,0x23,0x62,0x27,0x63
       ,0x23,0x64,0x27,0x65,0x27,0x66,0x23,0x67
       ,0x2b,0x68,0x2f,0x69,0x23,0x64,0x27,0x65
       ,0x27,0x66,0x23,0x67,0x2b,0x68,0x2f,0x69
       ,0x23,0x70,0x27,0x71,0x27,0x72,0x23,0x73
       ,0x27,0x74,0x23,0x75,0x23,0x76,0x27,0x77
       ,0x2f,0x78,0x2b,0x79,0x27,0x74,0x23,0x75
       ,0x23,0x76,0x27,0x77,0x2f,0x78,0x2b,0x79
       ,0x83,0x80,0x87,0x81,0x87,0x82,0x83,0x83
       ,0x87,0x84,0x83,0x85,0x83,0x86,0x87,0x87
       ,0x8f,0x88,0x8b,0x89,0x87,0x84,0x83,0x85
       ,0x83,0x86,0x87,0x87,0x8f,0x88,0x8b,0x89
       ,0x87,0x90,0x83,0x91,0x83,0x92,0x87,0x93
       ,0x83,0x94,0x87,0x95,0x87,0x96,0x83,0x97
       ,0x8b,0x98,0x8f,0x99,0x83,0x94,0x87,0x95
       ,0x87,0x96,0x83,0x97,0x8b,0x98,0x8f,0x99
       ,0x04,0x06,0x00,0x07,0x08,0x08,0x0c,0x09
       ,0x0c,0x0a,0x08,0x0b,0x0c,0x0c,0x08,0x0d
       ,0x08,0x0e,0x0c,0x0f,0x10,0x10,0x14,0x11
       ,0x14,0x12,0x10,0x13,0x14,0x14,0x10,0x15
       ,0x00,0x16,0x04,0x17,0x0c,0x18,0x08,0x19
       ,0x08,0x1a,0x0c,0x1b,0x08,0x1c,0x0c,0x1d
       ,0x0c,0x1e,0x08,0x1f,0x30,0x20,0x34,0x21
       ,0x34,0x22,0x30,0x23,0x34,0x24,0x30,0x25
       ,0x20,0x26,0x24,0x27,0x2c,0x28,0x28,0x29
       ,0x28,0x2a,0x2c,0x2b,0x28,0x2c,0x2c,0x2d
       ,0x2c,0x2e,0x28,0x2f,0x34,0x30,0x30,0x31
       ,0x30,0x32,0x34,0x33,0x30,0x34,0x34,0x35
       ,0x24,0x36,0x20,0x37,0x28,0x38,0x2c,0x39
       ,0x2c,0x3a,0x28,0x3b,0x2c,0x3c,0x28,0x3d
       ,0x28,0x3e,0x2c,0x3f,0x10,0x40,0x14,0x41
       ,0x14,0x42,0x10,0x43,0x14,0x44,0x10,0x45
       ,0x00,0x46,0x04,0x47,0x0c,0x48,0x08,0x49
       ,0x08,0x4a,0x0c,0x4b,0x08,0x4c,0x0c,0x4d
       ,0x0c,0x4e,0x08,0x4f,0x14,0x50,0x10,0x51
       ,0x10,0x52,0x14,0x53,0x10,0x54,0x14,0x55
       ,0x04,0x56,0x00,0x57,0x08,0x58,0x0c,0x59
       ,0x0c,0x5a,0x08,0x5b,0x0c,0x5c,0x08,0x5d
       ,0x08,0x5e,0x0c,0x5f,0x34,0x60,0x30,0x61
       ,0x30,0x62,0x34,0x63,0x30,0x64,0x34,0x65
       ,0x24,0x66,0x20,0x67,0x28,0x68,0x2c,0x69
       ,0x2c,0x6a,0x28,0x6b,0x2c,0x6c,0x28,0x6d
       ,0x28,0x6e,0x2c,0x6f,0x30,0x70,0x34,0x71
       ,0x34,0x72,0x30,0x73,0x34,0x74,0x30,0x75
       ,0x20,0x76,0x24,0x77,0x2c,0x78,0x28,0x79
       ,0x28,0x7a,0x2c,0x7b,0x28,0x7c,0x2c,0x7d
       ,0x2c,0x7e,0x28,0x7f,0x90,0x80,0x94,0x81
       ,0x94,0x82,0x90,0x83,0x94,0x84,0x90,0x85
       ,0x80,0x86,0x84,0x87,0x8c,0x88,0x88,0x89
       ,0x88,0x8a,0x8c,0x8b,0x88,0x8c,0x8c,0x8d
       ,0x8c,0x8e,0x88,0x8f,0x94,0x90,0x90,0x91
       ,0x90,0x92,0x94,0x93,0x90,0x94,0x94,0x95
       ,0x84,0x96,0x80,0x97,0x88,0x98,0x8c,0x99
       ,0x8c,0x9a,0x88,0x9b,0x8c,0x9c,0x88,0x9d
       ,0x88,0x9e,0x8c,0x9f,0x55,0x00,0x11,0x01
       ,0x11,0x02,0x15,0x03,0x11,0x04,0x15,0x05
       ,0x05,0x06,0x01,0x07,0x09,0x08,0x0d,0x09
       ,0x0d,0x0a,0x09,0x0b,0x0d,0x0c,0x09,0x0d
       ,0x09,0x0e,0x0d,0x0f,0x11,0x10,0x15,0x11
       ,0x15,0x12,0x11,0x13,0x15,0x14,0x11,0x15
       ,0x01,0x16,0x05,0x17,0x0d,0x18,0x09,0x19
       ,0x09,0x1a,0x0d,0x1b,0x09,0x1c,0x0d,0x1d
       ,0x0d,0x1e,0x09,0x1f,0x31,0x20,0x35,0x21
       ,0x35,0x22,0x31,0x23,0x35,0x24,0x31,0x25
       ,0x21,0x26,0x25,0x27,0x2d,0x28,0x29,0x29
       ,0x29,0x2a,0x2d,0x2b,0x29,0x2c,0x2d,0x2d
       ,0x2d,0x2e,0x29,0x2f,0x35,0x30,0x31,0x31
       ,0x31,0x32,0x35,0x33,0x31,0x34,0x35,0x35
       ,0x25,0x36,0x21,0x37,0x29,0x38,0x2d,0x39
       ,0x2d,0x3a,0x29,0x3b,0x2d,0x3c,0x29,0x3d
       ,0x29,0x3e,0x2d,0x3f,0x11,0x40,0x15,0x41
       ,0x15,0x42,0x11,0x43,0x15,0x44,0x11,0x45
       ,0x01,0x46,0x05,0x47,0x0d,0x48,0x09,0x49
       ,0x09,0x4a,0x0d,0x4b,0x09,0x4c,0x0d,0x4d
       ,0x0d,0x4e,0x09,0x4f,0x15,0x50,0x11,0x51
       ,0x11,0x52,0x15,0x53,0x11,0x54,0x15,0x55
       ,0x05,0x56,0x01,0x57,0x09,0x58,0x0d,0x59
       ,0x0d,0x5a,0x09,0x5b,0x0d,0x5c,0x09,0x5d
       ,0x09,0x5e,0x0d,0x5f,0x35,0x60,0x31,0x61
       ,0x31,0x62,0x35,0x63,0x31,0x64,0x35,0x65
       ,0x25,0x66,0x21,0x67,0x29,0x68,0x2d,0x69
       ,0x2d,0x6a,0x29,0x6b,0x2d,0x6c,0x29,0x6d
       ,0x29,0x6e,0x2d,0x6f,0x31,0x70,0x35,0x71
       ,0x35,0x72,0x31,0x73,0x35,0x74,0x31,0x75
       ,0x21,0x76,0x25,0x77,0x2d,0x78,0x29,0x79
       ,0x29,0x7a,0x2d,0x7b,0x29,0x7c,0x2d,0x7d
       ,0x2d,0x7e,0x29,0x7f,0x91,0x80,0x95,0x81
       ,0x95,0x82,0x91,0x83,0x95,0x84,0x91,0x85
       ,0x81,0x86,0x85,0x87,0x8d,0x88,0x89,0x89
       ,0x89,0x8a,0x8d,0x8b,0x89,0x8c,0x8d,0x8d
       ,0x8d,0x8e,0x89,0x8f,0x95,0x90,0x91,0x91
       ,0x91,0x92,0x95,0x93,0x91,0x94,0x95,0x95
       ,0x85,0x96,0x81,0x97,0x89,0x98,0x8d,0x99
       ,0x8d,0x9a,0x89,0x9b,0x8d,0x9c,0x89,0x9d
       ,0x89,0x9e,0x8d,0x9f,0xb5,0xa0,0xb1,0xa1
       ,0xb1,0xa2,0xb5,0xa3,0xb1,0xa4,0xb5,0xa5
       ,0xa5,0xa6,0xa1,0xa7,0xa9,0xa8,0xad,0xa9
       ,0xad,0xaa,0xa9,0xab,0xad,0xac,0xa9,0xad
       ,0xa9,0xae,0xad,0xaf,0xb1,0xb0,0xb5,0xb1
       ,0xb5,0xb2,0xb1,0xb3,0xb5,0xb4,0xb1,0xb5
       ,0xa1,0xb6,0xa5,0xb7,0xad,0xb8,0xa9,0xb9
       ,0xa9,0xba,0xad,0xbb,0xa9,0xbc,0xad,0xbd
       ,0xad,0xbe,0xa9,0xbf,0x95,0xc0,0x91,0xc1
       ,0x91,0xc2,0x95,0xc3,0x91,0xc4,0x95,0xc5
       ,0x85,0xc6,0x81,0xc7,0x89,0xc8,0x8d,0xc9
       ,0x8d,0xca,0x89,0xcb,0x8d,0xcc,0x89,0xcd
       ,0x89,0xce,0x8d,0xcf,0x91,0xd0,0x95,0xd1
       ,0x95,0xd2,0x91,0xd3,0x95,0xd4,0x91,0xd5
       ,0x81,0xd6,0x85,0xd7,0x8d,0xd8,0x89,0xd9
       ,0x89,0xda,0x8d,0xdb,0x89,0xdc,0x8d,0xdd
       ,0x8d,0xde,0x89,0xdf,0xb1,0xe0,0xb5,0xe1
       ,0xb5,0xe2,0xb1,0xe3,0xb5,0xe4,0xb1,0xe5
       ,0xa1,0xe6,0xa5,0xe7,0xad,0xe8,0xa9,0xe9
       ,0xa9,0xea,0xad,0xeb,0xa9,0xec,0xad,0xed
       ,0xad,0xee,0xa9,0xef,0xb5,0xf0,0xb1,0xf1
       ,0xb1,0xf2,0xb5,0xf3,0xb1,0xf4,0xb5,0xf5
       ,0xa5,0xf6,0xa1,0xf7,0xa9,0xf8,0xad,0xf9
       ,0xad,0xfa,0xa9,0xfb,0xad,0xfc,0xa9,0xfd
       ,0xa9,0xfe,0xad,0xff,0x55,0x00,0x11,0x01
       ,0x11,0x02,0x15,0x03,0x11,0x04,0x15,0x05
       ,0x05,0x06,0x01,0x07,0x09,0x08,0x0d,0x09
       ,0x0d,0x0a,0x09,0x0b,0x0d,0x0c,0x09,0x0d
       ,0x09,0x0e,0x0d,0x0f,0x11,0x10,0x15,0x11
       ,0x15,0x12,0x11,0x13,0x15,0x14,0x11,0x15
       ,0x01,0x16,0x05,0x17,0x0d,0x18,0x09,0x19
       ,0x09,0x1a,0x0d,0x1b,0x09,0x1c,0x0d,0x1d
       ,0x0d,0x1e,0x09,0x1f,0x31,0x20,0x35,0x21
       ,0x35,0x22,0x31,0x23,0x35,0x24,0x31,0x25
       ,0x21,0x26,0x25,0x27,0x2d,0x28,0x29,0x29
       ,0x29,0x2a,0x2d,0x2b,0x29,0x2c,0x2d,0x2d
       ,0x2d,0x2e,0x29,0x2f,0x35,0x30,0x31,0x31
       ,0x31,0x32,0x35,0x33,0x31,0x34,0x35,0x35
       ,0x25,0x36,0x21,0x37,0x29,0x38,0x2d,0x39
       ,0x2d,0x3a,0x29,0x3b,0x2d,0x3c,0x29,0x3d
       ,0x29,0x3e,0x2d,0x3f,0x11,0x40,0x15,0x41
       ,0x15,0x42,0x11,0x43,0x15,0x44,0x11,0x45
       ,0x01,0x46,0x05,0x47,0x0d,0x48,0x09,0x49
       ,0x09,0x4a,0x0d,0x4b,0x09,0x4c,0x0d,0x4d
       ,0x0d,0x4e,0x09,0x4f,0x15,0x50,0x11,0x51
       ,0x11,0x52,0x15,0x53,0x11,0x54,0x15,0x55
       ,0x05,0x56,0x01,0x57,0x09,0x58,0x0d,0x59
       ,0x0d,0x5a,0x09,0x5b,0x0d,0x5c,0x09,0x5d
       ,0x09,0x5e,0x0d,0x5f,0x35,0x60,0x31,0x61
       ,0x31,0x62,0x35,0x63,0x31,0x64,0x35,0x65
       ,0xbe,0xfa,0xba,0xfb,0xbe,0xfc,0xba,0xfd
       ,0xba,0xfe,0xbe,0xff,0x46,0x00,0x02,0x01
       ,0x02,0x02,0x06,0x03,0x02,0x04,0x06,0x05
       ,0x06,0x06,0x02,0x07,0x0a,0x08,0x0e,0x09
       ,0x1e,0x0a,0x1a,0x0b,0x1e,0x0c,0x1a,0x0d
       ,0x1a,0x0e,0x1e,0x0f,0x02,0x10,0x06,0x11
       ,0x06,0x12,0x02,0x13,0x06,0x14,0x02,0x15
       ,0x02,0x16,0x06,0x17,0x0e,0x18,0x0a,0x19
       ,0x1a,0x1a,0x1e,0x1b,0x1a,0x1c,0x1e,0x1d
       ,0x1e,0x1e,0x1a,0x1f,0x22,0x20,0x26,0x21
       ,0x26,0x22,0x22,0x23,0x26,0x24,0x22,0x25
       ,0x22,0x26,0x26,0x27,0x2e,0x28,0x2a,0x29
       ,0x3a,0x2a,0x3e,0x2b,0x3a,0x2c,0x3e,0x2d
       ,0x3e,0x2e,0x3a,0x2f,0x26,0x30,0x22,0x31
       ,0x22,0x32,0x26,0x33,0x22,0x34,0x26,0x35
       ,0x26,0x36,0x22,0x37,0x2a,0x38,0x2e,0x39
       ,0x3e,0x3a,0x3a,0x3b,0x3e,0x3c,0x3a,0x3d
       ,0x3a,0x3e,0x3e,0x3f,0x02,0x40,0x06,0x41
       ,0x06,0x42,0x02,0x43,0x06,0x44,0x02,0x45
       ,0x02,0x46,0x06,0x47,0x0e,0x48,0x0a,0x49
       ,0x1a,0x4a,0x1e,0x4b,0x1a,0x4c,0x1e,0x4d
       ,0x1e,0x4e,0x1a,0x4f,0x06,0x50,0x02,0x51
       ,0x02,0x52,0x06,0x53,0x02,0x54,0x06,0x55
       ,0x06,0x56,0x02,0x57,0x0a,0x58,0x0e,0x59
       ,0x1e,0x5a,0x1a,0x5b,0x1e,0x5c,0x1a,0x5d
       ,0x1a,0x5e,0x1e,0x5f,0x26,0x60,0x22,0x61
       ,0x22,0x62,0x26,0x63,0x22,0x64,0x26,0x65
       ,0x26,0x66,0x22,0x67,0x2a,0x68,0x2e,0x69
       ,0x3e,0x6a,0x3a,0x6b,0x3e,0x6c,0x3a,0x6d
       ,0x3a,0x6e,0x3e,0x6f,0x22,0x70,0x26,0x71
       ,0x26,0x72,0x22,0x73,0x26,0x74,0x22,0x75
       ,0x22,0x76,0x26,0x77,0x2e,0x78,0x2a,0x79
       ,0x3a,0x7a,0x3e,0x7b,0x3a,0x7c,0x3e,0x7d
       ,0x3e,0x7e,0x3a,0x7f,0x82,0x80,0x86,0x81
       ,0x86,0x82,0x82,0x83,0x86,0x84,0x82,0x85
       ,0x82,0x86,0x86,0x87,0x8e,0x88,0x8a,0x89
       ,0x9a,0x8a,0x9e,0x8b,0x9a,0x8c,0x9e,0x8d
       ,0x9e,0x8e,0x9a,0x8f,0x86,0x90,0x82,0x91
       ,0x82,0x92,0x86,0x93,0x23,0x34,0x27,0x35
       ,0x27,0x36,0x23,0x37,0x2b,0x38,0x2f,0x39
       ,0x3f,0x3a,0x3b,0x3b,0x3f,0x3c,0x3b,0x3d
       ,0x3b,0x3e,0x3f,0x3f,0x03,0x40,0x07,0x41
       ,0x07,0x42,0x03,0x43,0x07,0x44,0x03,0x45
       ,0x03,0x46,0x07,0x47,0x0f,0x48,0x0b,0x49
       ,0x1b,0x4a,0x1f,0x4b,0x1b,0x4c,0x1f,0x4d
       ,0x1f,0x4e,0x1b,0x4f,0x07,0x50,0x03,0x51
       ,0x03,0x52,0x07,0x53,0x03,0x54,0x07,0x55
       ,0x07,0x56,0x03,0x57,0x0b,0x58,0x0f,0x59
       ,0x1f,0x5a,0x1b,0x5b,0x1f,0x5c,0x1b,0x5d
       ,0x1b,0x5e,0x1f,0x5f,0x27,0x60,0x23,0x61
       ,0x23,0x62,0x27,0x63,0x23,0x64,0x27,0x65
       ,0x27,0x66,0x23,0x67,0x2b,0x68,0x2f,0x69
       ,0x3f,0x6a,0x3b,0x6b,0x3f,0x6c,0x3b,0x6d
       ,0x3b,0x6e,0x3f,0x6f,0x23,0x70,0x27,0x71
       ,0x27,0x72,0x23,0x73,0x27,0x74,0x23,0x75
       ,0x23,0x76,0x27,0x77,0x2f,0x78,0x2b,0x79
       ,0x3b,0x7a,0x3f,0x7b,0x3b,0x7c,0x3f,0x7d
       ,0x3f,0x7e,0x3b,0x7f,0x83,0x80,0x87,0x81
       ,0x87,0x82,0x83,0x83,0x87,0x84,0x83,0x85
       ,0x83,0x86,0x87,0x87,0x8f,0x88,0x8b,0x89
       ,0x9b,0x8a,0x9f,0x8b,0x9b,0x8c,0x9f,0x8d
       ,0x9f,0x8e,0x9b,0x8f,0x87,0x90,0x83,0x91
       ,0x83,0x92,0x87,0x93,0x83,0x94,0x87,0x95
       ,0x87,0x96,0x83,0x97,0x8b,0x98,0x8f,0x99
       ,0x9f,0x9a,0x9b,0x9b,0x9f,0x9c,0x9b,0x9d
       ,0x9b,0x9e,0x9f,0x9f,0xa7,0xa0,0xa3,0xa1
       ,0xa3,0xa2,0xa7,0xa3,0xa3,0xa4,0xa7,0xa5
       ,0xa7,0xa6,0xa3,0xa7,0xab,0xa8,0xaf,0xa9
       ,0xbf,0xaa,0xbb,0xab,0xbf,0xac,0xbb,0xad
       ,0xbb,0xae,0xbf,0xaf,0xa3,0xb0,0xa7,0xb1
       ,0xa7,0xb2,0xa3,0xb3,0xa7,0xb4,0xa3,0xb5
       ,0xa3,0xb6,0xa7,0xb7,0xaf,0xb8,0xab,0xb9
       ,0xbb,0xba,0xbf,0xbb,0xbb,0xbc,0xbf,0xbd
       ,0xbf,0xbe,0xbb,0xbf,0x87,0xc0,0x83,0xc1
       ,0x83,0xc2,0x87,0xc3,0x83,0xc4,0x87,0xc5
       ,0x87,0xc6,0x83,0xc7,0x8b,0xc8,0x8f,0xc9
       ,0x9f,0xca,0x9b,0xcb,0x9f,0xcc,0x9b,0xcd
       ,0x9b,0xce,0x9f,0xcf,0x83,0xd0,0x87,0xd1
       ,0x87,0xd2,0x83,0xd3,0x87,0xd4,0x83,0xd5
       ,0x83,0xd6,0x87,0xd7,0x8f,0xd8,0x8b,0xd9
       ,0x9b,0xda,0x9f,0xdb,0x9b,0xdc,0x9f,0xdd
       ,0x9f,0xde,0x9b,0xdf,0xa3,0xe0,0xa7,0xe1
       ,0xa7,0xe2,0xa3,0xe3,0xa7,0xe4,0xa3,0xe5
       ,0xa3,0xe6,0xa7,0xe7,0xaf,0xe8,0xab,0xe9
       ,0xbb,0xea,0xbf,0xeb,0xbb,0xec,0xbf,0xed
       ,0xbf,0xee,0xbb,0xef,0xa7,0xf0,0xa3,0xf1
       ,0xa3,0xf2,0xa7,0xf3,0xa3,0xf4,0xa7,0xf5
       ,0xa7,0xf6,0xa3,0xf7,0xab,0xf8,0xaf,0xf9
       ,0xbf,0xfa,0xbb,0xfb,0xbf,0xfc,0xbb,0xfd
       ,0xbb,0xfe,0xbf,0xff,0x47,0x00,0x03,0x01
       ,0x03,0x02,0x07,0x03,0x03,0x04,0x07,0x05
       ,0x07,0x06,0x03,0x07,0x0b,0x08,0x0f,0x09
       ,0x1f,0x0a,0x1b,0x0b,0x1f,0x0c,0x1b,0x0d
       ,0x1b,0x0e,0x1f,0x0f,0x03,0x10,0x07,0x11
       ,0x07,0x12,0x03,0x13,0x07,0x14,0x03,0x15
       ,0x03,0x16,0x07,0x17,0x0f,0x18,0x0b,0x19
       ,0x1b,0x1a,0x1f,0x1b,0x1b,0x1c,0x1f,0x1d
       ,0x1f,0x1e,0x1b,0x1f,0x23,0x20,0x27,0x21
       ,0x27,0x22,0x23,0x23,0x27,0x24,0x23,0x25
       ,0x23,0x26,0x27,0x27,0x2f,0x28,0x2b,0x29
       ,0x3b,0x2a,0x3f,0x2b,0x3b,0x2c,0x3f,0x2d
       ,0x3f,0x2e,0x3b,0x2f,0x27,0x30,0x23,0x31
       ,0x23,0x32,0x27,0x33,0x23,0x34,0x27,0x35
       ,0x27,0x36,0x23,0x37,0x2b,0x38,0x2f,0x39
       ,0x3f,0x3a,0x3b,0x3b,0x3f,0x3c,0x3b,0x3d
       ,0x3b,0x3e,0x3f,0x3f,0x03,0x40,0x07,0x41
       ,0x07,0x42,0x03,0x43,0x07,0x44,0x03,0x45
       ,0x03,0x46,0x07,0x47,0x0f,0x48,0x0b,0x49
       ,0x1b,0x4a,0x1f,0x4b,0x1b,0x4c,0x1f,0x4d
       ,0x1f,0x4e,0x1b,0x4f,0x07,0x50,0x03,0x51
       ,0x03,0x52,0x07,0x53,0x03,0x54,0x07,0x55
       ,0x07,0x56,0x03,0x57,0x0b,0x58,0x0f,0x59
       ,0x1f,0x5a,0x1b,0x5b,0x1f,0x5c,0x1b,0x5d
       ,0x1b,0x5e,0x1f,0x5f,0x27,0x60,0x23,0x61
       ,0x23,0x62,0x27,0x63,0x23,0x64,0x27,0x65
       ,0x27,0x66,0x23,0x67,0x2b,0x68,0x2f,0x69
       ,0x3f,0x6a,0x3b,0x6b,0x3f,0x6c,0x3b,0x6d
       ,0x3b,0x6e,0x3f,0x6f,0x23,0x70,0x27,0x71
       ,0x27,0x72,0x23,0x73,0x27,0x74,0x23,0x75
       ,0x23,0x76,0x27,0x77,0x2f,0x78,0x2b,0x79
       ,0x3b,0x7a,0x3f,0x7b,0x3b,0x7c,0x3f,0x7d
       ,0x3f,0x7e,0x3b,0x7f,0x83,0x80,0x87,0x81
       ,0x87,0x82,0x83,0x83,0x87,0x84,0x83,0x85
       ,0x83,0x86,0x87,0x87,0x8f,0x88,0x8b,0x89
       ,0x9b,0x8a,0x9f,0x8b,0x9b,0x8c,0x9f,0x8d
       ,0x9f,0x8e,0x9b,0x8f,0x87,0x90,0x83,0x91
       ,0x83,0x92,0x87,0x93,0x83,0x94,0x87,0x95
       ,0x87,0x96,0x83,0x97,0x8b,0x98,0x8f,0x99
};
# 47 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "../../libayfly/z80ex/opcodes/opcodes_base.cpp" 1
 

 
static void op_0x00(Z80EX_CONTEXT *cpu)
{
	 ;
	return;
}

 
static void op_0x01(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->bc.w  = cpu->tmpword .w ; } ;
	 ;
	return;
}

 
static void op_0x02(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->af.b.h  ; cpu->memptr.b.h = cpu->af.b.h ;	cpu->memptr.b.l =((  (cpu->bc.w ) +1) & 0xFF);} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->bc.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x03(Z80EX_CONTEXT *cpu)
{
	{	( cpu->bc.w  )++;} ;
	 ;
	return;
}

 
static void op_0x04(Z80EX_CONTEXT *cpu)
{
	{	( cpu->bc.b.h  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->bc.b.h  )==0x80 ? 0x04   : 0 ) |	( ( cpu->bc.b.h  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_0x05(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->bc.b.h  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->bc.b.h  )--;	cpu->af.b.l  |= ( ( cpu->bc.b.h  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->bc.b.h  ];} ;
	 ;
	return;
}

 
static void op_0x06(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x07(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  = ( cpu->af.b.h  << 1 ) | ( cpu->af.b.h  >> 7 );	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04  | 0x40  | 0x80  ) ) |	( cpu->af.b.h  & ( 0x01  | 0x08  | 0x20  ) );} ;
	 ;
	return;
}

 
static void op_0x08(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD wordtemp= cpu->af.w  ;  cpu->af.w  = cpu->af_.w  ;  cpu->af_.w  =wordtemp;} ;
	 ;
	return;
}

 
static void op_0x09(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->hl.w  ) + ( cpu->bc.w  ); Z80EX_BYTE lookup = ( (  ( cpu->hl.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->bc.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	( cpu->hl.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_0x0a(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->bc.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; cpu->memptr.w =  (cpu->bc.w ) +1;} ;
	 ;
	return;
}

 
static void op_0x0b(Z80EX_CONTEXT *cpu)
{
	{	( cpu->bc.w  )--;} ;
	 ;
	return;
}

 
static void op_0x0c(Z80EX_CONTEXT *cpu)
{
	{	( cpu->bc.b.l  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->bc.b.l  )==0x80 ? 0x04   : 0 ) |	( ( cpu->bc.b.l  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_0x0d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->bc.b.l  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->bc.b.l  )--;	cpu->af.b.l  |= ( ( cpu->bc.b.l  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->bc.b.l  ];} ;
	 ;
	return;
}

 
static void op_0x0e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x0f(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04  | 0x40  | 0x80  ) ) | ( cpu->af.b.h  & 0x01  );	cpu->af.b.h  = ( cpu->af.b.h  >> 1) | ( cpu->af.b.h  << 7 );	cpu->af.b.l  |= ( cpu->af.b.h  & ( 0x08  | 0x20  ) );} ;
	 ;
	return;
}

 
static void op_0x10(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	{	cpu->bc.b.h --;	if(cpu->bc.b.h ) {	cpu->pc.w  +=  cpu->tmpbyte_s  ;	cpu->memptr.w = cpu->pc.w ;	 ;	}	else	{	 ;	}} ;
	return;
}

 
static void op_0x11(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->de.w  = cpu->tmpword .w ; } ;
	 ;
	return;
}

 
static void op_0x12(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->af.b.h  ; cpu->memptr.b.h = cpu->af.b.h ;	cpu->memptr.b.l =((  (cpu->de.w ) +1) & 0xFF);} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->de.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x13(Z80EX_CONTEXT *cpu)
{
	{	( cpu->de.w  )++;} ;
	 ;
	return;
}

 
static void op_0x14(Z80EX_CONTEXT *cpu)
{
	{	( cpu->de.b.h  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->de.b.h  )==0x80 ? 0x04   : 0 ) |	( ( cpu->de.b.h  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_0x15(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->de.b.h  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->de.b.h  )--;	cpu->af.b.l  |= ( ( cpu->de.b.h  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->de.b.h  ];} ;
	 ;
	return;
}

 
static void op_0x16(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x17(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp = cpu->af.b.h ;	cpu->af.b.h  = ( cpu->af.b.h  << 1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04  | 0x40  | 0x80  ) ) |	( cpu->af.b.h  & ( 0x08  | 0x20  ) ) | ( bytetemp >> 7 );} ;
	 ;
	return;
}

 
static void op_0x18(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	{	cpu->pc.w += cpu->tmpbyte_s  ; cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0x19(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->hl.w  ) + ( cpu->de.w  ); Z80EX_BYTE lookup = ( (  ( cpu->hl.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->de.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	( cpu->hl.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_0x1a(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->de.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; cpu->memptr.w =  (cpu->de.w ) +1;} ;
	 ;
	return;
}

 
static void op_0x1b(Z80EX_CONTEXT *cpu)
{
	{	( cpu->de.w  )--;} ;
	 ;
	return;
}

 
static void op_0x1c(Z80EX_CONTEXT *cpu)
{
	{	( cpu->de.b.l  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->de.b.l  )==0x80 ? 0x04   : 0 ) |	( ( cpu->de.b.l  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_0x1d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->de.b.l  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->de.b.l  )--;	cpu->af.b.l  |= ( ( cpu->de.b.l  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->de.b.l  ];} ;
	 ;
	return;
}

 
static void op_0x1e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x1f(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp = cpu->af.b.h ;	cpu->af.b.h  = ( cpu->af.b.h  >> 1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04  | 0x40  | 0x80  ) ) |	( cpu->af.b.h  & ( 0x08  | 0x20  ) ) | ( bytetemp & 0x01  ) ;} ;
	 ;
	return;
}

 
static void op_0x20(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	if(!(cpu->af.b.l  & 0x40 )) {
	{	cpu->pc.w += cpu->tmpbyte_s  ; cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0x21(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->hl.w  = cpu->tmpword .w ; } ;
	 ;
	return;
}

 
static void op_0x22(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpword .w = cpu->hl.w  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w+1 ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x23(Z80EX_CONTEXT *cpu)
{
	{	( cpu->hl.w  )++;} ;
	 ;
	return;
}

 
static void op_0x24(Z80EX_CONTEXT *cpu)
{
	{	( cpu->hl.b.h  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->hl.b.h  )==0x80 ? 0x04   : 0 ) |	( ( cpu->hl.b.h  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_0x25(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->hl.b.h  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->hl.b.h  )--;	cpu->af.b.l  |= ( ( cpu->hl.b.h  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->hl.b.h  ];} ;
	 ;
	return;
}

 
static void op_0x26(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x27(Z80EX_CONTEXT *cpu)
{
	{	const Z80EX_BYTE *tdaa = (daatab+(cpu->af.b.h +0x100*((cpu->af.b.l  & 3) + ((cpu->af.b.l  >> 2) & 4)))*2);	cpu->af.b.l  = *tdaa; cpu->af.b.h  = *(tdaa + 1);} ;
	 ;
	return;
}

 
static void op_0x28(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	if(cpu->af.b.l  & 0x40 ) {
	{	cpu->pc.w += cpu->tmpbyte_s  ; cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0x29(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->hl.w  ) + ( cpu->hl.w  ); Z80EX_BYTE lookup = ( (  ( cpu->hl.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->hl.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	( cpu->hl.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_0x2a(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w+1 ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.w  = cpu->tmpword .w ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_0x2b(Z80EX_CONTEXT *cpu)
{
	{	( cpu->hl.w  )--;} ;
	 ;
	return;
}

 
static void op_0x2c(Z80EX_CONTEXT *cpu)
{
	{	( cpu->hl.b.l  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->hl.b.l  )==0x80 ? 0x04   : 0 ) |	( ( cpu->hl.b.l  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_0x2d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->hl.b.l  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->hl.b.l  )--;	cpu->af.b.l  |= ( ( cpu->hl.b.l  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->hl.b.l  ];} ;
	 ;
	return;
}

 
static void op_0x2e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x2f(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= 0xff;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x01  | 0x04  | 0x40  | 0x80  ) ) |	( cpu->af.b.h  & ( 0x08  | 0x20  ) ) | ( 0x02  | 0x10  );} ;
	 ;
	return;
}

 
static void op_0x30(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	if(!(cpu->af.b.l  & 0x01 )) {
	{	cpu->pc.w += cpu->tmpbyte_s  ; cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0x31(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->sp.w  = cpu->tmpword .w ; } ;
	 ;
	return;
}

 
static void op_0x32(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpbyte  = cpu->af.b.h  ; cpu->memptr.b.h = cpu->af.b.h ;	cpu->memptr.b.l =((  cpu->tmpaddr .w +1) & 0xFF);} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x33(Z80EX_CONTEXT *cpu)
{
	{	( cpu->sp.w  )++;} ;
	 ;
	return;
}

 
static void op_0x34(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->tmpbyte  )==0x80 ? 0x04   : 0 ) |	( ( cpu->tmpbyte  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x35(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->tmpbyte  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->tmpbyte  )--;	cpu->af.b.l  |= ( ( cpu->tmpbyte  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->tmpbyte  ];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x36(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpbyte  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x37(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04  | 0x40  | 0x80  ) ) |	( cpu->af.b.h  & ( 0x08  | 0x20           ) ) |	0x01 ;} ;
	 ;
	return;
}

 
static void op_0x38(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	if(cpu->af.b.l  & 0x01 ) {
	{	cpu->pc.w += cpu->tmpbyte_s  ; cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0x39(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->hl.w  ) + ( cpu->sp.w  ); Z80EX_BYTE lookup = ( (  ( cpu->hl.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->sp.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	( cpu->hl.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_0x3a(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_0x3b(Z80EX_CONTEXT *cpu)
{
	{	( cpu->sp.w  )--;} ;
	 ;
	return;
}

 
static void op_0x3c(Z80EX_CONTEXT *cpu)
{
	{	( cpu->af.b.h  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->af.b.h  )==0x80 ? 0x04   : 0 ) |	( ( cpu->af.b.h  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_0x3d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->af.b.h  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->af.b.h  )--;	cpu->af.b.l  |= ( ( cpu->af.b.h  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->af.b.h  ];} ;
	 ;
	return;
}

 
static void op_0x3e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x3f(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04  | 0x40  | 0x80  ) ) |	( ( cpu->af.b.l  & 0x01  ) ? 0x10  : 0x01  ) | ( cpu->af.b.h  & ( 0x08  | 0x20  ) );} ;
	 ;
	return;
}

 
static void op_0x40(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x41(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x42(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x43(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x44(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->hl.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x45(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->hl.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x46(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x47(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x48(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x49(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x4a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x4b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x4c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->hl.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x4d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->hl.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x4e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x4f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x50(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x51(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x52(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x53(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x54(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->hl.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x55(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->hl.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x56(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x57(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x58(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x59(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x5a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x5b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x5c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->hl.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x5d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->hl.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x5e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x5f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x60(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x61(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x62(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x63(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x64(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h  = cpu->hl.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x65(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h  = cpu->hl.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x66(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x67(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x68(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x69(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x6a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x6b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x6c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l  = cpu->hl.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x6d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l  = cpu->hl.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x6e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x6f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x70(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->bc.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x71(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->bc.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x72(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->de.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x73(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->de.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x74(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->hl.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x75(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->hl.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x76(Z80EX_CONTEXT *cpu)
{
	{	cpu->halted=1;	cpu->pc.w --;} ;
	 ;
	return;
}

 
static void op_0x77(Z80EX_CONTEXT *cpu)
{
	{	 cpu->tmpbyte  = cpu->af.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0x78(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x79(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x7a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x7b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x7c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->hl.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x7d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->hl.b.l  ; } ;
	 ;
	return;
}

 
static void op_0x7e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_0x7f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_0x80(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->bc.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.h  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x81(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->bc.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.l  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x82(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->de.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.h  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x83(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->de.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.l  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x84(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->hl.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.h  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x85(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->hl.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.l  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x86(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x87(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->af.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->af.b.h  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x88(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->bc.b.h  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.h  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x89(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->bc.b.l  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.l  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x8a(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->de.b.h  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.h  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x8b(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->de.b.l  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.l  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x8c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->hl.b.h  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.h  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x8d(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->hl.b.l  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.l  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x8e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->tmpbyte  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x8f(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->af.b.h  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->af.b.h  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x90(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->bc.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.h  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x91(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->bc.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.l  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x92(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->de.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.h  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x93(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->de.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.l  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x94(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->hl.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.h  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x95(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->hl.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.l  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x96(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x97(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->af.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->af.b.h  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x98(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->bc.b.h  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.h  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x99(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->bc.b.l  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.l  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x9a(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->de.b.h  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.h  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x9b(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->de.b.l  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.l  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x9c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->hl.b.h  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.h  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x9d(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->hl.b.l  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.l  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x9e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->tmpbyte  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0x9f(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->af.b.h  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->af.b.h  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa0(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->bc.b.h  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa1(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->bc.b.l  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa2(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->de.b.h  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa3(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->de.b.l  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa4(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->hl.b.h  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa5(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->hl.b.l  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  &= ( cpu->tmpbyte  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa7(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->af.b.h  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa8(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->bc.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xa9(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->bc.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xaa(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->de.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xab(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->de.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xac(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->hl.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xad(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->hl.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xae(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  ^= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xaf(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->af.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb0(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->bc.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb1(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->bc.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb2(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->de.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb3(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->de.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb4(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->hl.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb5(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->hl.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  |= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb7(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->af.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xb8(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->bc.b.h  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.h  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->bc.b.h   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xb9(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->bc.b.l  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->bc.b.l  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->bc.b.l   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xba(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->de.b.h  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.h  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->de.b.h   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xbb(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->de.b.l  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->de.b.l  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->de.b.l   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xbc(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->hl.b.h  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.h  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->hl.b.h   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xbd(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->hl.b.l  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->hl.b.l  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->hl.b.l   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xbe(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->tmpbyte  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->tmpbyte   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xbf(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->af.b.h  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->af.b.h  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->af.b.h   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xc0(Z80EX_CONTEXT *cpu)
{
	if(!(cpu->af.b.l  & 0x40 )) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xc1(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->bc.w  =tmp.w;} ;
	 ;
	return;
}

 
static void op_0xc2(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x40 )) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xc3(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	return;
}

 
static void op_0xc4(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x40 )) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xc5(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; tmp.w= cpu->bc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;
	 ;
	return;
}

 
static void op_0xc6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xc7(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x00 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xc8(Z80EX_CONTEXT *cpu)
{
	if(cpu->af.b.l  & 0x40 ) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xc9(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xca(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x40 ) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

static void op_p_CB(Z80EX_CONTEXT *cpu)
{
	cpu->prefix=0xCB;
	cpu->noint_once=1;
}

 
static void op_0xcc(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x40 ) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xcd(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	return;
}

 
static void op_0xce(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->tmpbyte  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xcf(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x08 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xd0(Z80EX_CONTEXT *cpu)
{
	if(!(cpu->af.b.l  & 0x01 )) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xd1(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->de.w  =tmp.w;} ;
	 ;
	return;
}

 
static void op_0xd2(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x01 )) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xd3(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .w=((cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data))  + ( cpu->af.b.h  << 8 ));
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->tmpword .w  ),   cpu->af.b.h   , cpu->pwrite_cb_user_data); } ; cpu->memptr.b.l =(( cpu->tmpword .w +1) & 0xFF);	cpu->memptr.b.h = cpu->af.b.h ;} ;
	 ;
	return;
}

 
static void op_0xd4(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x01 )) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xd5(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; tmp.w= cpu->de.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;
	 ;
	return;
}

 
static void op_0xd6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xd7(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x10 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xd8(Z80EX_CONTEXT *cpu)
{
	if(cpu->af.b.l  & 0x01 ) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xd9(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD wordtemp;	wordtemp = cpu->bc.w ; cpu->bc.w  = cpu->bc_.w ; cpu->bc_.w  = wordtemp;	wordtemp = cpu->de.w ; cpu->de.w  = cpu->de_.w ; cpu->de_.w  = wordtemp;	wordtemp = cpu->hl.w ; cpu->hl.w  = cpu->hl_.w ; cpu->hl_.w  = wordtemp;} ;
	 ;
	return;
}

 
static void op_0xda(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x01 ) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xdb(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .w=((cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data))  + ( cpu->af.b.h  << 8 ));
	{	{  ;   cpu->af.b.h   =(cpu->pread_cb(cpu, (  cpu->tmpword .w  ), cpu->pread_cb_user_data)); } ; cpu->memptr.w = cpu->tmpword .w +1;} ;
	 ;
	return;
}

 
static void op_0xdc(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x01 ) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

static void op_p_DD(Z80EX_CONTEXT *cpu)
{
	cpu->prefix=0xDD;
	cpu->noint_once=1;
}

 
static void op_0xde(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->tmpbyte  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xdf(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x18 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xe0(Z80EX_CONTEXT *cpu)
{
	if(!(cpu->af.b.l  & 0x04 )) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xe1(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->hl.w  =tmp.w;} ;
	 ;
	return;
}

 
static void op_0xe2(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x04 )) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xe3(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( (cpu->sp.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( (cpu->sp.w +1) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD wordtemp= cpu->tmpword .w ;  cpu->tmpword .w = cpu->hl.w  ;  cpu->hl.w  =wordtemp;	cpu->memptr.w =wordtemp;} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->sp.w ) ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->sp.w +1) ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_0xe4(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x04 )) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xe5(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; tmp.w= cpu->hl.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;
	 ;
	return;
}

 
static void op_0xe6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	cpu->af.b.h  &= ( cpu->tmpbyte  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xe7(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x20 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xe8(Z80EX_CONTEXT *cpu)
{
	if(cpu->af.b.l  & 0x04 ) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xe9(Z80EX_CONTEXT *cpu)
{
	{ cpu->pc.w = cpu->hl.w  ; } ;
	 ;
	return;
}

 
static void op_0xea(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x04 ) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xeb(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD wordtemp= cpu->de.w  ;  cpu->de.w  = cpu->hl.w  ;  cpu->hl.w  =wordtemp;} ;
	 ;
	return;
}

 
static void op_0xec(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x04 ) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

static void op_p_ED(Z80EX_CONTEXT *cpu)
{
	cpu->prefix=0xED;
	cpu->noint_once=1;
}

 
static void op_0xee(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	cpu->af.b.h  ^= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xef(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x28 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xf0(Z80EX_CONTEXT *cpu)
{
	if(!(cpu->af.b.l  & 0x80 )) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xf1(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->af.w  =tmp.w;} ;
	 ;
	return;
}

 
static void op_0xf2(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x80 )) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xf3(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 =0;} ;
	 ;
	return;
}

 
static void op_0xf4(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(!(cpu->af.b.l  & 0x80 )) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xf5(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; tmp.w= cpu->af.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;
	 ;
	return;
}

 
static void op_0xf6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	cpu->af.b.h  |= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_0xf7(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x30 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}

 
static void op_0xf8(Z80EX_CONTEXT *cpu)
{
	if(cpu->af.b.l  & 0x80 ) {
	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	}
	else {  ;}
	return;
}

 
static void op_0xf9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->sp.w  = cpu->hl.w  ; } ;
	 ;
	return;
}

 
static void op_0xfa(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x80 ) {
	{ cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

 
static void op_0xfb(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1  = cpu->iff2  = 1;	cpu->noint_once=1;} ;
	 ;
	return;
}

 
static void op_0xfc(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	if(cpu->af.b.l  & 0x80 ) {
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ; cpu->pc.w = cpu->tmpword .w ; cpu->memptr.w = cpu->tmpword .w ;} ;
	 ;
	}
	else {  ;cpu->memptr.w = cpu->tmpword .w;}
	return;
}

static void op_p_FD(Z80EX_CONTEXT *cpu)
{
	cpu->prefix=0xFD;
	cpu->noint_once=1;
}

 
static void op_0xfe(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->tmpbyte  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->tmpbyte   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_0xff(Z80EX_CONTEXT *cpu)
{
	{	{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;	cpu->pc.w =( 0x38 );	cpu->memptr.w = cpu->pc.w ;} ;
	 ;
	return;
}



 
static z80ex_opcode_fn opcodes_base[0x100] = {
 op_0x00       , op_0x01       , op_0x02       , op_0x03       ,
 op_0x04       , op_0x05       , op_0x06       , op_0x07       ,
 op_0x08       , op_0x09       , op_0x0a       , op_0x0b       ,
 op_0x0c       , op_0x0d       , op_0x0e       , op_0x0f       ,
 op_0x10       , op_0x11       , op_0x12       , op_0x13       ,
 op_0x14       , op_0x15       , op_0x16       , op_0x17       ,
 op_0x18       , op_0x19       , op_0x1a       , op_0x1b       ,
 op_0x1c       , op_0x1d       , op_0x1e       , op_0x1f       ,
 op_0x20       , op_0x21       , op_0x22       , op_0x23       ,
 op_0x24       , op_0x25       , op_0x26       , op_0x27       ,
 op_0x28       , op_0x29       , op_0x2a       , op_0x2b       ,
 op_0x2c       , op_0x2d       , op_0x2e       , op_0x2f       ,
 op_0x30       , op_0x31       , op_0x32       , op_0x33       ,
 op_0x34       , op_0x35       , op_0x36       , op_0x37       ,
 op_0x38       , op_0x39       , op_0x3a       , op_0x3b       ,
 op_0x3c       , op_0x3d       , op_0x3e       , op_0x3f       ,
 op_0x40       , op_0x41       , op_0x42       , op_0x43       ,
 op_0x44       , op_0x45       , op_0x46       , op_0x47       ,
 op_0x48       , op_0x49       , op_0x4a       , op_0x4b       ,
 op_0x4c       , op_0x4d       , op_0x4e       , op_0x4f       ,
 op_0x50       , op_0x51       , op_0x52       , op_0x53       ,
 op_0x54       , op_0x55       , op_0x56       , op_0x57       ,
 op_0x58       , op_0x59       , op_0x5a       , op_0x5b       ,
 op_0x5c       , op_0x5d       , op_0x5e       , op_0x5f       ,
 op_0x60       , op_0x61       , op_0x62       , op_0x63       ,
 op_0x64       , op_0x65       , op_0x66       , op_0x67       ,
 op_0x68       , op_0x69       , op_0x6a       , op_0x6b       ,
 op_0x6c       , op_0x6d       , op_0x6e       , op_0x6f       ,
 op_0x70       , op_0x71       , op_0x72       , op_0x73       ,
 op_0x74       , op_0x75       , op_0x76       , op_0x77       ,
 op_0x78       , op_0x79       , op_0x7a       , op_0x7b       ,
 op_0x7c       , op_0x7d       , op_0x7e       , op_0x7f       ,
 op_0x80       , op_0x81       , op_0x82       , op_0x83       ,
 op_0x84       , op_0x85       , op_0x86       , op_0x87       ,
 op_0x88       , op_0x89       , op_0x8a       , op_0x8b       ,
 op_0x8c       , op_0x8d       , op_0x8e       , op_0x8f       ,
 op_0x90       , op_0x91       , op_0x92       , op_0x93       ,
 op_0x94       , op_0x95       , op_0x96       , op_0x97       ,
 op_0x98       , op_0x99       , op_0x9a       , op_0x9b       ,
 op_0x9c       , op_0x9d       , op_0x9e       , op_0x9f       ,
 op_0xa0       , op_0xa1       , op_0xa2       , op_0xa3       ,
 op_0xa4       , op_0xa5       , op_0xa6       , op_0xa7       ,
 op_0xa8       , op_0xa9       , op_0xaa       , op_0xab       ,
 op_0xac       , op_0xad       , op_0xae       , op_0xaf       ,
 op_0xb0       , op_0xb1       , op_0xb2       , op_0xb3       ,
 op_0xb4       , op_0xb5       , op_0xb6       , op_0xb7       ,
 op_0xb8       , op_0xb9       , op_0xba       , op_0xbb       ,
 op_0xbc       , op_0xbd       , op_0xbe       , op_0xbf       ,
 op_0xc0       , op_0xc1       , op_0xc2       , op_0xc3       ,
 op_0xc4       , op_0xc5       , op_0xc6       , op_0xc7       ,
 op_0xc8       , op_0xc9       , op_0xca       , op_p_CB       ,
 op_0xcc       , op_0xcd       , op_0xce       , op_0xcf       ,
 op_0xd0       , op_0xd1       , op_0xd2       , op_0xd3       ,
 op_0xd4       , op_0xd5       , op_0xd6       , op_0xd7       ,
 op_0xd8       , op_0xd9       , op_0xda       , op_0xdb       ,
 op_0xdc       , op_p_DD       , op_0xde       , op_0xdf       ,
 op_0xe0       , op_0xe1       , op_0xe2       , op_0xe3       ,
 op_0xe4       , op_0xe5       , op_0xe6       , op_0xe7       ,
 op_0xe8       , op_0xe9       , op_0xea       , op_0xeb       ,
 op_0xec       , op_p_ED       , op_0xee       , op_0xef       ,
 op_0xf0       , op_0xf1       , op_0xf2       , op_0xf3       ,
 op_0xf4       , op_0xf5       , op_0xf6       , op_0xf7       ,
 op_0xf8       , op_0xf9       , op_0xfa       , op_0xfb       ,
 op_0xfc       , op_p_FD       , op_0xfe       , op_0xff       
};
# 48 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "../../libayfly/z80ex/opcodes/opcodes_dd.cpp" 1
 

 
static void op_DD_0x09(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->ix.w  ) + ( cpu->bc.w  ); Z80EX_BYTE lookup = ( (  ( cpu->ix.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->bc.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->ix.w  +1;	( cpu->ix.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_DD_0x19(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->ix.w  ) + ( cpu->de.w  ); Z80EX_BYTE lookup = ( (  ( cpu->ix.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->de.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->ix.w  +1;	( cpu->ix.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_DD_0x21(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->ix.w  = cpu->tmpword .w ; } ;
	 ;
	return;
}

 
static void op_DD_0x22(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpword .w = cpu->ix.w  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w+1 ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x23(Z80EX_CONTEXT *cpu)
{
	{	( cpu->ix.w  )++;} ;
	 ;
	return;
}

 
static void op_DD_0x24(Z80EX_CONTEXT *cpu)
{
	{	( cpu->ix.b.h  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->ix.b.h  )==0x80 ? 0x04   : 0 ) |	( ( cpu->ix.b.h  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->ix.b.h  )];} ;
	 ;
	return;
}

 
static void op_DD_0x25(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->ix.b.h  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->ix.b.h  )--;	cpu->af.b.l  |= ( ( cpu->ix.b.h  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->ix.b.h  ];} ;
	 ;
	return;
}

 
static void op_DD_0x26(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->ix.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x29(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->ix.w  ) + ( cpu->ix.w  ); Z80EX_BYTE lookup = ( (  ( cpu->ix.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->ix.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->ix.w  +1;	( cpu->ix.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_DD_0x2a(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w+1 ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->ix.w  = cpu->tmpword .w ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_DD_0x2b(Z80EX_CONTEXT *cpu)
{
	{	( cpu->ix.w  )--;} ;
	 ;
	return;
}

 
static void op_DD_0x2c(Z80EX_CONTEXT *cpu)
{
	{	( cpu->ix.b.l  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->ix.b.l  )==0x80 ? 0x04   : 0 ) |	( ( cpu->ix.b.l  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->ix.b.l  )];} ;
	 ;
	return;
}

 
static void op_DD_0x2d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->ix.b.l  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->ix.b.l  )--;	cpu->af.b.l  |= ( ( cpu->ix.b.l  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->ix.b.l  ];} ;
	 ;
	return;
}

 
static void op_DD_0x2e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->ix.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x34(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->tmpbyte  )==0x80 ? 0x04   : 0 ) |	( ( cpu->tmpbyte  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x35(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->tmpbyte  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->tmpbyte  )--;	cpu->af.b.l  |= ( ( cpu->tmpbyte  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->tmpbyte  ];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x36(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpbyte  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x39(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->ix.w  ) + ( cpu->sp.w  ); Z80EX_BYTE lookup = ( (  ( cpu->ix.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->sp.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->ix.w  +1;	( cpu->ix.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_DD_0x44(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->ix.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x45(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->ix.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x46(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x4c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->ix.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x4d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->ix.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x4e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x54(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->ix.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x55(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->ix.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x56(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x5c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->ix.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x5d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->ix.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x5e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x60(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.h  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x61(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.h  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x62(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.h  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x63(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.h  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x64(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.h  = cpu->ix.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x65(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.h  = cpu->ix.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x66(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x67(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.h  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x68(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.l  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x69(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.l  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x6a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.l  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x6b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.l  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x6c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.l  = cpu->ix.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x6d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.l  = cpu->ix.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x6e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x6f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->ix.b.l  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x70(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->bc.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x71(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->bc.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x72(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->de.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x73(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->de.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x74(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->hl.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x75(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->hl.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x77(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->af.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0x7c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->ix.b.h  ; } ;
	 ;
	return;
}

 
static void op_DD_0x7d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->ix.b.l  ; } ;
	 ;
	return;
}

 
static void op_DD_0x7e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_DD_0x84(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->ix.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.h  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x85(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->ix.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.l  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x86(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x8c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->ix.b.h  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.h  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x8d(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->ix.b.l  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.l  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x8e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->tmpbyte  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x94(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->ix.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.h  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x95(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->ix.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.l  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x96(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x9c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->ix.b.h  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.h  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x9d(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->ix.b.l  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.l  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0x9e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->tmpbyte  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xa4(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->ix.b.h  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xa5(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->ix.b.l  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xa6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  &= ( cpu->tmpbyte  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xac(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->ix.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xad(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->ix.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xae(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  ^= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xb4(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->ix.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xb5(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->ix.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xb6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  |= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_DD_0xbc(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->ix.b.h  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.h  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->ix.b.h   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_DD_0xbd(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->ix.b.l  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->ix.b.l  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->ix.b.l   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_DD_0xbe(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->tmpbyte  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->tmpbyte   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}


 
static void op_DD_0xe1(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->ix.w  =tmp.w;} ;
	 ;
	return;
}

 
static void op_DD_0xe3(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( (cpu->sp.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( (cpu->sp.w +1) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD wordtemp= cpu->tmpword .w ;  cpu->tmpword .w = cpu->ix.w  ;  cpu->ix.w  =wordtemp;	cpu->memptr.w =wordtemp;} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->sp.w ) ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->sp.w +1) ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DD_0xe5(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; tmp.w= cpu->ix.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;
	 ;
	return;
}

 
static void op_DD_0xe9(Z80EX_CONTEXT *cpu)
{
	{ cpu->pc.w = cpu->ix.w  ; } ;
	 ;
	return;
}

 
static void op_DD_0xf9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->sp.w  = cpu->ix.w  ; } ;
	 ;
	return;
}



 
static z80ex_opcode_fn opcodes_dd[0x100] = {
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_DD_0x09    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_DD_0x19    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_DD_0x21    , op_DD_0x22    , op_DD_0x23    ,
 op_DD_0x24    , op_DD_0x25    , op_DD_0x26    , 0L           ,
 0L           , op_DD_0x29    , op_DD_0x2a    , op_DD_0x2b    ,
 op_DD_0x2c    , op_DD_0x2d    , op_DD_0x2e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x34    , op_DD_0x35    , op_DD_0x36    , 0L           ,
 0L           , op_DD_0x39    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x44    , op_DD_0x45    , op_DD_0x46    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x4c    , op_DD_0x4d    , op_DD_0x4e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x54    , op_DD_0x55    , op_DD_0x56    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x5c    , op_DD_0x5d    , op_DD_0x5e    , 0L           ,
 op_DD_0x60    , op_DD_0x61    , op_DD_0x62    , op_DD_0x63    ,
 op_DD_0x64    , op_DD_0x65    , op_DD_0x66    , op_DD_0x67    ,
 op_DD_0x68    , op_DD_0x69    , op_DD_0x6a    , op_DD_0x6b    ,
 op_DD_0x6c    , op_DD_0x6d    , op_DD_0x6e    , op_DD_0x6f    ,
 op_DD_0x70    , op_DD_0x71    , op_DD_0x72    , op_DD_0x73    ,
 op_DD_0x74    , op_DD_0x75    , 0L           , op_DD_0x77    ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x7c    , op_DD_0x7d    , op_DD_0x7e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x84    , op_DD_0x85    , op_DD_0x86    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x8c    , op_DD_0x8d    , op_DD_0x8e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x94    , op_DD_0x95    , op_DD_0x96    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0x9c    , op_DD_0x9d    , op_DD_0x9e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0xa4    , op_DD_0xa5    , op_DD_0xa6    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0xac    , op_DD_0xad    , op_DD_0xae    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0xb4    , op_DD_0xb5    , op_DD_0xb6    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_DD_0xbc    , op_DD_0xbd    , op_DD_0xbe    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_DD_0xe1    , 0L           , op_DD_0xe3    ,
 0L           , op_DD_0xe5    , 0L           , 0L           ,
 0L           , op_DD_0xe9    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_DD_0xf9    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           
};
# 49 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "../../libayfly/z80ex/opcodes/opcodes_fd.cpp" 1
 

 
static void op_FD_0x09(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->iy.w  ) + ( cpu->bc.w  ); Z80EX_BYTE lookup = ( (  ( cpu->iy.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->bc.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->iy.w  +1;	( cpu->iy.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_FD_0x19(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->iy.w  ) + ( cpu->de.w  ); Z80EX_BYTE lookup = ( (  ( cpu->iy.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->de.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->iy.w  +1;	( cpu->iy.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_FD_0x21(Z80EX_CONTEXT *cpu)
{
	cpu->tmpword .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpword .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->iy.w  = cpu->tmpword .w ; } ;
	 ;
	return;
}

 
static void op_FD_0x22(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpword .w = cpu->iy.w  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w+1 ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x23(Z80EX_CONTEXT *cpu)
{
	{	( cpu->iy.w  )++;} ;
	 ;
	return;
}

 
static void op_FD_0x24(Z80EX_CONTEXT *cpu)
{
	{	( cpu->iy.b.h  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->iy.b.h  )==0x80 ? 0x04   : 0 ) |	( ( cpu->iy.b.h  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->iy.b.h  )];} ;
	 ;
	return;
}

 
static void op_FD_0x25(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->iy.b.h  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->iy.b.h  )--;	cpu->af.b.l  |= ( ( cpu->iy.b.h  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->iy.b.h  ];} ;
	 ;
	return;
}

 
static void op_FD_0x26(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->iy.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x29(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->iy.w  ) + ( cpu->iy.w  ); Z80EX_BYTE lookup = ( (  ( cpu->iy.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->iy.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->iy.w  +1;	( cpu->iy.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_FD_0x2a(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w+1 ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->iy.w  = cpu->tmpword .w ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_FD_0x2b(Z80EX_CONTEXT *cpu)
{
	{	( cpu->iy.w  )--;} ;
	 ;
	return;
}

 
static void op_FD_0x2c(Z80EX_CONTEXT *cpu)
{
	{	( cpu->iy.b.l  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->iy.b.l  )==0x80 ? 0x04   : 0 ) |	( ( cpu->iy.b.l  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->iy.b.l  )];} ;
	 ;
	return;
}

 
static void op_FD_0x2d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->iy.b.l  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->iy.b.l  )--;	cpu->af.b.l  |= ( ( cpu->iy.b.l  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->iy.b.l  ];} ;
	 ;
	return;
}

 
static void op_FD_0x2e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->iy.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x34(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  )++;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->tmpbyte  )==0x80 ? 0x04   : 0 ) |	( ( cpu->tmpbyte  )&0x0f ? 0 : 0x10  ) | sz53_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x35(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( ( cpu->tmpbyte  )&0x0f ? 0 : 0x10  ) | 0x02 ;	( cpu->tmpbyte  )--;	cpu->af.b.l  |= ( ( cpu->tmpbyte  )==0x7f ? 0x04   : 0 ) | sz53_table[ cpu->tmpbyte  ];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x36(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpbyte  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x39(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp = ( cpu->iy.w  ) + ( cpu->sp.w  ); Z80EX_BYTE lookup = ( (  ( cpu->iy.w  ) & 0x0800 ) >> 11 ) | ( (  ( cpu->sp.w  ) & 0x0800 ) >> 10 ) | ( ( add16temp & 0x0800 ) >>  9 ); cpu->memptr.w = cpu->iy.w  +1;	( cpu->iy.w  ) = add16temp;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x04   | 0x40  | 0x80  ) ) |	( add16temp & 0x10000 ? 0x01  : 0 )|	( ( add16temp >> 8 ) & ( 0x08  | 0x20  ) ) |	halfcarry_add_table[lookup];} ;
	 ;
	return;
}

 
static void op_FD_0x44(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->iy.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x45(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h  = cpu->iy.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x46(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x4c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->iy.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x4d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l  = cpu->iy.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x4e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x54(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->iy.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x55(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h  = cpu->iy.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x56(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x5c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->iy.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x5d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l  = cpu->iy.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x5e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x60(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.h  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x61(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.h  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x62(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.h  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x63(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.h  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x64(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.h  = cpu->iy.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x65(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.h  = cpu->iy.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x66(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x67(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.h  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x68(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.l  = cpu->bc.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x69(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.l  = cpu->bc.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x6a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.l  = cpu->de.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x6b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.l  = cpu->de.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x6c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.l  = cpu->iy.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x6d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.l  = cpu->iy.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x6e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x6f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->iy.b.l  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x70(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->bc.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x71(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->bc.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x72(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->de.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x73(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->de.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x74(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->hl.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x75(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->hl.b.l  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x77(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{	 cpu->tmpbyte  = cpu->af.b.h  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0x7c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->iy.b.h  ; } ;
	 ;
	return;
}

 
static void op_FD_0x7d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h  = cpu->iy.b.l  ; } ;
	 ;
	return;
}

 
static void op_FD_0x7e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	 ;
	return;
}

 
static void op_FD_0x84(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->iy.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.h  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x85(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->iy.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.l  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x86(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD addtemp = cpu->af.b.h  + ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( addtemp & 0x88 ) >> 1 ); cpu->af.b.h =addtemp;	cpu->af.b.l  = ( addtemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x8c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->iy.b.h  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.h  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x8d(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->iy.b.l  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.l  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x8e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD adctemp = cpu->af.b.h  + ( cpu->tmpbyte  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( adctemp & 0x88 ) >> 1 ); cpu->af.b.h =adctemp;	cpu->af.b.l  = ( adctemp & 0x100 ? 0x01  : 0 ) |	halfcarry_add_table[lookup & 0x07] | overflow_add_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x94(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->iy.b.h  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.h  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x95(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->iy.b.l  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.l  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x96(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( cpu->tmpbyte  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x9c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->iy.b.h  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.h  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x9d(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->iy.b.l  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.l  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0x9e(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD sbctemp = cpu->af.b.h  - ( cpu->tmpbyte  ) - ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( ( sbctemp & 0x88 ) >> 1 ); cpu->af.b.h =sbctemp;	cpu->af.b.l  = ( sbctemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xa4(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->iy.b.h  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xa5(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  &= ( cpu->iy.b.l  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xa6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  &= ( cpu->tmpbyte  );	cpu->af.b.l  = 0x10  | sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xac(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->iy.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xad(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  ^= ( cpu->iy.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xae(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  ^= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xb4(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->iy.b.h  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xb5(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h  |= ( cpu->iy.b.l  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xb6(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.h  |= ( cpu->tmpbyte  );	cpu->af.b.l  = sz53p_table[cpu->af.b.h ];} ;
	 ;
	return;
}

 
static void op_FD_0xbc(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->iy.b.h  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.h  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->iy.b.h   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_FD_0xbd(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->iy.b.l  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->iy.b.l  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->iy.b.l   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}

 
static void op_FD_0xbe(Z80EX_CONTEXT *cpu)
{
	cpu->tmpbyte = (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpbyte_s =(cpu->tmpbyte  & 0x80)? -(((~cpu->tmpbyte ) & 0x7f)+1): cpu->tmpbyte ;
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD cptemp = cpu->af.b.h  -  cpu->tmpbyte  ; Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( cpu->tmpbyte  ) & 0x88 ) >> 2 ) | ( (  cptemp & 0x88 ) >> 1 ); cpu->af.b.l  = ( cptemp & 0x100 ? 0x01  : ( cptemp ? 0 : 0x40  ) ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] |	overflow_sub_table[lookup >> 4] |	(  cpu->tmpbyte   & ( 0x08  | 0x20  ) ) |	( cptemp & 0x80  );} ;
	 ;
	return;
}


 
static void op_FD_0xe1(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->iy.w  =tmp.w;} ;
	 ;
	return;
}

 
static void op_FD_0xe3(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( (cpu->sp.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( (cpu->sp.w +1) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_WORD wordtemp= cpu->tmpword .w ;  cpu->tmpword .w = cpu->iy.w  ;  cpu->iy.w  =wordtemp;	cpu->memptr.w =wordtemp;} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->sp.w ) ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->sp.w +1) ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FD_0xe5(Z80EX_CONTEXT *cpu)
{
	{	regpair tmp; tmp.w= cpu->iy.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;
	 ;
	return;
}

 
static void op_FD_0xe9(Z80EX_CONTEXT *cpu)
{
	{ cpu->pc.w = cpu->iy.w  ; } ;
	 ;
	return;
}

 
static void op_FD_0xf9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->sp.w  = cpu->iy.w  ; } ;
	 ;
	return;
}



 
static z80ex_opcode_fn opcodes_fd[0x100] = {
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_FD_0x09    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_FD_0x19    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_FD_0x21    , op_FD_0x22    , op_FD_0x23    ,
 op_FD_0x24    , op_FD_0x25    , op_FD_0x26    , 0L           ,
 0L           , op_FD_0x29    , op_FD_0x2a    , op_FD_0x2b    ,
 op_FD_0x2c    , op_FD_0x2d    , op_FD_0x2e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x34    , op_FD_0x35    , op_FD_0x36    , 0L           ,
 0L           , op_FD_0x39    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x44    , op_FD_0x45    , op_FD_0x46    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x4c    , op_FD_0x4d    , op_FD_0x4e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x54    , op_FD_0x55    , op_FD_0x56    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x5c    , op_FD_0x5d    , op_FD_0x5e    , 0L           ,
 op_FD_0x60    , op_FD_0x61    , op_FD_0x62    , op_FD_0x63    ,
 op_FD_0x64    , op_FD_0x65    , op_FD_0x66    , op_FD_0x67    ,
 op_FD_0x68    , op_FD_0x69    , op_FD_0x6a    , op_FD_0x6b    ,
 op_FD_0x6c    , op_FD_0x6d    , op_FD_0x6e    , op_FD_0x6f    ,
 op_FD_0x70    , op_FD_0x71    , op_FD_0x72    , op_FD_0x73    ,
 op_FD_0x74    , op_FD_0x75    , 0L           , op_FD_0x77    ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x7c    , op_FD_0x7d    , op_FD_0x7e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x84    , op_FD_0x85    , op_FD_0x86    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x8c    , op_FD_0x8d    , op_FD_0x8e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x94    , op_FD_0x95    , op_FD_0x96    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0x9c    , op_FD_0x9d    , op_FD_0x9e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0xa4    , op_FD_0xa5    , op_FD_0xa6    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0xac    , op_FD_0xad    , op_FD_0xae    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0xb4    , op_FD_0xb5    , op_FD_0xb6    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_FD_0xbc    , op_FD_0xbd    , op_FD_0xbe    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_FD_0xe1    , 0L           , op_FD_0xe3    ,
 0L           , op_FD_0xe5    , 0L           , 0L           ,
 0L           , op_FD_0xe9    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , op_FD_0xf9    , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           
};
# 50 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "../../libayfly/z80ex/opcodes/opcodes_cb.cpp" 1
 

 
static void op_CB_0x00(Z80EX_CONTEXT *cpu)
{
	{	( cpu->bc.b.h  ) = ( ( cpu->bc.b.h  )<<1 ) | ( ( cpu->bc.b.h  )>>7 );	cpu->af.b.l  = ( ( cpu->bc.b.h  ) & 0x01  ) | sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x01(Z80EX_CONTEXT *cpu)
{
	{	( cpu->bc.b.l  ) = ( ( cpu->bc.b.l  )<<1 ) | ( ( cpu->bc.b.l  )>>7 );	cpu->af.b.l  = ( ( cpu->bc.b.l  ) & 0x01  ) | sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x02(Z80EX_CONTEXT *cpu)
{
	{	( cpu->de.b.h  ) = ( ( cpu->de.b.h  )<<1 ) | ( ( cpu->de.b.h  )>>7 );	cpu->af.b.l  = ( ( cpu->de.b.h  ) & 0x01  ) | sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x03(Z80EX_CONTEXT *cpu)
{
	{	( cpu->de.b.l  ) = ( ( cpu->de.b.l  )<<1 ) | ( ( cpu->de.b.l  )>>7 );	cpu->af.b.l  = ( ( cpu->de.b.l  ) & 0x01  ) | sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x04(Z80EX_CONTEXT *cpu)
{
	{	( cpu->hl.b.h  ) = ( ( cpu->hl.b.h  )<<1 ) | ( ( cpu->hl.b.h  )>>7 );	cpu->af.b.l  = ( ( cpu->hl.b.h  ) & 0x01  ) | sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x05(Z80EX_CONTEXT *cpu)
{
	{	( cpu->hl.b.l  ) = ( ( cpu->hl.b.l  )<<1 ) | ( ( cpu->hl.b.l  )>>7 );	cpu->af.b.l  = ( ( cpu->hl.b.l  ) & 0x01  ) | sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x06(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x07(Z80EX_CONTEXT *cpu)
{
	{	( cpu->af.b.h  ) = ( ( cpu->af.b.h  )<<1 ) | ( ( cpu->af.b.h  )>>7 );	cpu->af.b.l  = ( ( cpu->af.b.h  ) & 0x01  ) | sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x08(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.h  ) & 0x01 ;	( cpu->bc.b.h  ) = ( ( cpu->bc.b.h  )>>1 ) | ( ( cpu->bc.b.h  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x09(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.l  ) & 0x01 ;	( cpu->bc.b.l  ) = ( ( cpu->bc.b.l  )>>1 ) | ( ( cpu->bc.b.l  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x0a(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.h  ) & 0x01 ;	( cpu->de.b.h  ) = ( ( cpu->de.b.h  )>>1 ) | ( ( cpu->de.b.h  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x0b(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.l  ) & 0x01 ;	( cpu->de.b.l  ) = ( ( cpu->de.b.l  )>>1 ) | ( ( cpu->de.b.l  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x0c(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.h  ) & 0x01 ;	( cpu->hl.b.h  ) = ( ( cpu->hl.b.h  )>>1 ) | ( ( cpu->hl.b.h  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x0d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.l  ) & 0x01 ;	( cpu->hl.b.l  ) = ( ( cpu->hl.b.l  )>>1 ) | ( ( cpu->hl.b.l  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x0e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x0f(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.h  ) & 0x01 ;	( cpu->af.b.h  ) = ( ( cpu->af.b.h  )>>1 ) | ( ( cpu->af.b.h  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x10(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rltemp = ( cpu->bc.b.h  ); ( cpu->bc.b.h  ) = ( ( cpu->bc.b.h  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x11(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rltemp = ( cpu->bc.b.l  ); ( cpu->bc.b.l  ) = ( ( cpu->bc.b.l  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x12(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rltemp = ( cpu->de.b.h  ); ( cpu->de.b.h  ) = ( ( cpu->de.b.h  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x13(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rltemp = ( cpu->de.b.l  ); ( cpu->de.b.l  ) = ( ( cpu->de.b.l  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x14(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rltemp = ( cpu->hl.b.h  ); ( cpu->hl.b.h  ) = ( ( cpu->hl.b.h  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x15(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rltemp = ( cpu->hl.b.l  ); ( cpu->hl.b.l  ) = ( ( cpu->hl.b.l  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x16(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x17(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rltemp = ( cpu->af.b.h  ); ( cpu->af.b.h  ) = ( ( cpu->af.b.h  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x18(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rrtemp = ( cpu->bc.b.h  ); ( cpu->bc.b.h  ) = ( ( cpu->bc.b.h  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x19(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rrtemp = ( cpu->bc.b.l  ); ( cpu->bc.b.l  ) = ( ( cpu->bc.b.l  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x1a(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rrtemp = ( cpu->de.b.h  ); ( cpu->de.b.h  ) = ( ( cpu->de.b.h  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x1b(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rrtemp = ( cpu->de.b.l  ); ( cpu->de.b.l  ) = ( ( cpu->de.b.l  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x1c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rrtemp = ( cpu->hl.b.h  ); ( cpu->hl.b.h  ) = ( ( cpu->hl.b.h  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x1d(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rrtemp = ( cpu->hl.b.l  ); ( cpu->hl.b.l  ) = ( ( cpu->hl.b.l  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x1e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x1f(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE rrtemp = ( cpu->af.b.h  ); ( cpu->af.b.h  ) = ( ( cpu->af.b.h  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x20(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.h  ) >> 7;	( cpu->bc.b.h  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x21(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.l  ) >> 7;	( cpu->bc.b.l  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x22(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.h  ) >> 7;	( cpu->de.b.h  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x23(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.l  ) >> 7;	( cpu->de.b.l  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x24(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.h  ) >> 7;	( cpu->hl.b.h  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x25(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.l  ) >> 7;	( cpu->hl.b.l  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x26(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x27(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.h  ) >> 7;	( cpu->af.b.h  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x28(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.h  ) & 0x01 ;	( cpu->bc.b.h  ) = ( ( cpu->bc.b.h  ) & 0x80 ) | ( ( cpu->bc.b.h  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x29(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.l  ) & 0x01 ;	( cpu->bc.b.l  ) = ( ( cpu->bc.b.l  ) & 0x80 ) | ( ( cpu->bc.b.l  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x2a(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.h  ) & 0x01 ;	( cpu->de.b.h  ) = ( ( cpu->de.b.h  ) & 0x80 ) | ( ( cpu->de.b.h  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x2b(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.l  ) & 0x01 ;	( cpu->de.b.l  ) = ( ( cpu->de.b.l  ) & 0x80 ) | ( ( cpu->de.b.l  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x2c(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.h  ) & 0x01 ;	( cpu->hl.b.h  ) = ( ( cpu->hl.b.h  ) & 0x80 ) | ( ( cpu->hl.b.h  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x2d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.l  ) & 0x01 ;	( cpu->hl.b.l  ) = ( ( cpu->hl.b.l  ) & 0x80 ) | ( ( cpu->hl.b.l  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x2e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x2f(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.h  ) & 0x01 ;	( cpu->af.b.h  ) = ( ( cpu->af.b.h  ) & 0x80 ) | ( ( cpu->af.b.h  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x30(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.h  ) >> 7;	( cpu->bc.b.h  ) = ( ( cpu->bc.b.h  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x31(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.l  ) >> 7;	( cpu->bc.b.l  ) = ( ( cpu->bc.b.l  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x32(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.h  ) >> 7;	( cpu->de.b.h  ) = ( ( cpu->de.b.h  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x33(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.l  ) >> 7;	( cpu->de.b.l  ) = ( ( cpu->de.b.l  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x34(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.h  ) >> 7;	( cpu->hl.b.h  ) = ( ( cpu->hl.b.h  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x35(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.l  ) >> 7;	( cpu->hl.b.l  ) = ( ( cpu->hl.b.l  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x36(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x37(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.h  ) >> 7;	( cpu->af.b.h  ) = ( ( cpu->af.b.h  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x38(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.h  ) & 0x01 ;	( cpu->bc.b.h  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x39(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->bc.b.l  ) & 0x01 ;	( cpu->bc.b.l  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->bc.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x3a(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.h  ) & 0x01 ;	( cpu->de.b.h  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->de.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x3b(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->de.b.l  ) & 0x01 ;	( cpu->de.b.l  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->de.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x3c(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.h  ) & 0x01 ;	( cpu->hl.b.h  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x3d(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->hl.b.l  ) & 0x01 ;	( cpu->hl.b.l  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->hl.b.l  )];} ;
	 ;
	return;
}

 
static void op_CB_0x3e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x3f(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.l  = ( cpu->af.b.h  ) & 0x01 ;	( cpu->af.b.h  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->af.b.h  )];} ;
	 ;
	return;
}

 
static void op_CB_0x40(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 0 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x41(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 0 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x42(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 0 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x43(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 0 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x44(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 0 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x45(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 0 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x46(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 0 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x47(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 0 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x48(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 1 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x49(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 1 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x4a(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 1 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x4b(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 1 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x4c(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 1 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x4d(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 1 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x4e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 1 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x4f(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 1 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x50(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 2 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x51(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 2 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x52(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 2 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x53(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 2 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x54(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 2 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x55(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 2 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x56(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 2 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x57(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 2 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x58(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 3 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x59(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 3 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x5a(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 3 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x5b(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 3 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x5c(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 3 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x5d(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 3 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x5e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 3 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x5f(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 3 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x60(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 4 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x61(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 4 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x62(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 4 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x63(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 4 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x64(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 4 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x65(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 4 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x66(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 4 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x67(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 4 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x68(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 5 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x69(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 5 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x6a(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 5 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x6b(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 5 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x6c(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 5 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x6d(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 5 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x6e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 5 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x6f(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 5 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x70(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 6 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x71(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 6 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x72(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 6 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x73(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 6 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x74(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 6 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x75(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 6 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x76(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 6 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x77(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 6 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x78(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.h  ) & (0x01 << ( 7 ))] | (( cpu->bc.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x79(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->bc.b.l  ) & (0x01 << ( 7 ))] | (( cpu->bc.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x7a(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.h  ) & (0x01 << ( 7 ))] | (( cpu->de.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x7b(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->de.b.l  ) & (0x01 << ( 7 ))] | (( cpu->de.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x7c(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.h  ) & (0x01 << ( 7 ))] | (( cpu->hl.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x7d(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->hl.b.l  ) & (0x01 << ( 7 ))] | (( cpu->hl.b.l  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x7e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 7 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x7f(Z80EX_CONTEXT *cpu)
{
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | sz53p_table[( cpu->af.b.h  ) & (0x01 << ( 7 ))] | (( cpu->af.b.h  ) & 0x28); } ;
	 ;
	return;
}

 
static void op_CB_0x80(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0x81(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0x82(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0x83(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0x84(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0x85(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0x86(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x87(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0x88(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0x89(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0x8a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0x8b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0x8c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0x8d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0x8e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x8f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0x90(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0x91(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0x92(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0x93(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0x94(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0x95(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0x96(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x97(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0x98(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0x99(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0x9a(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0x9b(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0x9c(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0x9d(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0x9e(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0x9f(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xa0(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xa1(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xa2(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xa3(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xa4(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xa5(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xa6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xa7(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xa8(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xa9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xaa(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xab(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xac(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xad(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xae(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xaf(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xb0(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xb1(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xb2(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xb3(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xb4(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xb5(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xb6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xb7(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xb8(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   &= ~(1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xb9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   &= ~(1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xba(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   &= ~(1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xbb(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   &= ~(1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xbc(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   &= ~(1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xbd(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   &= ~(1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xbe(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xbf(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   &= ~(1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xc0(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0xc1(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0xc2(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0xc3(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0xc4(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0xc5(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0xc6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xc7(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  0 );} ;
	 ;
	return;
}

 
static void op_CB_0xc8(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0xc9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0xca(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0xcb(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0xcc(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0xcd(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0xce(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xcf(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  1 );} ;
	 ;
	return;
}

 
static void op_CB_0xd0(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0xd1(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0xd2(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0xd3(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0xd4(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0xd5(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0xd6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xd7(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  2 );} ;
	 ;
	return;
}

 
static void op_CB_0xd8(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xd9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xda(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xdb(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xdc(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xdd(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xde(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xdf(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  3 );} ;
	 ;
	return;
}

 
static void op_CB_0xe0(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xe1(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xe2(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xe3(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xe4(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xe5(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xe6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xe7(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  4 );} ;
	 ;
	return;
}

 
static void op_CB_0xe8(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xe9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xea(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xeb(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xec(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xed(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xee(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xef(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  5 );} ;
	 ;
	return;
}

 
static void op_CB_0xf0(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xf1(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xf2(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xf3(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xf4(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xf5(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xf6(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xf7(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  6 );} ;
	 ;
	return;
}

 
static void op_CB_0xf8(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.h   |= (1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xf9(Z80EX_CONTEXT *cpu)
{
	{	 cpu->bc.b.l   |= (1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xfa(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.h   |= (1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xfb(Z80EX_CONTEXT *cpu)
{
	{	 cpu->de.b.l   |= (1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xfc(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.h   |= (1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xfd(Z80EX_CONTEXT *cpu)
{
	{	 cpu->hl.b.l   |= (1 <<  7 );} ;
	 ;
	return;
}

 
static void op_CB_0xfe(Z80EX_CONTEXT *cpu)
{
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->hl.w ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->hl.w ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_CB_0xff(Z80EX_CONTEXT *cpu)
{
	{	 cpu->af.b.h   |= (1 <<  7 );} ;
	 ;
	return;
}



 
static z80ex_opcode_fn opcodes_cb[0x100] = {
 op_CB_0x00    , op_CB_0x01    , op_CB_0x02    , op_CB_0x03    ,
 op_CB_0x04    , op_CB_0x05    , op_CB_0x06    , op_CB_0x07    ,
 op_CB_0x08    , op_CB_0x09    , op_CB_0x0a    , op_CB_0x0b    ,
 op_CB_0x0c    , op_CB_0x0d    , op_CB_0x0e    , op_CB_0x0f    ,
 op_CB_0x10    , op_CB_0x11    , op_CB_0x12    , op_CB_0x13    ,
 op_CB_0x14    , op_CB_0x15    , op_CB_0x16    , op_CB_0x17    ,
 op_CB_0x18    , op_CB_0x19    , op_CB_0x1a    , op_CB_0x1b    ,
 op_CB_0x1c    , op_CB_0x1d    , op_CB_0x1e    , op_CB_0x1f    ,
 op_CB_0x20    , op_CB_0x21    , op_CB_0x22    , op_CB_0x23    ,
 op_CB_0x24    , op_CB_0x25    , op_CB_0x26    , op_CB_0x27    ,
 op_CB_0x28    , op_CB_0x29    , op_CB_0x2a    , op_CB_0x2b    ,
 op_CB_0x2c    , op_CB_0x2d    , op_CB_0x2e    , op_CB_0x2f    ,
 op_CB_0x30    , op_CB_0x31    , op_CB_0x32    , op_CB_0x33    ,
 op_CB_0x34    , op_CB_0x35    , op_CB_0x36    , op_CB_0x37    ,
 op_CB_0x38    , op_CB_0x39    , op_CB_0x3a    , op_CB_0x3b    ,
 op_CB_0x3c    , op_CB_0x3d    , op_CB_0x3e    , op_CB_0x3f    ,
 op_CB_0x40    , op_CB_0x41    , op_CB_0x42    , op_CB_0x43    ,
 op_CB_0x44    , op_CB_0x45    , op_CB_0x46    , op_CB_0x47    ,
 op_CB_0x48    , op_CB_0x49    , op_CB_0x4a    , op_CB_0x4b    ,
 op_CB_0x4c    , op_CB_0x4d    , op_CB_0x4e    , op_CB_0x4f    ,
 op_CB_0x50    , op_CB_0x51    , op_CB_0x52    , op_CB_0x53    ,
 op_CB_0x54    , op_CB_0x55    , op_CB_0x56    , op_CB_0x57    ,
 op_CB_0x58    , op_CB_0x59    , op_CB_0x5a    , op_CB_0x5b    ,
 op_CB_0x5c    , op_CB_0x5d    , op_CB_0x5e    , op_CB_0x5f    ,
 op_CB_0x60    , op_CB_0x61    , op_CB_0x62    , op_CB_0x63    ,
 op_CB_0x64    , op_CB_0x65    , op_CB_0x66    , op_CB_0x67    ,
 op_CB_0x68    , op_CB_0x69    , op_CB_0x6a    , op_CB_0x6b    ,
 op_CB_0x6c    , op_CB_0x6d    , op_CB_0x6e    , op_CB_0x6f    ,
 op_CB_0x70    , op_CB_0x71    , op_CB_0x72    , op_CB_0x73    ,
 op_CB_0x74    , op_CB_0x75    , op_CB_0x76    , op_CB_0x77    ,
 op_CB_0x78    , op_CB_0x79    , op_CB_0x7a    , op_CB_0x7b    ,
 op_CB_0x7c    , op_CB_0x7d    , op_CB_0x7e    , op_CB_0x7f    ,
 op_CB_0x80    , op_CB_0x81    , op_CB_0x82    , op_CB_0x83    ,
 op_CB_0x84    , op_CB_0x85    , op_CB_0x86    , op_CB_0x87    ,
 op_CB_0x88    , op_CB_0x89    , op_CB_0x8a    , op_CB_0x8b    ,
 op_CB_0x8c    , op_CB_0x8d    , op_CB_0x8e    , op_CB_0x8f    ,
 op_CB_0x90    , op_CB_0x91    , op_CB_0x92    , op_CB_0x93    ,
 op_CB_0x94    , op_CB_0x95    , op_CB_0x96    , op_CB_0x97    ,
 op_CB_0x98    , op_CB_0x99    , op_CB_0x9a    , op_CB_0x9b    ,
 op_CB_0x9c    , op_CB_0x9d    , op_CB_0x9e    , op_CB_0x9f    ,
 op_CB_0xa0    , op_CB_0xa1    , op_CB_0xa2    , op_CB_0xa3    ,
 op_CB_0xa4    , op_CB_0xa5    , op_CB_0xa6    , op_CB_0xa7    ,
 op_CB_0xa8    , op_CB_0xa9    , op_CB_0xaa    , op_CB_0xab    ,
 op_CB_0xac    , op_CB_0xad    , op_CB_0xae    , op_CB_0xaf    ,
 op_CB_0xb0    , op_CB_0xb1    , op_CB_0xb2    , op_CB_0xb3    ,
 op_CB_0xb4    , op_CB_0xb5    , op_CB_0xb6    , op_CB_0xb7    ,
 op_CB_0xb8    , op_CB_0xb9    , op_CB_0xba    , op_CB_0xbb    ,
 op_CB_0xbc    , op_CB_0xbd    , op_CB_0xbe    , op_CB_0xbf    ,
 op_CB_0xc0    , op_CB_0xc1    , op_CB_0xc2    , op_CB_0xc3    ,
 op_CB_0xc4    , op_CB_0xc5    , op_CB_0xc6    , op_CB_0xc7    ,
 op_CB_0xc8    , op_CB_0xc9    , op_CB_0xca    , op_CB_0xcb    ,
 op_CB_0xcc    , op_CB_0xcd    , op_CB_0xce    , op_CB_0xcf    ,
 op_CB_0xd0    , op_CB_0xd1    , op_CB_0xd2    , op_CB_0xd3    ,
 op_CB_0xd4    , op_CB_0xd5    , op_CB_0xd6    , op_CB_0xd7    ,
 op_CB_0xd8    , op_CB_0xd9    , op_CB_0xda    , op_CB_0xdb    ,
 op_CB_0xdc    , op_CB_0xdd    , op_CB_0xde    , op_CB_0xdf    ,
 op_CB_0xe0    , op_CB_0xe1    , op_CB_0xe2    , op_CB_0xe3    ,
 op_CB_0xe4    , op_CB_0xe5    , op_CB_0xe6    , op_CB_0xe7    ,
 op_CB_0xe8    , op_CB_0xe9    , op_CB_0xea    , op_CB_0xeb    ,
 op_CB_0xec    , op_CB_0xed    , op_CB_0xee    , op_CB_0xef    ,
 op_CB_0xf0    , op_CB_0xf1    , op_CB_0xf2    , op_CB_0xf3    ,
 op_CB_0xf4    , op_CB_0xf5    , op_CB_0xf6    , op_CB_0xf7    ,
 op_CB_0xf8    , op_CB_0xf9    , op_CB_0xfa    , op_CB_0xfb    ,
 op_CB_0xfc    , op_CB_0xfd    , op_CB_0xfe    , op_CB_0xff    
};
# 51 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "../../libayfly/z80ex/opcodes/opcodes_ed.cpp" 1
 

 
static void op_ED_0x40(Z80EX_CONTEXT *cpu)
{
	{	{  ;   cpu->bc.b.h   =(cpu->pread_cb(cpu, (  cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[( cpu->bc.b.h  )];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x41(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   cpu->bc.b.h   , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x42(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD sub16temp = cpu->hl.w  - ( cpu->bc.w  ) - (cpu->af.b.l  & 0x01 ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->bc.w  ) & 0x8800 ) >> 10 ) | ( ( sub16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = sub16temp;	cpu->af.b.l  = ( sub16temp & 0x10000 ? 0x01  : 0 ) |	0x02  | overflow_sub_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_sub_table[lookup&0x07] |	( cpu->hl.w  ? 0 : 0x40 ) ;} ;
	 ;
	return;
}

 
static void op_ED_0x43(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpword .w = cpu->bc.w  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w+1 ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_ED_0x44(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x45(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x46(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM0 ;} ;
	 ;
	return;
}

 
static void op_ED_0x47(Z80EX_CONTEXT *cpu)
{
	{	 cpu->i  = cpu->af.b.h  ; } ;
	 ;
	return;
}

 
static void op_ED_0x48(Z80EX_CONTEXT *cpu)
{
	{	{  ;   cpu->bc.b.l   =(cpu->pread_cb(cpu, (  cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[( cpu->bc.b.l  )];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x49(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   cpu->bc.b.l   , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x4a(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp= cpu->hl.w  + ( cpu->bc.w  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->bc.w  ) & 0x8800 ) >> 10 ) | ( ( add16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = add16temp;	cpu->af.b.l  = ( add16temp & 0x10000 ? 0x01  : 0 )|	overflow_add_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_add_table[lookup&0x07]|	( cpu->hl.w  ? 0 : 0x40  );} ;
	 ;
	return;
}

 
static void op_ED_0x4b(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w+1 ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->bc.w  = cpu->tmpword .w ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_ED_0x4c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x4d(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x4e(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM0 ;} ;
	 ;
	return;
}

 
static void op_ED_0x4f(Z80EX_CONTEXT *cpu)
{
	{	cpu->r = cpu->r7 = cpu->af.b.h ;} ;
	 ;
	return;
}

 
static void op_ED_0x50(Z80EX_CONTEXT *cpu)
{
	{	{  ;   cpu->de.b.h   =(cpu->pread_cb(cpu, (  cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[( cpu->de.b.h  )];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x51(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   cpu->de.b.h   , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x52(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD sub16temp = cpu->hl.w  - ( cpu->de.w  ) - (cpu->af.b.l  & 0x01 ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->de.w  ) & 0x8800 ) >> 10 ) | ( ( sub16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = sub16temp;	cpu->af.b.l  = ( sub16temp & 0x10000 ? 0x01  : 0 ) |	0x02  | overflow_sub_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_sub_table[lookup&0x07] |	( cpu->hl.w  ? 0 : 0x40 ) ;} ;
	 ;
	return;
}

 
static void op_ED_0x53(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpword .w = cpu->de.w  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w+1 ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_ED_0x54(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x55(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x56(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM1 ;} ;
	 ;
	return;
}

 
static void op_ED_0x57(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h = cpu->i ;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | sz53_table[cpu->af.b.h ] | ( cpu->iff2  ? 0x04   : 0 );} ;
	 ;
	return;
}

 
static void op_ED_0x58(Z80EX_CONTEXT *cpu)
{
	{	{  ;   cpu->de.b.l   =(cpu->pread_cb(cpu, (  cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[( cpu->de.b.l  )];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x59(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   cpu->de.b.l   , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x5a(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp= cpu->hl.w  + ( cpu->de.w  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->de.w  ) & 0x8800 ) >> 10 ) | ( ( add16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = add16temp;	cpu->af.b.l  = ( add16temp & 0x10000 ? 0x01  : 0 )|	overflow_add_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_add_table[lookup&0x07]|	( cpu->hl.w  ? 0 : 0x40  );} ;
	 ;
	return;
}

 
static void op_ED_0x5b(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w+1 ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->de.w  = cpu->tmpword .w ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_ED_0x5c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x5d(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x5e(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM2 ;} ;
	 ;
	return;
}

 
static void op_ED_0x5f(Z80EX_CONTEXT *cpu)
{
	{	cpu->af.b.h =(cpu->r &0x7f) | (cpu->r7 &0x80);	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | sz53_table[cpu->af.b.h ] | ( cpu->iff2  ? 0x04   : 0 );} ;
	 ;
	return;
}

 
static void op_ED_0x60(Z80EX_CONTEXT *cpu)
{
	{	{  ;   cpu->hl.b.h   =(cpu->pread_cb(cpu, (  cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[( cpu->hl.b.h  )];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x61(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   cpu->hl.b.h   , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x62(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD sub16temp = cpu->hl.w  - ( cpu->hl.w  ) - (cpu->af.b.l  & 0x01 ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->hl.w  ) & 0x8800 ) >> 10 ) | ( ( sub16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = sub16temp;	cpu->af.b.l  = ( sub16temp & 0x10000 ? 0x01  : 0 ) |	0x02  | overflow_sub_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_sub_table[lookup&0x07] |	( cpu->hl.w  ? 0 : 0x40 ) ;} ;
	 ;
	return;
}

 
static void op_ED_0x63(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpword .w = cpu->hl.w  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w+1 ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_ED_0x64(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x65(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x66(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM0 ;} ;
	 ;
	return;
}

 
static void op_ED_0x67(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp;	{  ;  bytetemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,  cpu->hl.w  ,    ( cpu->af.b.h  << 4 ) | ( bytetemp >> 4 )  , cpu->mwrite_cb_user_data); } ;	cpu->af.b.h  = ( cpu->af.b.h  & 0xf0 ) | ( bytetemp & 0x0f );	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | sz53p_table[cpu->af.b.h ];	cpu->memptr.w = cpu->hl.w +1;} ;
	 ;
	return;
}

 
static void op_ED_0x68(Z80EX_CONTEXT *cpu)
{
	{	{  ;   cpu->hl.b.l   =(cpu->pread_cb(cpu, (  cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[( cpu->hl.b.l  )];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x69(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   cpu->hl.b.l   , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x6a(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp= cpu->hl.w  + ( cpu->hl.w  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->hl.w  ) & 0x8800 ) >> 10 ) | ( ( add16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = add16temp;	cpu->af.b.l  = ( add16temp & 0x10000 ? 0x01  : 0 )|	overflow_add_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_add_table[lookup&0x07]|	( cpu->hl.w  ? 0 : 0x40  );} ;
	 ;
	return;
}

 
static void op_ED_0x6b(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w+1 ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->hl.w  = cpu->tmpword .w ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_ED_0x6c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x6d(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x6e(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM0 ;} ;
	 ;
	return;
}

 
static void op_ED_0x6f(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp;	{  ;  bytetemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,  cpu->hl.w  ,   (bytetemp << 4 ) | ( cpu->af.b.h  & 0x0f )  , cpu->mwrite_cb_user_data); } ;	cpu->af.b.h  = ( cpu->af.b.h  & 0xf0 ) | ( bytetemp >> 4 );	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | sz53p_table[cpu->af.b.h ];	cpu->memptr.w = cpu->hl.w +1;} ;
	 ;
	return;
}

 
static void op_ED_0x70(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE val; {  ;  val =(cpu->pread_cb(cpu, (   cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[(val)];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x71(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   0  , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x72(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD sub16temp = cpu->hl.w  - ( cpu->sp.w  ) - (cpu->af.b.l  & 0x01 ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->sp.w  ) & 0x8800 ) >> 10 ) | ( ( sub16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = sub16temp;	cpu->af.b.l  = ( sub16temp & 0x10000 ? 0x01  : 0 ) |	0x02  | overflow_sub_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_sub_table[lookup&0x07] |	( cpu->hl.w  ? 0 : 0x40 ) ;} ;
	 ;
	return;
}

 
static void op_ED_0x73(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{	 cpu->tmpword .w = cpu->sp.w  ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w ,  cpu->tmpword .b.l , cpu->mwrite_cb_user_data); } ;
	{  ; cpu->mwrite_cb(cpu,  cpu->tmpaddr .w+1 ,  cpu->tmpword .b.h , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_ED_0x74(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x75(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x76(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM1 ;} ;
	 ;
	return;
}

 
static void op_ED_0x78(Z80EX_CONTEXT *cpu)
{
	{	{  ;   cpu->af.b.h   =(cpu->pread_cb(cpu, (  cpu->bc.w   ), cpu->pread_cb_user_data)); } ; cpu->af.b.l  = ( cpu->af.b.l  & 0x01 ) | sz53p_table[( cpu->af.b.h  )];	cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x79(Z80EX_CONTEXT *cpu)
{
	{	{  ; cpu->pwrite_cb(cpu, (  cpu->bc.w   ),   cpu->af.b.h   , cpu->pwrite_cb_user_data); } ; cpu->memptr.w = cpu->bc.w  +1;} ;
	 ;
	return;
}

 
static void op_ED_0x7a(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_DWORD add16temp= cpu->hl.w  + ( cpu->sp.w  ) + ( cpu->af.b.l  & 0x01  ); Z80EX_BYTE lookup = ( (        cpu->hl.w  & 0x8800 ) >> 11 ) | ( (   ( cpu->sp.w  ) & 0x8800 ) >> 10 ) | ( ( add16temp & 0x8800 ) >>  9 ); cpu->memptr.w = cpu->hl.w  +1;	cpu->hl.w  = add16temp;	cpu->af.b.l  = ( add16temp & 0x10000 ? 0x01  : 0 )|	overflow_add_table[lookup >> 4] |	( cpu->hl.b.h  & ( 0x08  | 0x20  | 0x80  ) ) |	halfcarry_add_table[lookup&0x07]|	( cpu->hl.w  ? 0 : 0x40  );} ;
	 ;
	return;
}

 
static void op_ED_0x7b(Z80EX_CONTEXT *cpu)
{
	cpu->tmpaddr .b.l= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	cpu->tmpaddr .b.h= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
	{  ;  cpu->tmpword .b.l =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w ), 0, cpu->mread_cb_user_data)); } ;
	{  ;  cpu->tmpword .b.h =(cpu->mread_cb(cpu, ( cpu->tmpaddr .w+1 ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->sp.w  = cpu->tmpword .w ; cpu->memptr.w =  cpu->tmpaddr .w +1;} ;
	 ;
	return;
}

 
static void op_ED_0x7c(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp= cpu->af.b.h ;	cpu->af.b.h =0;	{	Z80EX_WORD subtemp = cpu->af.b.h  - ( bytetemp ); Z80EX_BYTE lookup = ( (       cpu->af.b.h  & 0x88 ) >> 3 ) | ( ( ( bytetemp ) & 0x88 ) >> 2 ) | (  (subtemp & 0x88 ) >> 1 ); cpu->af.b.h =subtemp;	cpu->af.b.l  = ( subtemp & 0x100 ? 0x01  : 0 ) | 0x02  |	halfcarry_sub_table[lookup & 0x07] | overflow_sub_table[lookup >> 4] |	sz53_table[cpu->af.b.h ];} ;} ;
	 ;
	return;
}

 
static void op_ED_0x7d(Z80EX_CONTEXT *cpu)
{
	{	cpu->iff1 = cpu->iff2 ;	{	{	regpair tmp; {  ;  tmp.b.l =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	{  ;  tmp.b.h =(cpu->mread_cb(cpu, ( cpu->sp.w ++ ), 0, cpu->mread_cb_user_data)); } ;	 cpu->pc.w  =tmp.w;} ;	cpu->memptr.w = cpu->pc.w ;} ;} ;
	 ;
	return;
}

 
static void op_ED_0x7e(Z80EX_CONTEXT *cpu)
{
	{	cpu->im = IM2 ;} ;
	 ;
	return;
}

 
static void op_ED_0xa0(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp;	{  ;  bytetemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	cpu->bc.w --;	{  ; cpu->mwrite_cb(cpu,  cpu->de.w  ,  bytetemp , cpu->mwrite_cb_user_data); } ;	cpu->de.w ++; cpu->hl.w ++;	bytetemp += cpu->af.b.h ;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x01  | 0x40  | 0x80  ) ) | ( cpu->bc.w  ? 0x04   : 0 ) |	( bytetemp & 0x08  ) | ( (bytetemp & 0x02) ? 0x20  : 0 );} ;
	 ;
	return;
}

 
static void op_ED_0xa1(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE value,bytetemp,lookup;	{  ;  value =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	bytetemp = cpu->af.b.h  - value;	lookup = ( (        cpu->af.b.h  & 0x08 ) >> 3 ) |	( (  (value) & 0x08 ) >> 2 ) |	( ( bytetemp & 0x08 ) >> 1 );	cpu->hl.w ++; cpu->bc.w --;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( cpu->bc.w  ? ( 0x04   | 0x02  ) : 0x02  ) |	halfcarry_sub_table[lookup] | ( bytetemp ? 0 : 0x40  ) |	( bytetemp & 0x80  );	if(cpu->af.b.l  & 0x10 ) bytetemp--;	cpu->af.b.l  |= ( bytetemp & 0x08  ) | ( (bytetemp&0x02) ? 0x20  : 0 );	cpu->memptr.w = cpu->memptr.w +1;} ;
	 ;
	return;
}

 
static void op_ED_0xa2(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE initemp;	cpu->memptr.w = cpu->bc.w +1;	{  ;  initemp =(cpu->pread_cb(cpu, (  cpu->bc.w  ), cpu->pread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,   cpu->hl.w  ,   initemp , cpu->mwrite_cb_user_data); } ;	cpu->bc.b.h --; cpu->hl.w ++;	cpu->af.b.l  = ( initemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	{	Z80EX_BYTE kval;	kval= initemp +((cpu->bc.b.l +( 1 )) & 0xff);	if(( initemp +((cpu->bc.b.l +( 1 )) & 0xff)) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} ;} ;
	 ;
	return;
}

 
static void op_ED_0xa3(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE outitemp;	{  ;  outitemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	cpu->bc.b.h --;	cpu->memptr.w = cpu->bc.w +1;	{  ; cpu->pwrite_cb(cpu, ( cpu->bc.w  ),  outitemp , cpu->pwrite_cb_user_data); } ;	cpu->hl.w ++;	cpu->af.b.l  = (outitemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	{	Z80EX_BYTE kval;	kval= outitemp + cpu->hl.b.l ;	if(( outitemp + cpu->hl.b.l ) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} ;} ;
	 ;
	return;
}

 
static void op_ED_0xa8(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp;	{  ;  bytetemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	cpu->bc.w --;	{  ; cpu->mwrite_cb(cpu,  cpu->de.w  ,  bytetemp , cpu->mwrite_cb_user_data); } ;	cpu->de.w --; cpu->hl.w --;	bytetemp += cpu->af.b.h ;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x01  | 0x40  | 0x80  ) ) | ( cpu->bc.w  ? 0x04   : 0 ) |	( bytetemp & 0x08  ) | ( (bytetemp & 0x02) ? 0x20  : 0 );} ;
	 ;
	return;
}

 
static void op_ED_0xa9(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE value,bytetemp,lookup;	{  ;  value =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	bytetemp = cpu->af.b.h  - value;	lookup = ( (        cpu->af.b.h  & 0x08 ) >> 3 ) |	( (  (value) & 0x08 ) >> 2 ) |	( ( bytetemp & 0x08 ) >> 1 );	cpu->hl.w --; cpu->bc.w --;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( cpu->bc.w  ? ( 0x04   | 0x02  ) : 0x02  ) |	halfcarry_sub_table[lookup] | ( bytetemp ? 0 : 0x40  ) |	( bytetemp & 0x80  );	if(cpu->af.b.l  & 0x10 ) bytetemp--;	cpu->af.b.l  |= ( bytetemp & 0x08  ) | ( (bytetemp&0x02) ? 0x20  : 0 );	cpu->memptr.w = cpu->memptr.w -1;} ;
	 ;
	return;
}

 
static void op_ED_0xaa(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE initemp;	cpu->memptr.w = cpu->bc.w -1;	{  ;  initemp =(cpu->pread_cb(cpu, (  cpu->bc.w  ), cpu->pread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,   cpu->hl.w  ,   initemp , cpu->mwrite_cb_user_data); } ;	cpu->bc.b.h --; cpu->hl.w --;	cpu->af.b.l  = ( initemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	{	Z80EX_BYTE kval;	kval= initemp +((cpu->bc.b.l +( -1 )) & 0xff);	if(( initemp +((cpu->bc.b.l +( -1 )) & 0xff)) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} } ;
	 ;
	return;
}

 
static void op_ED_0xab(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE outitemp;	{  ;  outitemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	cpu->bc.b.h --;	cpu->memptr.w = cpu->bc.w -1;	{  ; cpu->pwrite_cb(cpu, ( cpu->bc.w  ),  outitemp , cpu->pwrite_cb_user_data); } ;	cpu->hl.w --;	cpu->af.b.l  = (outitemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	{	Z80EX_BYTE kval;	kval= outitemp + cpu->hl.b.l ;	if(( outitemp + cpu->hl.b.l ) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} ;} ;
	 ;
	return;
}

 
static void op_ED_0xb0(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp;	{  ;  bytetemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,  cpu->de.w  ,  bytetemp , cpu->mwrite_cb_user_data); } ;	cpu->hl.w ++; cpu->de.w ++; cpu->bc.w --;	bytetemp += cpu->af.b.h ;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x01  | 0x40  | 0x80  ) ) | ( cpu->bc.w  ? 0x04   : 0 ) |	( bytetemp & 0x08  ) | ( (bytetemp & 0x02) ? 0x20  : 0 );	if(cpu->bc.w ) {	cpu->pc.w -=2;	 ;	cpu->memptr.w = cpu->pc.w +1;	}	else	{	 ;	}} ;
	return;
}

 
static void op_ED_0xb1(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE value,bytetemp,lookup;	{  ;  value =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	bytetemp = cpu->af.b.h  - value;	lookup = ( (        cpu->af.b.h  & 0x08 ) >> 3 ) |	( (  (value) & 0x08 ) >> 2 ) |	( ( bytetemp & 0x08 ) >> 1 );	cpu->hl.w ++; cpu->bc.w --;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( cpu->bc.w  ? ( 0x04   | 0x02  ) : 0x02  ) |	halfcarry_sub_table[lookup] | ( bytetemp ? 0 : 0x40  ) |	( bytetemp & 0x80  );	if(cpu->af.b.l  & 0x10 ) bytetemp--;	cpu->af.b.l  |= ( bytetemp & 0x08  ) | ( (bytetemp&0x02) ? 0x20  : 0 );	if( ( cpu->af.b.l  & ( 0x04   | 0x40  ) ) == 0x04   ) {	cpu->pc.w -=2;	cpu->memptr.w = cpu->pc.w +1;	 ;	}	else	{	cpu->memptr.w = cpu->memptr.w +1;	 ;	}} ;
	return;
}

 
static void op_ED_0xb2(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE initemp;	{  ;  initemp =(cpu->pread_cb(cpu, (  cpu->bc.w  ), cpu->pread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,   cpu->hl.w  ,   initemp , cpu->mwrite_cb_user_data); } ;	cpu->memptr.w = cpu->bc.w +1;	cpu->bc.b.h --; cpu->hl.w ++;	cpu->af.b.l  = ( initemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	if( cpu->bc.b.h  ) {	cpu->pc.w  -= 2;	 ;	}	else	{	 ;	}	{	Z80EX_BYTE kval;	kval= initemp +((cpu->bc.b.l +( 1 )) & 0xff);	if(( initemp +((cpu->bc.b.l +( 1 )) & 0xff)) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} } ;
	return;
}

 
static void op_ED_0xb3(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE outitemp;	{  ;  outitemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	cpu->bc.b.h --;	cpu->memptr.w = cpu->bc.w +1;	{  ; cpu->pwrite_cb(cpu, ( cpu->bc.w  ),   outitemp , cpu->pwrite_cb_user_data); } ;	cpu->hl.w ++;	cpu->af.b.l  = (outitemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	if( cpu->bc.b.h  ) {	cpu->pc.w  -= 2;	 ;	}	else	{	 ;	}	{	Z80EX_BYTE kval;	kval= outitemp + cpu->hl.b.l ;	if(( outitemp + cpu->hl.b.l ) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} ;} ;
	return;
}

 
static void op_ED_0xb8(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE bytetemp;	{  ;  bytetemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,  cpu->de.w  ,  bytetemp , cpu->mwrite_cb_user_data); } ;	cpu->hl.w --; cpu->de.w --; cpu->bc.w --;	bytetemp += cpu->af.b.h ;	cpu->af.b.l  = ( cpu->af.b.l  & ( 0x01  | 0x40  | 0x80  ) ) | ( cpu->bc.w  ? 0x04   : 0 ) |	( bytetemp & 0x08  ) | ( (bytetemp & 0x02) ? 0x20  : 0 );	if(cpu->bc.w ) {	cpu->pc.w -=2;	 ;	cpu->memptr.w = cpu->pc.w +1;	}	else	{	 ;	}} ;
	return;
}

 
static void op_ED_0xb9(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE value,bytetemp,lookup;	{  ;  value =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	bytetemp = cpu->af.b.h  - value;	lookup = ( (        cpu->af.b.h  & 0x08 ) >> 3 ) |	( (  (value) & 0x08 ) >> 2 ) |	( ( bytetemp & 0x08 ) >> 1 );	cpu->hl.w --; cpu->bc.w --;	cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | ( cpu->bc.w  ? ( 0x04   | 0x02  ) : 0x02  ) |	halfcarry_sub_table[lookup] | ( bytetemp ? 0 : 0x40  ) |	( bytetemp & 0x80  );	if(cpu->af.b.l  & 0x10 ) bytetemp--;	cpu->af.b.l  |= ( bytetemp & 0x08  ) | ( (bytetemp&0x02) ? 0x20  : 0 );	if( ( cpu->af.b.l  & ( 0x04   | 0x40  ) ) == 0x04   ) {	cpu->pc.w -=2;	cpu->memptr.w = cpu->pc.w +1;	 ;	}	else	{	cpu->memptr.w = cpu->memptr.w -1;	 ;	}} ;
	return;
}

 
static void op_ED_0xba(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE initemp;	{  ;  initemp =(cpu->pread_cb(cpu, (  cpu->bc.w  ), cpu->pread_cb_user_data)); } ;	{  ; cpu->mwrite_cb(cpu,   cpu->hl.w  ,   initemp , cpu->mwrite_cb_user_data); } ;	cpu->memptr.w = cpu->bc.w -1;	cpu->bc.b.h --; cpu->hl.w --;	cpu->af.b.l  = ( initemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	if( cpu->bc.b.h  ) {	cpu->pc.w  -= 2;	 ;	}	else	{	 ;	}	{	Z80EX_BYTE kval;	kval= initemp +((cpu->bc.b.l +( -1 )) & 0xff);	if(( initemp +((cpu->bc.b.l +( -1 )) & 0xff)) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} } ;
	return;
}

 
static void op_ED_0xbb(Z80EX_CONTEXT *cpu)
{
	{	Z80EX_BYTE outitemp;	{  ;  outitemp =(cpu->mread_cb(cpu, (  cpu->hl.w  ), 0, cpu->mread_cb_user_data)); } ;	cpu->bc.b.h --;	cpu->memptr.w = cpu->bc.w -1;	{  ; cpu->pwrite_cb(cpu, ( cpu->bc.w  ),  outitemp , cpu->pwrite_cb_user_data); } ;	cpu->hl.w --;	cpu->af.b.l  = (outitemp & 0x80 ? 0x02  : 0 ) | sz53_table[cpu->bc.b.h ];	if( cpu->bc.b.h  ) {	cpu->pc.w  -= 2;	 ;	}	else	{	 ;	}	{	Z80EX_BYTE kval;	kval= outitemp + cpu->hl.b.l ;	if(( outitemp + cpu->hl.b.l ) > 255) cpu->af.b.l  |= (0x01  | 0x10 );	cpu->af.b.l  |= parity_table[((kval & 7) ^ cpu->bc.b.h )];} ;} ;
	return;
}



 
static z80ex_opcode_fn opcodes_ed[0x100] = {
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_ED_0x40    , op_ED_0x41    , op_ED_0x42    , op_ED_0x43    ,
 op_ED_0x44    , op_ED_0x45    , op_ED_0x46    , op_ED_0x47    ,
 op_ED_0x48    , op_ED_0x49    , op_ED_0x4a    , op_ED_0x4b    ,
 op_ED_0x4c    , op_ED_0x4d    , op_ED_0x4e    , op_ED_0x4f    ,
 op_ED_0x50    , op_ED_0x51    , op_ED_0x52    , op_ED_0x53    ,
 op_ED_0x54    , op_ED_0x55    , op_ED_0x56    , op_ED_0x57    ,
 op_ED_0x58    , op_ED_0x59    , op_ED_0x5a    , op_ED_0x5b    ,
 op_ED_0x5c    , op_ED_0x5d    , op_ED_0x5e    , op_ED_0x5f    ,
 op_ED_0x60    , op_ED_0x61    , op_ED_0x62    , op_ED_0x63    ,
 op_ED_0x64    , op_ED_0x65    , op_ED_0x66    , op_ED_0x67    ,
 op_ED_0x68    , op_ED_0x69    , op_ED_0x6a    , op_ED_0x6b    ,
 op_ED_0x6c    , op_ED_0x6d    , op_ED_0x6e    , op_ED_0x6f    ,
 op_ED_0x70    , op_ED_0x71    , op_ED_0x72    , op_ED_0x73    ,
 op_ED_0x74    , op_ED_0x75    , op_ED_0x76    , 0L           ,
 op_ED_0x78    , op_ED_0x79    , op_ED_0x7a    , op_ED_0x7b    ,
 op_ED_0x7c    , op_ED_0x7d    , op_ED_0x7e    , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 op_ED_0xa0    , op_ED_0xa1    , op_ED_0xa2    , op_ED_0xa3    ,
 0L           , 0L           , 0L           , 0L           ,
 op_ED_0xa8    , op_ED_0xa9    , op_ED_0xaa    , op_ED_0xab    ,
 0L           , 0L           , 0L           , 0L           ,
 op_ED_0xb0    , op_ED_0xb1    , op_ED_0xb2    , op_ED_0xb3    ,
 0L           , 0L           , 0L           , 0L           ,
 op_ED_0xb8    , op_ED_0xb9    , op_ED_0xba    , op_ED_0xbb    ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           ,
 0L           , 0L           , 0L           , 0L           
};
# 52 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "../../libayfly/z80ex/opcodes/opcodes_ddcb.cpp" 1
 

 
static void op_DDCB_0x00(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x01(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x02(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x03(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x04(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x05(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x06(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x07(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x08(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x09(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x0a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x0b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x0c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x0d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x0e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x0f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x10(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x11(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x12(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x13(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x14(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x15(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x16(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x17(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x18(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x19(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x1a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x1b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x1c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x1d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x1e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x1f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x20(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x21(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x22(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x23(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x24(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x25(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x26(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x27(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x28(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x29(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x2a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x2b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x2c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x2d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x2e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x2f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x30(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x31(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x32(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x33(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x34(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x35(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x36(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x37(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x38(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x39(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x3a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x3b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x3c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x3d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x3e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x3f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x47(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 0 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x4f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 1 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x57(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 2 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x5f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 3 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x67(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 4 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x6f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 5 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x77(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 6 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x7f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 7 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_DDCB_0x80(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x81(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x82(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x83(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x84(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x85(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x86(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x87(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x88(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x89(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x8a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x8b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x8c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x8d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x8e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x8f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x90(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x91(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x92(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x93(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x94(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x95(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x96(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x97(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x98(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x99(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x9a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x9b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x9c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x9d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x9e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0x9f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xa9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xaa(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xab(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xac(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xad(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xae(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xaf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xb9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xba(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xbb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xbc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xbd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xbe(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xbf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xc9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xca(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xcb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xcc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xcd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xce(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xcf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xd9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xda(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xdb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xdc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xdd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xde(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xdf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xe9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xea(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xeb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xec(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xed(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xee(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xef(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xf9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xfa(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xfb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xfc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xfd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xfe(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_DDCB_0xff(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->ix.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->ix.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->ix.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}



 
static z80ex_opcode_fn opcodes_ddcb[0x100] = {
 op_DDCB_0x00  , op_DDCB_0x01  , op_DDCB_0x02  , op_DDCB_0x03  ,
 op_DDCB_0x04  , op_DDCB_0x05  , op_DDCB_0x06  , op_DDCB_0x07  ,
 op_DDCB_0x08  , op_DDCB_0x09  , op_DDCB_0x0a  , op_DDCB_0x0b  ,
 op_DDCB_0x0c  , op_DDCB_0x0d  , op_DDCB_0x0e  , op_DDCB_0x0f  ,
 op_DDCB_0x10  , op_DDCB_0x11  , op_DDCB_0x12  , op_DDCB_0x13  ,
 op_DDCB_0x14  , op_DDCB_0x15  , op_DDCB_0x16  , op_DDCB_0x17  ,
 op_DDCB_0x18  , op_DDCB_0x19  , op_DDCB_0x1a  , op_DDCB_0x1b  ,
 op_DDCB_0x1c  , op_DDCB_0x1d  , op_DDCB_0x1e  , op_DDCB_0x1f  ,
 op_DDCB_0x20  , op_DDCB_0x21  , op_DDCB_0x22  , op_DDCB_0x23  ,
 op_DDCB_0x24  , op_DDCB_0x25  , op_DDCB_0x26  , op_DDCB_0x27  ,
 op_DDCB_0x28  , op_DDCB_0x29  , op_DDCB_0x2a  , op_DDCB_0x2b  ,
 op_DDCB_0x2c  , op_DDCB_0x2d  , op_DDCB_0x2e  , op_DDCB_0x2f  ,
 op_DDCB_0x30  , op_DDCB_0x31  , op_DDCB_0x32  , op_DDCB_0x33  ,
 op_DDCB_0x34  , op_DDCB_0x35  , op_DDCB_0x36  , op_DDCB_0x37  ,
 op_DDCB_0x38  , op_DDCB_0x39  , op_DDCB_0x3a  , op_DDCB_0x3b  ,
 op_DDCB_0x3c  , op_DDCB_0x3d  , op_DDCB_0x3e  , op_DDCB_0x3f  ,
 op_DDCB_0x47  , op_DDCB_0x47  , op_DDCB_0x47  , op_DDCB_0x47  ,
 op_DDCB_0x47  , op_DDCB_0x47  , op_DDCB_0x47  , op_DDCB_0x47  ,
 op_DDCB_0x4f  , op_DDCB_0x4f  , op_DDCB_0x4f  , op_DDCB_0x4f  ,
 op_DDCB_0x4f  , op_DDCB_0x4f  , op_DDCB_0x4f  , op_DDCB_0x4f  ,
 op_DDCB_0x57  , op_DDCB_0x57  , op_DDCB_0x57  , op_DDCB_0x57  ,
 op_DDCB_0x57  , op_DDCB_0x57  , op_DDCB_0x57  , op_DDCB_0x57  ,
 op_DDCB_0x5f  , op_DDCB_0x5f  , op_DDCB_0x5f  , op_DDCB_0x5f  ,
 op_DDCB_0x5f  , op_DDCB_0x5f  , op_DDCB_0x5f  , op_DDCB_0x5f  ,
 op_DDCB_0x67  , op_DDCB_0x67  , op_DDCB_0x67  , op_DDCB_0x67  ,
 op_DDCB_0x67  , op_DDCB_0x67  , op_DDCB_0x67  , op_DDCB_0x67  ,
 op_DDCB_0x6f  , op_DDCB_0x6f  , op_DDCB_0x6f  , op_DDCB_0x6f  ,
 op_DDCB_0x6f  , op_DDCB_0x6f  , op_DDCB_0x6f  , op_DDCB_0x6f  ,
 op_DDCB_0x77  , op_DDCB_0x77  , op_DDCB_0x77  , op_DDCB_0x77  ,
 op_DDCB_0x77  , op_DDCB_0x77  , op_DDCB_0x77  , op_DDCB_0x77  ,
 op_DDCB_0x7f  , op_DDCB_0x7f  , op_DDCB_0x7f  , op_DDCB_0x7f  ,
 op_DDCB_0x7f  , op_DDCB_0x7f  , op_DDCB_0x7f  , op_DDCB_0x7f  ,
 op_DDCB_0x80  , op_DDCB_0x81  , op_DDCB_0x82  , op_DDCB_0x83  ,
 op_DDCB_0x84  , op_DDCB_0x85  , op_DDCB_0x86  , op_DDCB_0x87  ,
 op_DDCB_0x88  , op_DDCB_0x89  , op_DDCB_0x8a  , op_DDCB_0x8b  ,
 op_DDCB_0x8c  , op_DDCB_0x8d  , op_DDCB_0x8e  , op_DDCB_0x8f  ,
 op_DDCB_0x90  , op_DDCB_0x91  , op_DDCB_0x92  , op_DDCB_0x93  ,
 op_DDCB_0x94  , op_DDCB_0x95  , op_DDCB_0x96  , op_DDCB_0x97  ,
 op_DDCB_0x98  , op_DDCB_0x99  , op_DDCB_0x9a  , op_DDCB_0x9b  ,
 op_DDCB_0x9c  , op_DDCB_0x9d  , op_DDCB_0x9e  , op_DDCB_0x9f  ,
 op_DDCB_0xa0  , op_DDCB_0xa1  , op_DDCB_0xa2  , op_DDCB_0xa3  ,
 op_DDCB_0xa4  , op_DDCB_0xa5  , op_DDCB_0xa6  , op_DDCB_0xa7  ,
 op_DDCB_0xa8  , op_DDCB_0xa9  , op_DDCB_0xaa  , op_DDCB_0xab  ,
 op_DDCB_0xac  , op_DDCB_0xad  , op_DDCB_0xae  , op_DDCB_0xaf  ,
 op_DDCB_0xb0  , op_DDCB_0xb1  , op_DDCB_0xb2  , op_DDCB_0xb3  ,
 op_DDCB_0xb4  , op_DDCB_0xb5  , op_DDCB_0xb6  , op_DDCB_0xb7  ,
 op_DDCB_0xb8  , op_DDCB_0xb9  , op_DDCB_0xba  , op_DDCB_0xbb  ,
 op_DDCB_0xbc  , op_DDCB_0xbd  , op_DDCB_0xbe  , op_DDCB_0xbf  ,
 op_DDCB_0xc0  , op_DDCB_0xc1  , op_DDCB_0xc2  , op_DDCB_0xc3  ,
 op_DDCB_0xc4  , op_DDCB_0xc5  , op_DDCB_0xc6  , op_DDCB_0xc7  ,
 op_DDCB_0xc8  , op_DDCB_0xc9  , op_DDCB_0xca  , op_DDCB_0xcb  ,
 op_DDCB_0xcc  , op_DDCB_0xcd  , op_DDCB_0xce  , op_DDCB_0xcf  ,
 op_DDCB_0xd0  , op_DDCB_0xd1  , op_DDCB_0xd2  , op_DDCB_0xd3  ,
 op_DDCB_0xd4  , op_DDCB_0xd5  , op_DDCB_0xd6  , op_DDCB_0xd7  ,
 op_DDCB_0xd8  , op_DDCB_0xd9  , op_DDCB_0xda  , op_DDCB_0xdb  ,
 op_DDCB_0xdc  , op_DDCB_0xdd  , op_DDCB_0xde  , op_DDCB_0xdf  ,
 op_DDCB_0xe0  , op_DDCB_0xe1  , op_DDCB_0xe2  , op_DDCB_0xe3  ,
 op_DDCB_0xe4  , op_DDCB_0xe5  , op_DDCB_0xe6  , op_DDCB_0xe7  ,
 op_DDCB_0xe8  , op_DDCB_0xe9  , op_DDCB_0xea  , op_DDCB_0xeb  ,
 op_DDCB_0xec  , op_DDCB_0xed  , op_DDCB_0xee  , op_DDCB_0xef  ,
 op_DDCB_0xf0  , op_DDCB_0xf1  , op_DDCB_0xf2  , op_DDCB_0xf3  ,
 op_DDCB_0xf4  , op_DDCB_0xf5  , op_DDCB_0xf6  , op_DDCB_0xf7  ,
 op_DDCB_0xf8  , op_DDCB_0xf9  , op_DDCB_0xfa  , op_DDCB_0xfb  ,
 op_DDCB_0xfc  , op_DDCB_0xfd  , op_DDCB_0xfe  , op_DDCB_0xff  
};
# 53 "../../libayfly/z80ex/z80ex.cpp" 2

# 1 "../../libayfly/z80ex/opcodes/opcodes_fdcb.cpp" 1
 

 
static void op_FDCB_0x00(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x01(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x02(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x03(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x04(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x05(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x06(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x07(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( ( cpu->tmpbyte  )>>7 );	cpu->af.b.l  = ( ( cpu->tmpbyte  ) & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x08(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x09(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x0a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x0b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x0c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x0d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x0e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x0f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( ( cpu->tmpbyte  )<<7 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x10(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x11(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x12(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x13(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x14(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x15(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x16(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x17(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rltemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )<<1 ) | ( cpu->af.b.l  & 0x01  );	cpu->af.b.l  = ( rltemp >> 7 ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x18(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x19(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x1a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x1b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x1c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x1d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x1e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x1f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	Z80EX_BYTE rrtemp = ( cpu->tmpbyte  ); ( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  )>>1 ) | ( cpu->af.b.l  << 7 );	cpu->af.b.l  = ( rrtemp & 0x01  ) | sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x20(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x21(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x22(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x23(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x24(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x25(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x26(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x27(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) <<= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x28(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x29(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x2a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x2b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x2c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x2d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x2e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x2f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) & 0x80 ) | ( ( cpu->tmpbyte  ) >> 1 );	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x30(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x31(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x32(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x33(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x34(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x35(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x36(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x37(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) >> 7;	( cpu->tmpbyte  ) = ( ( cpu->tmpbyte  ) << 1 ) | 0x01;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x38(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x39(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x3a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x3b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x3c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x3d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x3e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x3f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	cpu->af.b.l  = ( cpu->tmpbyte  ) & 0x01 ;	( cpu->tmpbyte  ) >>= 1;	cpu->af.b.l  |= sz53p_table[( cpu->tmpbyte  )];} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x47(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 0 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x4f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 1 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x57(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 2 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x5f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 3 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x67(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 4 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x6f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 5 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x77(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 6 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x7f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{ cpu->af.b.l  = ( cpu->af.b.l  & 0x01  ) | 0x10  | (sz53p_table[( cpu->tmpbyte  ) & (0x01 << ( 7 ))] & 0xD7) | ((cpu->memptr.b.h ) & 0x28); } ;
	 ;
	return;
}

 
static void op_FDCB_0x80(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x81(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x82(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x83(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x84(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x85(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x86(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x87(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  0 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x88(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x89(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x8a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x8b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x8c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x8d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x8e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x8f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  1 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x90(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x91(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x92(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x93(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x94(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x95(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x96(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x97(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  2 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x98(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x99(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x9a(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x9b(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x9c(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x9d(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x9e(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0x9f(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  3 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  4 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xa9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xaa(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xab(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xac(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xad(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xae(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xaf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  5 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  6 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xb9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xba(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xbb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xbc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xbd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xbe(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xbf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   &= ~(1 <<  7 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  0 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xc9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xca(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xcb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xcc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xcd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xce(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xcf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  1 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  2 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xd9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xda(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xdb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xdc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xdd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xde(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xdf(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  3 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  4 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xe9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xea(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xeb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xec(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xed(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xee(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xef(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  5 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf0(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf1(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf2(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf3(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf4(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf5(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf6(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf7(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  6 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf8(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->bc.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xf9(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->bc.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xfa(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->de.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xfb(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->de.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xfc(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->hl.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xfd(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->hl.b.l  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xfe(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}

 
static void op_FDCB_0xff(Z80EX_CONTEXT *cpu)
{
	cpu->memptr.w =(cpu->iy.w + cpu->tmpbyte_s );
	{  ;  cpu->tmpbyte  =(cpu->mread_cb(cpu, ( (cpu->iy.w + cpu->tmpbyte_s ) ), 0, cpu->mread_cb_user_data)); } ;
	{	 cpu->tmpbyte   |= (1 <<  7 );} ;
	{	 cpu->af.b.h  = cpu->tmpbyte  ; } ;
	{  ; cpu->mwrite_cb(cpu,  (cpu->iy.w + cpu->tmpbyte_s ) ,  cpu->tmpbyte  , cpu->mwrite_cb_user_data); } ;
	 ;
	return;
}



 
static z80ex_opcode_fn opcodes_fdcb[0x100] = {
 op_FDCB_0x00  , op_FDCB_0x01  , op_FDCB_0x02  , op_FDCB_0x03  ,
 op_FDCB_0x04  , op_FDCB_0x05  , op_FDCB_0x06  , op_FDCB_0x07  ,
 op_FDCB_0x08  , op_FDCB_0x09  , op_FDCB_0x0a  , op_FDCB_0x0b  ,
 op_FDCB_0x0c  , op_FDCB_0x0d  , op_FDCB_0x0e  , op_FDCB_0x0f  ,
 op_FDCB_0x10  , op_FDCB_0x11  , op_FDCB_0x12  , op_FDCB_0x13  ,
 op_FDCB_0x14  , op_FDCB_0x15  , op_FDCB_0x16  , op_FDCB_0x17  ,
 op_FDCB_0x18  , op_FDCB_0x19  , op_FDCB_0x1a  , op_FDCB_0x1b  ,
 op_FDCB_0x1c  , op_FDCB_0x1d  , op_FDCB_0x1e  , op_FDCB_0x1f  ,
 op_FDCB_0x20  , op_FDCB_0x21  , op_FDCB_0x22  , op_FDCB_0x23  ,
 op_FDCB_0x24  , op_FDCB_0x25  , op_FDCB_0x26  , op_FDCB_0x27  ,
 op_FDCB_0x28  , op_FDCB_0x29  , op_FDCB_0x2a  , op_FDCB_0x2b  ,
 op_FDCB_0x2c  , op_FDCB_0x2d  , op_FDCB_0x2e  , op_FDCB_0x2f  ,
 op_FDCB_0x30  , op_FDCB_0x31  , op_FDCB_0x32  , op_FDCB_0x33  ,
 op_FDCB_0x34  , op_FDCB_0x35  , op_FDCB_0x36  , op_FDCB_0x37  ,
 op_FDCB_0x38  , op_FDCB_0x39  , op_FDCB_0x3a  , op_FDCB_0x3b  ,
 op_FDCB_0x3c  , op_FDCB_0x3d  , op_FDCB_0x3e  , op_FDCB_0x3f  ,
 op_FDCB_0x47  , op_FDCB_0x47  , op_FDCB_0x47  , op_FDCB_0x47  ,
 op_FDCB_0x47  , op_FDCB_0x47  , op_FDCB_0x47  , op_FDCB_0x47  ,
 op_FDCB_0x4f  , op_FDCB_0x4f  , op_FDCB_0x4f  , op_FDCB_0x4f  ,
 op_FDCB_0x4f  , op_FDCB_0x4f  , op_FDCB_0x4f  , op_FDCB_0x4f  ,
 op_FDCB_0x57  , op_FDCB_0x57  , op_FDCB_0x57  , op_FDCB_0x57  ,
 op_FDCB_0x57  , op_FDCB_0x57  , op_FDCB_0x57  , op_FDCB_0x57  ,
 op_FDCB_0x5f  , op_FDCB_0x5f  , op_FDCB_0x5f  , op_FDCB_0x5f  ,
 op_FDCB_0x5f  , op_FDCB_0x5f  , op_FDCB_0x5f  , op_FDCB_0x5f  ,
 op_FDCB_0x67  , op_FDCB_0x67  , op_FDCB_0x67  , op_FDCB_0x67  ,
 op_FDCB_0x67  , op_FDCB_0x67  , op_FDCB_0x67  , op_FDCB_0x67  ,
 op_FDCB_0x6f  , op_FDCB_0x6f  , op_FDCB_0x6f  , op_FDCB_0x6f  ,
 op_FDCB_0x6f  , op_FDCB_0x6f  , op_FDCB_0x6f  , op_FDCB_0x6f  ,
 op_FDCB_0x77  , op_FDCB_0x77  , op_FDCB_0x77  , op_FDCB_0x77  ,
 op_FDCB_0x77  , op_FDCB_0x77  , op_FDCB_0x77  , op_FDCB_0x77  ,
 op_FDCB_0x7f  , op_FDCB_0x7f  , op_FDCB_0x7f  , op_FDCB_0x7f  ,
 op_FDCB_0x7f  , op_FDCB_0x7f  , op_FDCB_0x7f  , op_FDCB_0x7f  ,
 op_FDCB_0x80  , op_FDCB_0x81  , op_FDCB_0x82  , op_FDCB_0x83  ,
 op_FDCB_0x84  , op_FDCB_0x85  , op_FDCB_0x86  , op_FDCB_0x87  ,
 op_FDCB_0x88  , op_FDCB_0x89  , op_FDCB_0x8a  , op_FDCB_0x8b  ,
 op_FDCB_0x8c  , op_FDCB_0x8d  , op_FDCB_0x8e  , op_FDCB_0x8f  ,
 op_FDCB_0x90  , op_FDCB_0x91  , op_FDCB_0x92  , op_FDCB_0x93  ,
 op_FDCB_0x94  , op_FDCB_0x95  , op_FDCB_0x96  , op_FDCB_0x97  ,
 op_FDCB_0x98  , op_FDCB_0x99  , op_FDCB_0x9a  , op_FDCB_0x9b  ,
 op_FDCB_0x9c  , op_FDCB_0x9d  , op_FDCB_0x9e  , op_FDCB_0x9f  ,
 op_FDCB_0xa0  , op_FDCB_0xa1  , op_FDCB_0xa2  , op_FDCB_0xa3  ,
 op_FDCB_0xa4  , op_FDCB_0xa5  , op_FDCB_0xa6  , op_FDCB_0xa7  ,
 op_FDCB_0xa8  , op_FDCB_0xa9  , op_FDCB_0xaa  , op_FDCB_0xab  ,
 op_FDCB_0xac  , op_FDCB_0xad  , op_FDCB_0xae  , op_FDCB_0xaf  ,
 op_FDCB_0xb0  , op_FDCB_0xb1  , op_FDCB_0xb2  , op_FDCB_0xb3  ,
 op_FDCB_0xb4  , op_FDCB_0xb5  , op_FDCB_0xb6  , op_FDCB_0xb7  ,
 op_FDCB_0xb8  , op_FDCB_0xb9  , op_FDCB_0xba  , op_FDCB_0xbb  ,
 op_FDCB_0xbc  , op_FDCB_0xbd  , op_FDCB_0xbe  , op_FDCB_0xbf  ,
 op_FDCB_0xc0  , op_FDCB_0xc1  , op_FDCB_0xc2  , op_FDCB_0xc3  ,
 op_FDCB_0xc4  , op_FDCB_0xc5  , op_FDCB_0xc6  , op_FDCB_0xc7  ,
 op_FDCB_0xc8  , op_FDCB_0xc9  , op_FDCB_0xca  , op_FDCB_0xcb  ,
 op_FDCB_0xcc  , op_FDCB_0xcd  , op_FDCB_0xce  , op_FDCB_0xcf  ,
 op_FDCB_0xd0  , op_FDCB_0xd1  , op_FDCB_0xd2  , op_FDCB_0xd3  ,
 op_FDCB_0xd4  , op_FDCB_0xd5  , op_FDCB_0xd6  , op_FDCB_0xd7  ,
 op_FDCB_0xd8  , op_FDCB_0xd9  , op_FDCB_0xda  , op_FDCB_0xdb  ,
 op_FDCB_0xdc  , op_FDCB_0xdd  , op_FDCB_0xde  , op_FDCB_0xdf  ,
 op_FDCB_0xe0  , op_FDCB_0xe1  , op_FDCB_0xe2  , op_FDCB_0xe3  ,
 op_FDCB_0xe4  , op_FDCB_0xe5  , op_FDCB_0xe6  , op_FDCB_0xe7  ,
 op_FDCB_0xe8  , op_FDCB_0xe9  , op_FDCB_0xea  , op_FDCB_0xeb  ,
 op_FDCB_0xec  , op_FDCB_0xed  , op_FDCB_0xee  , op_FDCB_0xef  ,
 op_FDCB_0xf0  , op_FDCB_0xf1  , op_FDCB_0xf2  , op_FDCB_0xf3  ,
 op_FDCB_0xf4  , op_FDCB_0xf5  , op_FDCB_0xf6  , op_FDCB_0xf7  ,
 op_FDCB_0xf8  , op_FDCB_0xf9  , op_FDCB_0xfa  , op_FDCB_0xfb  ,
 op_FDCB_0xfc  , op_FDCB_0xfd  , op_FDCB_0xfe  , op_FDCB_0xff  
};
# 54 "../../libayfly/z80ex/z80ex.cpp" 2


 
static void init_tables(void)
{
	int i,j,k;
	Z80EX_BYTE parity;

	for(i=0;i<0x100;i++)
	{
		sz53_table[i]= i & ( 0x08  | 0x20  | 0x80  );
		j=i; parity=0;
		for(k=0;k<8;k++) { parity ^= j & 1; j >>=1; }
		parity_table[i]= ( parity ? 0 : 0x04  );
		sz53p_table[i] = sz53_table[i] | parity_table[i];
	}

	sz53_table[0]  |= 0x40 ;
	sz53p_table[0] |= 0x40 ;
}

 
  int z80ex_step(Z80EX_CONTEXT *cpu)
{
	Z80EX_BYTE opcode, d;
	z80ex_opcode_fn ofn= 0L ;

	cpu->doing_opcode=1;
	cpu->noint_once=0;
	cpu->tstate=0;
	cpu->op_tstate=0;

	opcode= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 1, cpu->mread_cb_user_data)) ;  
	if(cpu->int_vector_req)
	{
		 ;  
	}
	cpu->r ++;  

	 ;  

	if(!cpu->prefix) opcodes_base[opcode](cpu);
	else
	{
		if((cpu->prefix | 0x20) == 0xFD && ((opcode | 0x20) == 0xFD || opcode == 0xED))
		{
			cpu->prefix=opcode;
			cpu->noint_once=1;  
		}
		else
		{
			switch(cpu->prefix)
			{
				case 0xDD:
				case 0xFD:
					if(opcode == 0xCB)
					{
						d= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;  
						cpu->tmpbyte_s =(d & 0x80)? -(((~d) & 0x7f)+1): d;
						opcode= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
						ofn = (cpu->prefix == 0xDD)? opcodes_ddcb[opcode]: opcodes_fdcb[opcode];
					}
					else
					{
						ofn = (cpu->prefix == 0xDD)? opcodes_dd[opcode]: opcodes_fd[opcode];
						if(ofn == 0L ) ofn=opcodes_base[opcode];  
					}
					break;

				case 0xED:
					ofn = opcodes_ed[opcode];
					if(ofn == 0L ) ofn=opcodes_base[0x00];
					break;

				case 0xCB:
					ofn = opcodes_cb[opcode];
					break;

				default:
					 
					break;
			}

			ofn(cpu);

			cpu->prefix=0;
		}
	}

	cpu->doing_opcode=0;
	return(cpu->tstate);
}

  Z80EX_BYTE z80ex_last_op_type(Z80EX_CONTEXT *cpu)
{
	return(cpu->prefix);
}

  void z80ex_reset(Z80EX_CONTEXT *cpu)
{
	cpu->pc.w =0x0000; cpu->iff1 = cpu->iff2 =0; cpu->im =IM0;
	cpu->af.w = cpu->sp.w = cpu->bc.w = cpu->de.w = cpu->hl.w = cpu->ix.w = cpu->iy.w = cpu->af_.w = cpu->bc_.w = cpu->de_.w = cpu->hl_.w =0xffff;
	cpu->i = cpu->r = cpu->r7 =0;
	cpu->noint_once=0; cpu->halted=0;
	cpu->int_vector_req=0;
	cpu->doing_opcode=0;
	cpu->tstate=cpu->op_tstate=0;
	cpu->prefix=0;
}

 
  Z80EX_CONTEXT *z80ex_create(
	z80ex_mread_cb mrcb_fn, void *mrcb_data,
	z80ex_mwrite_cb mwcb_fn, void *mwcb_data,
	z80ex_pread_cb prcb_fn, void *prcb_data,
	z80ex_pwrite_cb pwcb_fn, void *pwcb_data,
	z80ex_intread_cb ircb_fn, void *ircb_data
)
{
	Z80EX_CONTEXT *cpu;

	 





	if((cpu=new Z80EX_CONTEXT) == 0L ) return(0L );
	memset(cpu,0x00,sizeof(Z80EX_CONTEXT));

	z80ex_reset(cpu);

	cpu->mread_cb=mrcb_fn;
	cpu->mread_cb_user_data=mrcb_data;
	cpu->mwrite_cb=mwcb_fn;
	cpu->mwrite_cb_user_data=mwcb_data;
	cpu->pread_cb=prcb_fn;
	cpu->pread_cb_user_data=prcb_data;
	cpu->pwrite_cb=pwcb_fn;
	cpu->pwrite_cb_user_data=pwcb_data;
	cpu->intread_cb=ircb_fn;
	cpu->intread_cb_user_data=ircb_data;

	return(cpu);
}

  void z80ex_destroy(Z80EX_CONTEXT *cpu)
{
	delete cpu;
}

  void z80ex_set_tstate_callback(Z80EX_CONTEXT *cpu, z80ex_tstate_cb cb_fn, void *user_data)
{
	cpu->tstate_cb=cb_fn;
	cpu->tstate_cb_user_data=user_data;
}

 
  int z80ex_nmi(Z80EX_CONTEXT *cpu)
{
	if(cpu->doing_opcode || cpu->noint_once || cpu->prefix) return(0);

	cpu->doing_opcode=1;

	cpu->r ++;  
	cpu->iff1 =0;

	 ;

	cpu->mwrite_cb(cpu, -- cpu->sp.w , cpu->pc.b.h, cpu->mwrite_cb_user_data);  
	 ;

	cpu->mwrite_cb(cpu, -- cpu->sp.w , cpu->pc.b.l, cpu->mwrite_cb_user_data);  
	 ;

	cpu->pc.w =0x0066;
	cpu->memptr.w = cpu->pc.w ;  

	cpu->doing_opcode=0;

	return(11);  
}

 
  int z80ex_int(Z80EX_CONTEXT *cpu)
{
	Z80EX_WORD inttemp;
	Z80EX_BYTE iv;
	unsigned long tt;

	 


	if(! cpu->iff1  || cpu->noint_once || cpu->doing_opcode || cpu->prefix) return(0);

	cpu->tstate=0;
	cpu->op_tstate=0;

	if(cpu->halted) { cpu->pc.w ++; cpu->halted = 0; }  

	 

	cpu->iff1 = cpu->iff2 =0;

	cpu->int_vector_req=1;
	cpu->doing_opcode=1;

	switch(cpu->im )
	{
		case IM0:
			 
			tt=z80ex_step(cpu);

			while(cpu->prefix)  
			{
				tt+=z80ex_step(cpu);
			}

			cpu->tstate=tt;
			break;

		case IM1:
			cpu->r ++;
			 ;  
			 

			opcodes_base[0xff](cpu);  
			break;

		case IM2:
			cpu->r ++;
			 


			iv= (cpu->int_vector_req? cpu->intread_cb(cpu, cpu->intread_cb_user_data) : cpu->mread_cb(cpu, cpu->pc.w ++, 0, cpu->mread_cb_user_data)) ;
			 ;
			inttemp=(0x100* cpu->i )+iv;

			{	regpair tmp; tmp.w= cpu->pc.w  ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.h , cpu->mwrite_cb_user_data); } ; {  ; cpu->mwrite_cb(cpu,  -- cpu->sp.w  ,   tmp.b.l , cpu->mwrite_cb_user_data); } ; } ;

			{  ;  cpu->pc.b.l  =(cpu->mread_cb(cpu, ( inttemp++ ), 0, cpu->mread_cb_user_data)); } ; {  ;  cpu->pc.b.h  =(cpu->mread_cb(cpu, ( inttemp ), 0, cpu->mread_cb_user_data)); } ;
			cpu->memptr.w = cpu->pc.w ;
			 ;

			break;
	}

	cpu->doing_opcode=0;
	cpu->int_vector_req=0;

	return(cpu->tstate);
}

  void z80ex_w_states(Z80EX_CONTEXT *cpu, unsigned w_states)
{
	 ;
}

  void z80ex_next_t_state(Z80EX_CONTEXT *cpu)
{
	if(cpu->tstate_cb != 0L ) cpu->tstate_cb(cpu, cpu->tstate_cb_user_data);
	cpu->tstate++;
	cpu->op_tstate++;
}

  Z80EX_WORD z80ex_get_reg(Z80EX_CONTEXT *cpu, Z80_REG_T reg)
{
	switch(reg)
	{
		case regAF: return(cpu->af.w );
		case regBC: return(cpu->bc.w );
		case regDE: return(cpu->de.w );
		case regHL: return(cpu->hl.w );
		case regAF_: return(cpu->af_.w );
		case regBC_: return(cpu->bc_.w );
		case regDE_: return(cpu->de_.w );
		case regHL_: return(cpu->hl_.w );
		case regIX: return(cpu->ix.w );
		case regIY: return(cpu->iy.w );
		case regPC: return(cpu->pc.w );
		case regSP: return(cpu->sp.w );
		case regI: return(cpu->i );
		case regR: return(cpu->r );
		case regR7: return(cpu->r7 );
		case regIM: return(cpu->im );
		case regIFF1: return(cpu->iff1 );
		case regIFF2: return(cpu->iff2 );
	}

	return(0);
}

  void z80ex_set_reg(Z80EX_CONTEXT *cpu, Z80_REG_T reg, Z80EX_WORD value)
{
	switch(reg)
	{
		case regAF: cpu->af.w =value; return;
		case regBC: cpu->bc.w =value; return;
		case regDE: cpu->de.w =value; return;
		case regHL: cpu->hl.w =value; return;
		case regAF_: cpu->af_.w =value; return;
		case regBC_: cpu->bc_.w =value; return;
		case regDE_: cpu->de_.w =value; return;
		case regHL_: cpu->hl_.w =value; return;
		case regIX: cpu->ix.w =value; return;
		case regIY: cpu->iy.w =value; return;
		case regPC: cpu->pc.w =value; return;
		case regSP: cpu->sp.w =value; return;
		case regI: cpu->i =(value & 0xff); return;
		case regR: cpu->r =(value & 0xff); return;
		case regR7: cpu->r7 =(value & 0xff); return;
		case regIM:
			switch(value & 0x03)
			{
				case 0: cpu->im =IM0; return;
				case 1: cpu->im =IM1; return;
				case 2: cpu->im =IM2; return;
			}
		case regIFF1: cpu->iff1 =(value & 0x01); return;
		case regIFF2: cpu->iff2 =(value & 0x01); return;
	}

	return;
}

  int z80ex_op_tstate(Z80EX_CONTEXT *cpu)
{
	return(cpu->tstate);
}

  int z80ex_doing_halt(Z80EX_CONTEXT *cpu)
{
	return(cpu->halted);
}
