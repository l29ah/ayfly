//Sound tracker PRO player. KSA.
const unsigned char
        STPPlay_data[] =
        { 0x21, 0x44, 0xc7, 0xc3, 0x2a, 0xc0, 0xc3, 0xdd, 0xc0, 0xed, 0x4b, 0xdb, 0xc0, 0xc3, 0xa5, 0xc0, 0x00, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x20, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x20, 0x50, 0x52, 0x4f, 0x00, 0x00, 0x00, 0x70, 0x80, 0xf1, 0xd0, 0x00, 0xf3, 0x22, 0xcc, 0xc0, 0x3e, 0xfc, 0x32, 0x78, 0xc4, 0x32, 0xe2, 0xc4, 0x32, 0x4f, 0xc5, 0x7e, 0x23, 0x32, 0xf0, 0xc0, 0xcd, 0xc6, 0xc0, 0x7e, 0x32, 0x54, 0xc6, 0x23, 0x7e, 0x32, 0x58, 0xc6, 0x23, 0x22, 0x5e, 0xc6, 0xcd, 0xc5, 0xc0, 0x22, 0x66, 0xc6, 0xe5, 0xcd, 0xc5, 0xc0, 0x22, 0x7f, 0xc3, 0x22, 0x8f, 0xc2, 0x22, 0xa9, 0xc1, 0xcd, 0xc5, 0xc0, 0x22, 0x20, 0xc3, 0x22, 0x30, 0xc2, 0x22, 0x5c, 0xc1, 0xeb, 0x7e, 0x36, 0x00, 0xe1, 0xb7, 0x28, 0x0d, 0xcd, 0xc6, 0xc0, 0xeb, 0x2b, 0x72, 0x2b, 0x73, 0x23, 0x23, 0x3d, 0x20, 0xf3, 0x21, 0x25, 0xc0, 0x0e, 0x03, 0x22, 0xc1, 0xc2, 0x22, 0xd1, 0xc1, 0x22, 0xf7, 0xc0, 0x67, 0x6f, 0x22, 0x03, 0xc4, 0x22, 0xbf, 0xc3, 0x22, 0xfd, 0xc3, 0x22, 0xb9, 0xc3, 0x32, 0xe7, 0xc0, 0x3d, 0x32, 0x51, 0xc6, 0xaf, 0x32, 0xaf, 0xc5, 0x21, 0xd0, 0xc0, 0x06, 0x0d, 0x77, 0x23, 0x10, 0xfc, 0x79, 0x32, 0xdb, 0xc0, 0x01, 0xfd, 0xff, 0x3e, 0x0c, 0xed, 0x79, 0xaf, 0x06, 0xbf, 0xed, 0x79, 0xc3, 0xa1, 0xc5, 0xeb, 0x5e, 0x23, 0x56, 0x23, 0xeb, 0x01, 0x00, 0x00, 0x09, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xed, 0x73, 0x9f, 0xc5, 0x16, 0x00, 0xd9, 0x01, 0xf0, 0x60, 0x21, 0xdb, 0xc0, 0x35, 0xc2, 0xc4, 0xc1, 0x36, 0x00, 0x23, 0x35, 0xf2, 0xac, 0xc3, 0x21, 0x00, 0xc0, 0xb6, 0xca, 0xac, 0xc3, 0x7e, 0x23, 0xfe, 0xc0, 0x38, 0x0d, 0x91, 0x30, 0x38, 0x91, 0x30, 0x3e, 0x91, 0x30, 0x41, 0x91, 0xc3, 0x7b, 0xc1, 0xd6, 0x80, 0x30, 0x61, 0x91, 0xd2, 0xa0, 0xc1, 0x99, 0x30, 0x3d, 0x80, 0x32, 0x45, 0xc5, 0x22, 0xf7, 0xc0, 0xaf, 0x32, 0x4f, 0xc5, 0x32, 0x33, 0xc5, 0x6f, 0x67, 0x22, 0x8b, 0xc5, 0xc3, 0xa7, 0xc3, 0x7e, 0x23, 0x32, 0x8e, 0xc5, 0x17, 0x9f, 0x32, 0x8f, 0xc5, 0xc3, 0xfd, 0xc0, 0x28, 0xf1, 0x3d, 0x32, 0x6b, 0xc5, 0xc3, 0xfd, 0xc0, 0x22, 0xf7, 0xc0, 0xc3, 0xa7, 0xc3, 0x3e, 0xfc, 0x32, 0x4f, 0xc5, 0x22, 0xf7, 0xc0, 0xc3, 0xa7, 0xc3, 0x87, 0xd9, 0x5f, 0x21, 0x00, 0xc0, 0x19, 0xf9, 0xe1, 0x7e, 0x87, 0x87, 0x32, 0x60, 0xc5, 0x23, 0x7e, 0x87, 0x87, 0x32, 0x5c, 0xc5, 0x22, 0x51, 0xc5, 0xd9, 0xc3, 0xfd, 0xc0, 0x32, 0xa8, 0xc3, 0xc3, 0xfd, 0xc0, 0x32, 0x35, 0xc4, 0x3e, 0x1f, 0x32, 0x77, 0xc5, 0x7e, 0x23, 0x32, 0x3a, 0xc4, 0x11, 0x22, 0xc0, 0xed, 0x53, 0x36, 0xc5, 0xaf, 0x32, 0x40, 0xc5, 0x32, 0x8e, 0xc5, 0x32, 0x8f, 0xc5, 0x3c, 0x32, 0x3c, 0xc5, 0xc3, 0xfd, 0xc0, 0x87, 0xd9, 0x5f, 0x3e, 0x0f, 0x32, 0x77, 0xc5, 0x21, 0x00, 0xc0, 0x19, 0xf9, 0xe1, 0x7e, 0x32, 0x40, 0xc5, 0x23, 0x7e, 0x32, 0x3c, 0xc5, 0x23, 0x22, 0x36, 0xc5, 0x6a, 0x62, 0x22, 0x8e, 0xc5, 0xd9, 0xc3, 0xfd, 0xc0, 0x7e, 0x3d, 0xc2, 0xb7, 0xc2, 0x21, 0xd9, 0xc0, 0x35, 0xf2, 0x5b, 0xc4, 0x21, 0x00, 0xc0, 0xb6, 0xca, 0x5b, 0xc4, 0x7e, 0x23, 0xfe, 0xc0, 0x38, 0x0d, 0x91, 0x30, 0x32, 0x91, 0x30, 0x38, 0x91, 0x30, 0x3b, 0x91, 0xc3, 0x4f, 0xc2, 0xd6, 0x80, 0x30, 0x5b, 0x91, 0xd2, 0x86, 0xc2, 0x99, 0x30, 0x37, 0x80, 0x32, 0xe3, 0xc3, 0x22, 0xd1, 0xc1, 0xaf, 0x32, 0xe8, 0xc3, 0x6f, 0x67, 0x22, 0xb9, 0xc3, 0x3e, 0x22, 0x32, 0xbb, 0xc3, 0x3e, 0x32, 0x32, 0x45, 0xc4, 0xc3, 0xaf, 0xc2, 0x28, 0x65, 0x3d, 0x32, 0xd9, 0xc3, 0xc3, 0xd7, 0xc1, 0x22, 0xd1, 0xc1, 0xc3, 0xaf, 0xc2, 0x3e, 0xfc, 0x32, 0xe8, 0xc3, 0x22, 0xd1, 0xc1, 0xc3, 0xaf, 0xc2, 0x87, 0xd9, 0x5f, 0x21, 0x00, 0xc0, 0x19, 0xf9, 0xe1, 0x7e, 0x87, 0x87, 0x32, 0xd4, 0xc3, 0x23, 0x7e, 0x87, 0x87, 0x32, 0xca, 0xc3, 0x22, 0xad, 0xc3, 0xd9, 0xc3, 0xd7, 0xc1, 0x32, 0xb0, 0xc2, 0xc3, 0xd7, 0xc1, 0x32, 0x35, 0xc4, 0x3e, 0x1f, 0x32, 0xde, 0xc3, 0x7e, 0x23, 0x32, 0x3a, 0xc4, 0x11, 0x22, 0xc0, 0xed, 0x53, 0xb3, 0xc3, 0x3e, 0x22, 0x32, 0xc1, 0xc3, 0xaf, 0x32, 0xcf, 0xc3, 0x32, 0xbf, 0xc3, 0x32, 0xc0, 0xc3, 0x3c, 0x32, 0xc5, 0xc3, 0xc3, 0xd7, 0xc1, 0x7e, 0x23, 0x32, 0xbf, 0xc3, 0x17, 0x9f, 0x32, 0xc0, 0xc3, 0xc3, 0xd7, 0xc1, 0x87, 0xd9, 0x5f, 0x3e, 0x0f, 0x32, 0xde, 0xc3, 0x21, 0x00, 0xc0, 0x19, 0xf9, 0xe1, 0x7e, 0x32, 0xcf, 0xc3, 0x23, 0x7e, 0x32, 0xc5, 0xc3, 0x23, 0x22, 0xb3, 0xc3, 0x6a, 0x62, 0x22, 0xbf, 0xc3, 0x3e, 0x22, 0x32, 0xc1, 0xc3, 0xd9, 0xc3, 0xd7, 0xc1, 0x3e, 0x00, 0x32, 0xd9, 0xc0, 0xc3, 0x5b, 0xc4, 0x3d, 0xc2, 0x5b, 0xc4, 0x2b, 0x35, 0xf2, 0x5b, 0xc4, 0x21, 0x00, 0xc0, 0xb6, 0xca, 0x41, 0xc6, 0x7e, 0x23, 0xfe, 0xc0, 0x38, 0x0d, 0x91, 0x30, 0x32, 0x91, 0x30, 0x38, 0x91, 0x30, 0x3b, 0x91, 0xc3, 0x3f, 0xc3, 0xd6, 0x80, 0x30, 0x5b, 0x91, 0xd2, 0x76, 0xc3, 0x99, 0x30, 0x37, 0x80, 0x32, 0x27, 0xc4, 0x22, 0xc1, 0xc2, 0xaf, 0x32, 0x2c, 0xc4, 0x6f, 0x67, 0x22, 0xfd, 0xc3, 0x3e, 0x22, 0x32, 0xff, 0xc3, 0x3e, 0x32, 0x32, 0x42, 0xc4, 0xc3, 0x9f, 0xc3, 0x28, 0x65, 0x3d, 0x32, 0x1d, 0xc4, 0xc3, 0xc7, 0xc2, 0x22, 0xc1, 0xc2, 0xc3, 0x9f, 0xc3, 0x3e, 0xfc, 0x32, 0x2c, 0xc4, 0x22, 0xc1, 0xc2, 0xc3, 0x9f, 0xc3, 0x87, 0xd9, 0x5f, 0x21, 0x00, 0xc0, 0x19, 0xf9, 0xe1, 0x7e, 0x87, 0x87, 0x32, 0x18, 0xc4, 0x23, 0x7e, 0x87, 0x87, 0x32, 0x0e, 0xc4, 0x22, 0xf1, 0xc3, 0xd9, 0xc3, 0xc7, 0xc2, 0x32, 0xa0, 0xc3, 0xc3, 0xc7, 0xc2, 0x32, 0x35, 0xc4, 0x3e, 0x1f, 0x32, 0x22, 0xc4, 0x7e, 0x23, 0x32, 0x3a, 0xc4, 0x11, 0x22, 0xc0, 0xed, 0x53, 0xf7, 0xc3, 0x3e, 0x22, 0x32, 0x05, 0xc4, 0xaf, 0x32, 0x13, 0xc4, 0x32, 0x03, 0xc4, 0x32, 0x04, 0xc4, 0x3c, 0x32, 0x09, 0xc4, 0xc3, 0xc7, 0xc2, 0x7e, 0x23, 0x32, 0x03, 0xc4, 0x17, 0x9f, 0x32, 0x04, 0xc4, 0xc3, 0xc7, 0xc2, 0x87, 0xd9, 0x5f, 0x3e, 0x0f, 0x32, 0x22, 0xc4, 0x21, 0x00, 0xc0, 0x19, 0xf9, 0xe1, 0x7e, 0x32, 0x13, 0xc4, 0x23, 0x7e, 0x32, 0x09, 0xc4, 0x23, 0x22, 0xf7, 0xc3, 0x6a, 0x62, 0x22, 0x03, 0xc4, 0x3e, 0x22, 0x32, 0x05, 0xc4, 0xd9, 0xc3, 0xc7, 0xc2, 0x3e, 0x00, 0x32, 0xda, 0xc0, 0xc3, 0x5b, 0xc4, 0x3e, 0x00, 0x32, 0xdc, 0xc0, 0x21, 0x00, 0xc0, 0x22, 0xe4, 0xc4, 0x21, 0x00, 0xc0, 0x22, 0xc9, 0xc4, 0x21, 0x00, 0xc0, 0x22, 0x1f, 0xc5, 0x21, 0x00, 0xc0, 0x22, 0x22, 0xc5, 0x3e, 0x00, 0x32, 0xcf, 0xc4, 0x3e, 0x00, 0x32, 0xef, 0xc4, 0x3e, 0x00, 0x32, 0xd3, 0xc4, 0x3e, 0x00, 0x32, 0xf3, 0xc4, 0x3e, 0x00, 0x32, 0xfe, 0xc4, 0x3e, 0x0f, 0x32, 0x0a, 0xc5, 0x3e, 0x00, 0x32, 0xd8, 0xc4, 0x3e, 0x00, 0xfe, 0x01, 0x28, 0x03, 0x32, 0xe2, 0xc4, 0x21, 0x00, 0xc0, 0x22, 0x7a, 0xc4, 0x21, 0x00, 0xc0, 0x22, 0x5f, 0xc4, 0x21, 0x00, 0xc0, 0x22, 0xab, 0xc4, 0x21, 0x00, 0xc0, 0x22, 0xae, 0xc4, 0x3e, 0x00, 0x32, 0x65, 0xc4, 0x3e, 0x00, 0x32, 0x85, 0xc4, 0x3e, 0x00, 0x32, 0x69, 0xc4, 0x3e, 0x00, 0x32, 0x89, 0xc4, 0x3e, 0x00, 0x32, 0x94, 0xc4, 0x3e, 0x0f, 0x32, 0xa0, 0xc4, 0x3e, 0x00, 0x32, 0x6e, 0xc4, 0x3e, 0x00, 0xfe, 0x01, 0x28, 0x03, 0x32, 0x78, 0xc4, 0x3e, 0x00, 0x32, 0xaf, 0xc5, 0x3e, 0x00, 0x32, 0xbd, 0xc5, 0xaf, 0x32, 0x35, 0xc4, 0x32, 0x5c, 0xc4, 0x32, 0xc6, 0xc4, 0x3c, 0x32, 0x2c, 0xc4, 0x32, 0x42, 0xc4, 0x32, 0xe8, 0xc3, 0x32, 0x45, 0xc4, 0x32, 0xff, 0xc3, 0x32, 0xbb, 0xc3, 0x11, 0x00, 0x00, 0x21, 0x00, 0xc0, 0x19, 0x1c, 0x7b, 0xfe, 0x00, 0x20, 0x02, 0x3e, 0x00, 0x32, 0x5c, 0xc4, 0x3e, 0x00, 0x86, 0x87, 0x5f, 0x21, 0x84, 0xc6, 0x19, 0xf9, 0x3e, 0x00, 0x21, 0x00, 0xc0, 0x3c, 0xfa, 0x1d, 0xc6, 0x5f, 0x19, 0xc6, 0x03, 0xfe, 0x00, 0x20, 0x02, 0x3e, 0x00, 0x32, 0x78, 0xc4, 0xc1, 0xf9, 0xd1, 0x7b, 0xe6, 0x0f, 0xd6, 0x00, 0x6f, 0x3f, 0x9f, 0xa5, 0xcb, 0x3a, 0x30, 0x02, 0xf6, 0x10, 0xe6, 0x00, 0x32, 0xd6, 0xc0, 0x7b, 0x07, 0x38, 0x02, 0xdd, 0x62, 0x21, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x19, 0x22, 0xab, 0xc4, 0x09, 0xc1, 0x09, 0x07, 0x07, 0x07, 0xe6, 0x0f, 0xdd, 0x6f, 0x7c, 0xe6, 0x0f, 0x67, 0x22, 0xd0, 0xc0, 0x11, 0x00, 0x00, 0x21, 0x00, 0xc0, 0x19, 0x1c, 0x7b, 0xfe, 0x00, 0x20, 0x02, 0x3e, 0x00, 0x32, 0xc6, 0xc4, 0x3e, 0x00, 0x86, 0x87, 0x5f, 0x21, 0x84, 0xc6, 0x19, 0xf9, 0x3e, 0x00, 0x21, 0x00, 0xc0, 0x3c, 0xfa, 0x27, 0xc6, 0x5f, 0x19, 0xc6, 0x03, 0xfe, 0x00, 0x20, 0x02, 0x3e, 0x00, 0x32, 0xe2, 0xc4, 0xc1, 0xf9, 0xd1, 0x7b, 0xe6, 0x0f, 0xd6, 0x00, 0x6f, 0x3f, 0x9f, 0xa5, 0xcb, 0x3a, 0x30, 0x02, 0xf6, 0x10, 0xe6, 0x00, 0x32, 0xd7, 0xc0, 0x7b, 0x0f, 0x0f, 0x0f, 0xe6, 0x1e, 0xdd, 0xb5, 0xdd, 0x6f, 0xe6, 0x10, 0x20, 0x02, 0xdd, 0x62, 0x21, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x19, 0x22, 0x1f, 0xc5, 0x09, 0xc1, 0x09, 0x7c, 0xe6, 0x0f, 0x67, 0x22, 0xd2, 0xc0, 0x11, 0x00, 0x00, 0x21, 0x00, 0xc0, 0x19, 0x1c, 0x7b, 0xfe, 0x00, 0x20, 0x02, 0x3e, 0x00, 0x32, 0x33, 0xc5, 0x3e, 0x00, 0x86, 0x87, 0x5f, 0x21, 0x84, 0xc6, 0x19, 0xf9, 0x3e, 0x00, 0x21, 0x00, 0xc0, 0x3c, 0xfa, 0x34, 0xc6, 0x5f, 0x19, 0xc6, 0x03, 0xfe, 0x00, 0x20, 0x02, 0x3e, 0x00, 0x32, 0x4f, 0xc5, 0xc1, 0xf9, 0xd1, 0x7b, 0xe6, 0x0f, 0xd6, 0x00, 0x6f, 0x3f, 0x9f, 0xa5, 0xcb, 0x3a, 0x30, 0x02, 0xf6, 0x10, 0xe6, 0x00, 0x32, 0xd8, 0xc0, 0x7b, 0x0f, 0x0f, 0xe6, 0x3c, 0xdd, 0xb5, 0xdd, 0x6f, 0xe6, 0x20, 0x20, 0x02, 0xdd, 0x62, 0x21, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x19, 0x22, 0x8b, 0xc5, 0x09, 0xc1, 0x09, 0x7c, 0xe6, 0x0f, 0x67, 0x22, 0xd4, 0xc0, 0x31, 0x00, 0x00, 0x21, 0xd8, 0xc0, 0x11, 0xbf, 0xff, 0x01, 0xfd, 0xff, 0x3e, 0x0d, 0xed, 0x79, 0x3e, 0x00, 0xb7, 0x28, 0x0e, 0x43, 0xed, 0x79, 0x3e, 0x0b, 0x42, 0xed, 0x79, 0x43, 0x3e, 0x00, 0xed, 0x79, 0x42, 0x3e, 0x0a, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xdd, 0x7d, 0xed, 0x79, 0x3e, 0x06, 0x42, 0xed, 0x79, 0x43, 0xdd, 0x7c, 0xed, 0x79, 0x3e, 0x05, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x3d, 0x42, 0xed, 0x79, 0x43, 0xed, 0xab, 0x32, 0xaf, 0xc5, 0x21, 0x58, 0x27, 0xd9, 0xfb, 0xc9, 0xaf, 0x32, 0xd6, 0xc0, 0xdd, 0x2e, 0x09, 0xc3, 0xc5, 0xc4, 0xaf, 0x32, 0xd7, 0xc0, 0xdd, 0x7d, 0xf6, 0x12, 0xdd, 0x6f, 0xc3, 0x32, 0xc5, 0xaf, 0x32, 0xd8, 0xc0, 0xdd, 0x7d, 0xf6, 0x24, 0xdd, 0x6f, 0xc3, 0x9e, 0xc5, 0x2a, 0xd1, 0xc1, 0xb6, 0xc2, 0x5b, 0xc4, 0x2a, 0xf7, 0xc0, 0xb6, 0xc2, 0x5b, 0xc4, 0x47, 0x3e, 0x00, 0x3c, 0xfe, 0x00, 0x20, 0x02, 0x3e, 0x00, 0x32, 0x51, 0xc6, 0x4f, 0x21, 0x00, 0xc0, 0x09, 0x09, 0x4e, 0x23, 0x7e, 0x21, 0x00, 0xc0, 0x09, 0xf9, 0xe1, 0x22, 0xc1, 0xc2, 0xe1, 0x22, 0xd1, 0xc1, 0xe1, 0x22, 0xf7, 0xc0, 0xc6, 0x60, 0x32, 0xe7, 0xc0, 0x47, 0x0e, 0xf0, 0xc3, 0xc0, 0xc2, 0x4b, 0x53, 0x41, 0xf8, 0x0e, 0x10, 0x0e, 0x60, 0x0d, 0x80, 0x0c, 0xd8, 0x0b, 0x28, 0x0b, 0x88, 0x0a, 0xf0, 0x09, 0x60, 0x09, 0xe0, 0x08, 0x58, 0x08, 0xe0, 0x07, 0x7c, 0x07, 0x08, 0x07, 0xb0, 0x06, 0x40, 0x06, 0xec, 0x05, 0x94, 0x05, 0x44, 0x05, 0xf8, 0x04, 0xb0, 0x04, 0x70, 0x04, 0x2c, 0x04, 0xf0, 0x03, 0xbe, 0x03, 0x84, 0x03, 0x58, 0x03, 0x20, 0x03, 0xf6, 0x02, 0xca, 0x02, 0xa2, 0x02, 0x7c, 0x02, 0x58, 0x02, 0x38, 0x02, 0x16, 0x02, 0xf8, 0x01, 0xdf, 0x01, 0xc2, 0x01, 0xac, 0x01, 0x90, 0x01, 0x7b, 0x01, 0x65, 0x01, 0x51, 0x01, 0x3e, 0x01, 0x2c, 0x01, 0x1c, 0x01, 0x0b, 0x01, 0xfc, 0x00, 0xef, 0x00, 0xe1, 0x00, 0xd6, 0x00, 0xc8, 0x00, 0xbd, 0x00, 0xb2, 0x00, 0xa8, 0x00, 0x9f, 0x00, 0x96, 0x00, 0x8e, 0x00, 0x85, 0x00, 0x7e, 0x00, 0x77, 0x00, 0x70, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x5e, 0x00, 0x59, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x47, 0x00, 0x42, 0x00, 0x3f, 0x00, 0x3b, 0x00, 0x38, 0x00, 0x35, 0x00, 0x32, 0x00, 0x2f, 0x00, 0x2c, 0x00, 0x2a, 0x00, 0x27, 0x00, 0x25, 0x00, 0x23, 0x00, 0x21, 0x00, 0x1f, 0x00, 0x1d, 0x00, 0x1c, 0x00, 0x1a, 0x00, 0x19, 0x00, 0x17, 0x00, 0x16, 0x00, 0x15, 0x00, 0x13, 0x00, 0x12, 0x00, 0x11, 0x00, 0x10, 0x00, 0x0f, 0x00, };

struct STP_File
{
    unsigned char STP_Delay;
    unsigned char STP_PositionsPointer0, STP_PositionsPointer1;
    unsigned char STP_PatternsPointer0, STP_PatternsPointer1;
    unsigned char STP_OrnamentsPointer0, STP_OrnamentsPointer1;
    unsigned char STP_SamplesPointer0, STP_SamplesPointer1;
    unsigned char STP_Init_Id;
};

static const char KsaId [] = "KSA SOFTWARE COMPILATION OF ";

#define STP_PositionsPointer (header->STP_PositionsPointer0 | (header->STP_PositionsPointer1 << 8))
#define STP_OrnamentsPointer (header->STP_OrnamentsPointer0 | (header->STP_OrnamentsPointer1 << 8))
#define STP_PatternsPointer (header->STP_PatternsPointer0 | (header->STP_PatternsPointer1 << 8))
#define STP_SamplesPointer (header->STP_SamplesPointer0 | (header->STP_SamplesPointer1 << 8))

void STP_Init(AYSongInfo &info)
{
    if(!ay_sys_initz80(info))
        return;
    ay_sys_initz80module(info, 0xc000, STPPlay_data, sizeof(STPPlay_data), 0xc000, 0xc006);
}

void STP_GetInfo(AYSongInfo &info)
{
    unsigned char *module = info.file_data;
    unsigned long tm = 0;
    unsigned char a = 1;
    unsigned long i, j1;
    unsigned char stDelay = module[0];
    unsigned short stPosPt = *(unsigned short *)&module[1];
    unsigned long stPatPt = *(unsigned short *)&module[3];

    for(i = 0; i < (unsigned char)module[stPosPt]; i++)
    {
        if(i == module[stPosPt + 1])
            info.Loop = tm * stDelay;
        j1 = *(unsigned short *)&module[stPatPt + module[stPosPt + 2 + i * 2]];
        while(*(unsigned char *)&module[j1] != 0)
        {
            unsigned char val = *(unsigned char *)&module[j1];
            if((val >= 1 && val <= 0x60) || (val >= 0xd0 && val <= 0xef))
            {
                tm += a;
            }
            else if(val >= 0x80 && val <= 0xbf)
            {
                a = val - 0x7f;
            }
            else if((val >= 0xc0 && val <= 0xcf) || val == 0xf0)
            {
                j1++;
            }
            j1++;
        }
    }
    tm *= stDelay;
    info.Length = tm;
    if(!memcmp(&module [10], KsaId, 28))
            info.Name = ay_sys_getstr(&module [38], 25);
}

void STP_Play(AYSongInfo &info)
{
    do
    {
        z80ex_step(info.z80ctx);
    }
    while(z80ex_get_reg(info.z80ctx, regPC) != 8);
}

void STP_Cleanup(AYSongInfo &info)
{
    ay_sys_shutdownz80(info);
}

bool STP_Detect(unsigned char *module, unsigned long length)
{
    STP_File *header = (STP_File *)module;
    int j, j1, j2, j3;
    if(length < 10)
        return false;
    if(STP_PositionsPointer> length)
        return false;
    if(STP_PatternsPointer> length)
        return false;
    if(STP_OrnamentsPointer> length)
        return false;
    if(STP_SamplesPointer> length)
        return false;
    if((STP_SamplesPointer- STP_OrnamentsPointer) != 0x20)
    return false;
    if((int)(STP_OrnamentsPointer - STP_PatternsPointer) <= 0)
    return false;
    if(((STP_OrnamentsPointer - STP_PatternsPointer) % 6) != 0)
    return false;
    if((module[STP_PositionsPointer] * 2 + 2 + STP_PositionsPointer - STP_PatternsPointer) != 0)
    return false;
    int F_Length = STP_SamplesPointer + 30;
    if(F_Length> 65535)
    return false;
    if(F_Length> length + 1)
    return false;

    j2 = 0;
    j3 = header->STP_Init_Id;
    if(j3 == 0)
    {
        j2 = ay_sys_getword(&module[STP_PatternsPointer]);        
        if(!strncmp((char *)&module [10], KsaId, strlen(KsaId)))
        j2 -= 0xa + 53;
        else
        j2 -= 0xa;
        if(j2 < 0)
        return false;
        int F_Address = j2;
        j3 = (F_Length - STP_PatternsPointer) / 2;
        for(j1 = 0; j1 < j3; j1++)
        {
            j = ay_sys_getword(&module[STP_PatternsPointer + j1 * 2]);
            j -= j2;
            ay_sys_writeword(&module[STP_PatternsPointer + j1 * 2], j);
        }
    }

    j = ay_sys_getword(&module[STP_OrnamentsPointer]);
    j--;
    if((unsigned long)(j) <= (unsigned long)(length - 1))
    {
        j = ay_sys_getword(&module [j]);
        if(j == 0)
        {
            header->STP_Init_Id = j3;
            return true;
        }
    }

    for(j1 = 0; j1 < j3; j1++)
    {
        j = ay_sys_getword(&module[STP_PatternsPointer + j1 * 2]);
        j += j2;
        ay_sys_writeword(&module[STP_PatternsPointer + j1 * 2], j);
    }

}
